# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /DiskAccesses/get/List all possible private link resources under disk access resource.
@try_manual
def step_disk_access_show_private_link_resource(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm disk-access show-private-link-resource '
             '--name "{myDiskAccess}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DiskAccesses/delete/Delete a private endpoint connection under a disk access resource.
@try_manual
def step_disk_access_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm disk-access delete-a-private-endpoint-connection -y '
             '--name "{myDiskAccess}" '
             '--private-endpoint-connection-name "myPrivateEndpointConnection" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/put/Create or update a simple gallery Application.
@try_manual
def step_gallery_application_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application create '
             '--location "West US" '
             '--description "This is the gallery application description." '
             '--eula "This is the gallery application EULA." '
             '--privacy-statement-uri "myPrivacyStatementUri}}" '
             '--release-note-uri "myReleaseNoteUri" '
             '--supported-os-type "Windows" '
             '--name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/get/Get a gallery Application.
@try_manual
def step_gallery_application_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application show '
             '--name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/get/List gallery Applications in a gallery.
@try_manual
def step_gallery_application_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application list '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplicationVersions/get/List gallery Application Versions in a gallery Application Definition.
@try_manual
def step_gallery_application_version_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application-version list '
             '--gallery-application-name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/delete/Delete a gallery Application.
@try_manual
def step_gallery_application_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application delete -y '
             '--name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SshPublicKeys/put/Create a new SSH public key resource.
@try_manual
def step_ssh_public_key_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm ssh-public-key create '
             '--location "westus" '
             '--public-key "{{ssh-rsa public key}}" '
             '--resource-group "{rg}" '
             '--name "{mySshPublicKey}"',
             checks=checks)


# EXAMPLE: /SshPublicKeys/get/Get an ssh public key.
@try_manual
def step_ssh_public_key_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm ssh-public-key show '
             '--resource-group "{rg}" '
             '--name "{mySshPublicKey}"',
             checks=checks)


# EXAMPLE: /SshPublicKeys/post/Generate an SSH key pair.
@try_manual
def step_ssh_public_key_generate_key_pair(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm ssh-public-key generate-key-pair '
             '--resource-group "{rg}" '
             '--name "{mySshPublicKey}"',
             checks=checks)


# EXAMPLE: /VirtualMachines/post/Reimage a Virtual Machine.
@try_manual
def step_virtual_machine_reimage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm virtual-machine reimage '
             '--temp-disk true '
             '--resource-group "{rg}" '
             '--vm-name "myVMName"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMExtensions/put/Create VirtualMachineScaleSet VM extension.
@try_manual
def step_virtual_machine_scale_set_vm_extension_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm virtual-machine-scale-set-vm-extension create '
             '--type-properties-type "extType" '
             '--auto-upgrade-minor-version true '
             '--publisher "extPublisher" '
             '--settings "{{\\"UserName\\":\\"xyz@microsoft.com\\"}}" '
             '--type-handler-version "1.2" '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-extension-name "myVMExtension" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMExtensions/get/Get VirtualMachineScaleSet VM extension.
@try_manual
def step_virtual_machine_scale_set_vm_extension_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm virtual-machine-scale-set-vm-extension show '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-extension-name "myVMExtension" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMExtensions/get/List extensions in Vmss instance.
@try_manual
def step_virtual_machine_scale_set_vm_extension_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm virtual-machine-scale-set-vm-extension list '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMRunCommands/get/List run commands in Vmss instance.
@try_manual
def step_virtual_machine_scale_set_vm_run_command_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm virtual-machine-scale-set-vm-run-command list '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMs/post/RetrieveBootDiagnosticsData of a virtual machine.
@try_manual
def step_virtual_machine_scale(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm virtual-machine-scale-set-v-ms retrieve-boot-diagnostic-data '
             '--instance-id "0" '
             '--resource-group "{rg_2}" '
             '--sas-uri-expiration-time-in-minutes 60 '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)
