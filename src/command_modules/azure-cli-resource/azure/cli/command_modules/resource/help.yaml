version: 1
content:
- group:
    name: managedapp
    summary: Manage template solutions provided and maintained by Independent Software Vendors (ISVs).
- group:
    name: managedapp definition
    summary: Manage Azure Managed Applications.
- command:
    name: managedapp create
    summary: Create a managed application.
    examples:
    - summary: Create a managed application of kind 'ServiceCatalog'. This requires a valid managed application definition ID.
      command: |
        az managedapp create -g MyResourceGroup -n MyManagedApp -l westcentralus --kind ServiceCatalog \
            -m "/subscriptions/{SubID}/resourceGroups/{ManagedResourceGroup}" \
            -d "/subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/Microsoft.Solutions/applianceDefinitions/{ApplianceDefinition}"
    - summary: Create a managed application of kind 'MarketPlace'. This requires a valid plan, containing details about existing marketplace package like plan name, version, publisher and product.
      command: |
        az managedapp create -g MyResourceGroup -n MyManagedApp -l westcentralus --kind MarketPlace \
            -m "/subscriptions/{SubID}/resourceGroups/{ManagedResourceGroup}" \
            --plan-name ContosoAppliance --plan-version "1.0" --plan-product "contoso-appliance" --plan-publisher Contoso
- command:
    name: managedapp definition create
    summary: Create a managed application definition.
    examples:
    - summary: Create a managed application defintion.
      command: >
        az managedapp definition create -g MyResourceGroup -n MyManagedAppDef -l eastus --display-name "MyManagedAppDef" \
            --description "My Managed App Def description" -a "myPrincipalId:myRoleId" --lock-level None \
            --package-file-uri "https://path/to/myPackage.zip"
    - summary: Create a managed application defintion with inline values for createUiDefinition and mainTemplate.
      command: >
        az managedapp definition create -g MyResourceGroup -n MyManagedAppDef -l eastus --display-name "MyManagedAppDef" \
            --description "My Managed App Def description" -a "myPrincipalId:myRoleId" --lock-level None \
            --create-ui-definition @myCreateUiDef.json --main-template @myMainTemplate.json
- command:
    name: managedapp definition delete
    summary: Delete a managed application definition.
- command:
    name: managedapp definition list
    summary: List managed application definitions.
- command:
    name: managedapp delete
    summary: Delete a managed application.
- command:
    name: managedapp list
    summary: List managed applications.
- group:
    name: lock
    summary: Manage Azure locks.
- command:
    name: lock create
    summary: Create a lock.
    description: 'Locks can exist at three different scopes: subscription, resource group and resource.'
    examples:
    - summary: Create a read-only subscription level lock.
      command: >
        az lock create --name lockName --resource-group group --lock-type ReadOnly
- command:
    name: lock delete
    summary: Delete a lock.
    examples:
    - summary: Delete a resource group-level lock
      command: >
        az lock delete --name lockName --resource-group group
- command:
    name: lock list
    summary: List lock information.
    examples:
    - summary: List out the locks on a vnet resource. Includes locks in the associated group and subscription.
      command: >
        az lock list --resource myvnet --resource-type Microsoft.Network/virtualNetworks -g group
    - summary: List out all locks on the subscription level
      command: >
        az lock list
- command:
    name: lock show
    summary: Show the properties of a lock
    examples:
    - summary: Show a subscription level lock
      command: >
        az lock show -n lockname
- command:
    name: lock update
    summary: Update a lock.
    examples:
    - summary: Update a resource group level lock with new notes and type
      command: >
        az lock update --name lockName --resource-group group --notes newNotesHere --lock-type CanNotDelete
- group:
    name: account lock
    summary: Manage Azure subscription level locks.
- command:
    name: account lock create
    summary: Create a subscription lock.
    examples:
    - summary: Create a read-only subscription level lock.
      command: >
        az account lock create --lock-type ReadOnly -n lockName
- command:
    name: account lock delete
    summary: Delete a subscription lock.
    examples:
    - summary: Delete a subscription lock
      command: >
        az account lock delete --name lockName
- command:
    name: account lock list
    summary: List lock information in the subscription.
    examples:
    - summary: List out all locks on the subscription level
      command: >
        az account lock list
- command:
    name: account lock show
    summary: Show the details of a subscription lock
    examples:
    - summary: Show a subscription level lock
      command: >
        az account lock show -n lockname
- command:
    name: account lock update
    summary: Update a subscription lock.
    examples:
    - summary: Update a subscription lock with new notes and type
      command: >
        az account lock update --name lockName --notes newNotesHere --lock-type CanNotDelete
- group:
    name: account management-group
    summary: Manage Azure Management Groups.
- group:
    name: account management-group subscription
    summary: Subscription operations for Management Groups.
- command:
    name: account management-group list
    summary: List all management groups.
    description: List of all management groups in the current tenant.
    examples:
    - summary: List all management groups
      command: >
        az account management-group list
- command:
    name: account management-group show
    summary: Get a specific management group.
    description: Get the details of the management group.
    arguments:
    - name: --name
      summary: Name of the management group.
    - name: --expand
      summary: If given, lists the children in the first level of hierarchy.
    - name: --recurse
      summary: If given, lists the children in all levels of hierarchy.
    examples:
    - summary: Get a management group.
      command: >
        az account management-group show --name GroupName
    - summary: Get a management group with children in the first level of hierarchy.
      command: >
        az account management-group show --name GroupName -e
    - summary: Get a management group with children in all levels of hierarchy.
      command: >
        az account management-group show --name GroupName -e -r
- command:
    name: account management-group create
    summary: Create a new management group.
    description: Create a new management group.
    arguments:
    - name: --name
      summary: Name of the management group.
    - name: --display-name
      summary: Sets the display name of the management group. If null, the group name is set as the display name.
    - name: --parent
      summary: Sets the parent of the management group. Can be the fully qualified id or the name of the management group. If null, the root tenant group is set as the parent.
    examples:
    - summary: Create a new management group.
      command: >
        az account management-group create --name GroupName
    - summary: Create a new management group with a specific display name.
      command: >
        az account management-group create --name GroupName --display-name DisplayName
    - summary: Create a new management group with a specific parent.
      command: >
        az account management-group create --name GroupName --parent ParentId/ParentName
    - summary: Create a new management group with a specific display name and parent.
      command: >
        az account management-group create --name GroupName --display-name DisplayName --parent ParentId/ParentName
- command:
    name: account management-group update
    summary: Update an existing management group.
    description: Update an existing management group.
    arguments:
    - name: --name
      summary: Name of the management group.
    - name: --display-name
      summary: Updates the display name of the management group. If null, no change is made.
    - name: --parent
      summary: Update the parent of the management group. Can be the fully qualified id or the name of the management group. If null, no change is made.
    examples:
    - summary: Update an existing management group with a specific display name.
      command: >
        az account management-group update --name GroupName --display-name DisplayName
    - summary: Update an existing management group with a specific parent.
      command: >
        az account management-group update --name GroupName --parent ParentId/ParentName
    - summary: Update an existing management group with a specific display name and parent.
      command: >
        az account management-group update --name GroupName --display-name DisplayName --parent ParentId/ParentName
- command:
    name: account management-group delete
    summary: Delete an existing management group.
    description: Delete an existing management group.
    arguments:
    - name: --name
      summary: Name of the management group.
    examples:
    - summary: Delete an existing management group
      command: >
        az account management-group delete --name GroupName
- command:
    name: account management-group subscription add
    summary: Add a subscription to a management group.
    description: Add a subscription to a management group.
    arguments:
    - name: --name
      summary: Name of the management group.
    - name: --subscription
      summary: Subscription Id or Name
    examples:
    - summary: Add a subscription to a management group.
      command: >
        az account management-group subscription add --name GroupName --subscription Subscription
- command:
    name: account management-group subscription remove
    summary: Remove an existing subscription from a management group.
    description: Remove an existing subscription from a management group.
    arguments:
    - name: --name
      summary: Name of the management group.
    - name: --subscription
      summary: Subscription Id or Name
    examples:
    - summary: Remove an existing subscription from a management group.
      command: >
        az account management-group subscription remove --name GroupName --subscription Subscription
- group:
    name: policy
    summary: Manage resource policies.
- group:
    name: policy definition
    summary: Manage resource policy definitions.
- command:
    name: policy definition create
    summary: Create a policy definition.
    arguments:
    - name: --rules
      summary: Policy rules in JSON format, or a path to a file containing JSON rules.
    - name: --management-group
      summary: Name of the management group the new policy definition can be assigned in.
    - name: --subscription
      summary: Name or id of the subscription the new policy definition can be assigned in.
    examples:
    - summary: Create a read-only policy.
      command: |
        az policy definition create --name readOnlyStorage --rules '{ \
            "if": \
            { \
                "field": "type", \
                "equals": "Microsoft.Storage/storageAccounts/write" \
            }, \
            "then": \
            { \
                "effect": "deny" \
            } \
        }'
    - summary: Create a policy parameter definition.
      command: |
        az policy definition create --name allowedLocations --rules '{ \
            "if": { \
                "allOf": [ \
                    { \
                        "field": "location", \
                        "notIn": "[parameters('listOfAllowedLocations')]" \
                    }, \
                    { \
                        "field": "location", \
                        "notEquals": "global" \
                    }, \
                    { \
                        "field": "type", \
                        "notEquals": "Microsoft.AzureActiveDirectory/b2cDirectories" \
                    } \
                ] \
            }, \
            "then": { \
                "effect": "deny" \
            } \
        }' \
        --params '{ \
            "allowedLocations": { \
                "type": "array", \
                "metadata": { \
                    "description": "The list of locations that can be specified when deploying resources", \
                    "strongType": "location", \
                    "displayName": "Allowed locations" \
                } \
            } \
        }'
    - summary: Create a read-only policy that can be applied within a management group.
      command: |
        az policy definition create -n readOnlyStorage --management-group 'MyManagementGroup' --rules '{ \
            "if": \
            { \
                "field": "type", \
                "equals": "Microsoft.Storage/storageAccounts/write" \
            }, \
            "then": \
            { \
                "effect": "deny" \
            } \
        }'
- command:
    name: policy definition delete
    summary: Delete a policy definition.
- command:
    name: policy definition show
    summary: Show a policy definition.
- command:
    name: policy definition update
    summary: Update a policy definition.
- command:
    name: policy definition list
    summary: List policy definitions.
- group:
    name: policy set-definition
    summary: Manage resource policy set definitions.
- command:
    name: policy set-definition create
    summary: Create a policy set definition.
    arguments:
    - name: --definitions
      summary: Policy definitions in JSON format, or a path to a file containing JSON rules.
    - name: --management-group
      summary: Name of management group the new policy set definition can be assigned in.
    - name: --subscription
      summary: Name or id of the subscription the new policy set definition can be assigned in.
    examples:
    - summary: Create a policy set definition.
      command: |
        az policy set-definition create -n readOnlyStorage --definitions '[ \
                { \
                    "policyDefinitionId": "/subscriptions/mySubId/providers/Microsoft.Authorization/policyDefinitions/storagePolicy" \
                } \
            ]'
    - summary: Create a policy set definition to be used by a subscription.
      command: |
        az policy set-definition create -n readOnlyStorage --subscription '0b1f6471-1bf0-4dda-aec3-111122223333' --definitions '[ \
                { \
                    "policyDefinitionId": "/subscriptions/mySubId/providers/Microsoft.Authorization/policyDefinitions/storagePolicy" \
                } \
            ]'
- command:
    name: policy set-definition delete
    summary: Delete a policy set definition.
- command:
    name: policy set-definition show
    summary: Show a policy set definition.
- command:
    name: policy set-definition update
    summary: Update a policy set definition.
- command:
    name: policy set-definition list
    summary: List policy set definitions.
- group:
    name: policy assignment
    summary: Manage resource policy assignments.
- command:
    name: policy assignment create
    summary: Create a resource policy assignment.
    arguments:
    - name: --scope
      summary: Scope to which this policy assignment applies.
    examples:
    - summary: Create a resource policy assignment at scope
      command: |
        Valid scopes are management group, subscription, resource group, and resource, for example
           management group:  /providers/Microsoft.Management/managementGroups/MyManagementGroup
           subscription:      /subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333
           resource group:    /subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup
           resource:          /subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM
             az policy assignment create --scope '/providers/Microsoft.Management/managementGroups/MyManagementGroup' --policy {PolicyName} -p '{ \
                 "allowedLocations": { \
                     "value": [ \
                         "australiaeast", \
                         "eastus", \
                         "japaneast" \
                     ] \
                 } \
             }'
    - summary: Create a resource policy assignment and provide rule parameter values.
      command: |
        az policy assignment create --policy {PolicyName} -p '{ \
            "allowedLocations": { \
                "value": [ \
                    "australiaeast", \
                    "eastus", \
                    "japaneast" \
                ] \
            } \
        }'
    - summary: Create a resource policy assignment with a system assigned identity.
      command: >
        az policy assignment create --name myPolicy --policy {PolicyName} --assign-identity
    - summary: Create a resource policy assignment with a system assigned identity. The identity will have 'Contributor' role access to the subscription.
      command: >
        az policy assignment create --name myPolicy --policy {PolicyName} --assign-identity --identity-scope /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx --role Contributor
- command:
    name: policy assignment delete
    summary: Delete a resource policy assignment.
- command:
    name: policy assignment show
    summary: Show a resource policy assignment.
- command:
    name: policy assignment list
    summary: List resource policy assignments.
- group:
    name: policy assignment identity
    summary: Manage a policy assignment's managed identity.
- command:
    name: policy assignment identity assign
    summary: Add a system assigned identity to a policy assignment.
    examples:
    - summary: Add a system assigned managed identity to a policy assignment.
      command: >
        az policy assignment identity assign -g MyResourceGroup -n MyPolicyAssignment
    - summary: Add a system assigned managed identity to a policy assignment and grant it the 'Contributor' role for the current resource group.
      command: >
        az policy assignment identity assign -g MyResourceGroup -n MyPolicyAssignment --role Contributor --identity-scope /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup
- command:
    name: policy assignment identity show
    summary: Show a policy assignment's managed identity.
- command:
    name: policy assignment identity remove
    summary: Remove a managed identity from a policy assignment.
- group:
    name: resource
    summary: Manage Azure resources.
- command:
    name: resource list
    summary: List resources.
    examples:
    - summary: List all resources in the West US region.
      command: >
        az resource list --location westus
    - summary: List all resources with the name 'resourceName'.
      command: >
        az resource list --name 'resourceName'
    - summary: List all resources with the tag 'test'.
      command: >
        az resource list --tag test
    - summary: List all resources with a tag that starts with 'test'.
      command: >
        az resource list --tag 'test*'
    - summary: List all resources with the tag 'test' that have the value 'example'.
      command: >
        az resource list --tag test=example
- command:
    name: resource show
    summary: Get the details of a resource.
    examples:
    - summary: Show a virtual machine resource named 'MyVm'.
      command: >
        az resource show -g MyResourceGroup -n MyVm --resource-type "Microsoft.Compute/virtualMachines"
    - summary: Show a web app using a resource identifier.
      command: >
        az resource show --ids /subscriptions/0b1f6471-1bf0-4dda-aec3-111111111111/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/MyWebapp
    - summary: Show a subnet.
      command: >
        az resource show -g MyResourceGroup -n MySubnet --namespace Microsoft.Network --parent virtualnetworks/MyVnet --resource-type subnets
    - summary: Show a subnet using a resource identifier.
      command: >
        az resource show --ids /subscriptions/0b1f6471-1bf0-4dda-aec3-111111111111/resourceGroups/MyResourceGroup/providers/Microsoft.Network/virtualNetworks/MyVnet/subnets/MySubnet
    - summary: Show an application gateway path rule.
      command: >
        az resource show -g MyResourceGroup --namespace Microsoft.Network --parent applicationGateways/ag1/urlPathMaps/map1 --resource-type pathRules -n rule1
- command:
    name: resource delete
    summary: Delete a resource.
    examples:
    - summary: Delete a virtual machine named 'MyVm'.
      command: >
        az resource delete -g MyResourceGroup -n MyVm --resource-type "Microsoft.Compute/virtualMachines"
    - summary: Delete a web app using a resource identifier.
      command: >
        az resource delete --ids /subscriptions/0b1f6471-1bf0-4dda-aec3-111111111111/resourceGroups/MyResourceGroup/providers/Microsoft.Web/sites/MyWebapp
    - summary: Delete a subnet using a resource identifier.
      command: >
        az resource delete --ids /subscriptions/0b1f6471-1bf0-4dda-aec3-111111111111/resourceGroups/MyResourceGroup/providers/Microsoft.Network/virtualNetworks/MyVnet/subnets/MySubnet
- command:
    name: resource tag
    summary: Tag a resource.
    examples:
    - summary: Tag the virtual machine 'MyVm' with the key 'vmlist' and value 'vm1'.
      command: >
        az resource tag --tags vmlist=vm1 -g MyResourceGroup -n MyVm --resource-type "Microsoft.Compute/virtualMachines"
    - summary: Tag a web app with the key 'vmlist' and value 'vm1', using a resource identifier.
      command: >
        az resource tag --tags vmlist=vm1 --id /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/Microsoft.Web/sites/{WebApp}
- command:
    name: resource create
    summary: create a resource.
    examples:
    - summary: Create an API app by providing a full JSON configuration.
      command: |
        az resource create -g myRG -n myApiApp --resource-type Microsoft.web/sites --is-full-object --properties '{ \
                    "kind": "api", \
                    "location": "West US", \
                    "properties": { \
                        "serverFarmId": "/subscriptions/{SubID}/resourcegroups/{ResourceGroup}/providers/Microsoft.Web/serverfarms/{ServicePlan}" \
                    } \
                }'
    - summary: Create a resource by loading JSON configuration from a file.
      command: >
        az resource create -g myRG -n myApiApp --resource-type Microsoft.web/sites --is-full-object --properties @jsonConfigFile
    - summary: Create a web app with the minimum required configuration information.
      command: |
        az resource create -g myRG -n myWeb --resource-type Microsoft.web/sites --properties '{ \
                "serverFarmId":"/subscriptions/{SubID}/resourcegroups/{ResourceGroup}/providers/Microsoft.Web/serverfarms/{ServicePlan}" \
            }'
- command:
    name: resource update
    summary: Update a resource.
- command:
    name: resource wait
    summary: Place the CLI in a waiting state until a condition of a resources is met.
- command:
    name: resource invoke-action
    summary: Invoke an action on the resource.
    description: >
      A list of possible actions corresponding to a resource can be found at https://docs.microsoft.com/en-us/rest/api/. All POST requests are actions that can be invoked and are specified at the end of the URI path. For instance, to stop a VM, the
      request URI is https://management.azure.com/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroup}/providers/Microsoft.Compute/virtualMachines/{VM}/powerOff?api-version={APIVersion} and the corresponding action is `powerOff`. This can
      be found at https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/virtualmachines-stop.
    examples:
    - summary: Power-off a vm, specified by Id.
      command: >
        az resource invoke-action --action powerOff \
          --ids /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/Microsoft.Compute/virtualMachines/{VMName}
    - summary: Capture information for a stopped vm.
      command: >
        az resource invoke-action --action capture \
          --ids /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/Microsoft.Compute/virtualMachines/{VMName} \
          --request-body '{ \
            "vhdPrefix": "myPrefix", \
            "destinationContainerName": "myContainer", \
            "overwriteVhds": true \
        }'
- group:
    name: feature
    summary: Manage resource provider features.
- command:
    name: feature list
    summary: List preview features.
- command:
    name: feature register
    summary: register a preview feature.
- group:
    name: group
    summary: Manage resource groups and template deployments.
- command:
    name: group exists
    summary: Check if a resource group exists.
    examples:
    - summary: Check if 'MyResourceGroup' exists.
      command: >
        az group exists -n MyResourceGroup
- command:
    name: group create
    summary: Create a new resource group.
    examples:
    - summary: Create a new resource group in the West US region.
      command: >
        az group create -l westus -n MyResourceGroup
- command:
    name: group delete
    summary: Delete a resource group.
    examples:
    - summary: Delete a resource group.
      command: >
        az group delete -n MyResourceGroup
- command:
    name: group list
    summary: List resource groups.
    examples:
    - summary: List all resource groups located in the West US region.
      command: >
        az group list --query "[?location=='westus']"
- command:
    name: group update
    summary: Update a resource group.
- command:
    name: group wait
    summary: Place the CLI in a waiting state until a condition of the resource group is met.
- group:
    name: group deployment
    summary: Manage Azure Resource Manager deployments.
- command:
    name: group deployment create
    summary: Start a deployment.
    arguments:
    - name: --parameters
      summary: Supply deployment parameter values.
      description: >
        Parameters may be supplied from a file using the `@{path}` syntax, a JSON string, or as <KEY=VALUE> pairs. Parameters are evaluated in order, so when a value is assigned twice, the latter value will be used.
        It is recommended that you supply your parameters file first, and then override selectively using KEY=VALUE syntax.
    examples:
    - summary: Create a deployment from a remote template file, using parameters from a local JSON file.
      command: >
        az group deployment create -g MyResourceGroup --template-uri https://myresource/azuredeploy.json --parameters @myparameters.json
    - summary: Create a deployment from a local template file, using parameters from a JSON string.
      command: |
        az group deployment create -g MyResourceGroup --template-file azuredeploy.json --parameters '{ \
                "location": { \
                    "value": "westus" \
                } \
            }'
    - summary: Create a deployment from a local template, using a local parameter file, a remote parameter file, and selectively overriding key/value pairs.
      command: >
        az group deployment create -g MyResourceGroup --template-file azuredeploy.json \
            --parameters @params.json --parameters https://mysite/params.json --parameters MyValue=This MyArray=@array.json
- command:
    name: group deployment export
    summary: Export the template used for a deployment.
- command:
    name: group deployment validate
    summary: Validate whether a template is syntactically correct.
    arguments:
    - name: --parameters
      summary: Supply deployment parameter values.
      description: >
        Parameters may be supplied from a file using the `@{path}` syntax, a JSON string, or as <KEY=VALUE> pairs. Parameters are evaluated in order, so when a value is assigned twice, the latter value will be used.
        It is recommended that you supply your parameters file first, and then override selectively using KEY=VALUE syntax.
- command:
    name: group deployment wait
    summary: Place the CLI in a waiting state until a deployment condition is met.
- group:
    name: group deployment operation
    summary: Manage deployment operations.
- group:
    name: deployment
    summary: Manage Azure Resource Manager deployments at subscription scope.
- command:
    name: deployment create
    summary: Start a deployment.
    arguments:
    - name: --parameters
      summary: Supply deployment parameter values.
      description: >
        Parameters may be supplied from a file using the `@{path}` syntax, a JSON string, or as <KEY=VALUE> pairs. Parameters are evaluated in order, so when a value is assigned twice, the latter value will be used.
        It is recommended that you supply your parameters file first, and then override selectively using KEY=VALUE syntax.
    examples:
    - summary: Create a deployment from a remote template file, using parameters from a local JSON file.
      command: >
        az deployment create --location WestUS --template-uri https://myresource/azuredeploy.json --parameters @myparameters.json
    - summary: Create a deployment from a local template file, using parameters from a JSON string.
      command: |
        az deployment create --location WestUS --template-file azuredeploy.json --parameters '{ \
                "policyName": { \
                    "value": "policy2" \
                } \
            }'
    - summary: Create a deployment from a local template, using a parameter file, a remote parameter file, and selectively overriding key/value pairs.
      command: >
        az deployment create --location WestUS --template-file azuredeploy.json  \
            --parameters @params.json --parameters https://mysite/params.json --parameters MyValue=This MyArray=@array.json
- command:
    name: deployment export
    summary: Export the template used for a deployment.
- command:
    name: deployment validate
    summary: Validate whether a template is syntactically correct.
    arguments:
    - name: --parameters
      summary: Supply deployment parameter values.
      description: >
        Parameters may be supplied from a file using the `@{path}` syntax, a JSON string, or as <KEY=VALUE> pairs. Parameters are evaluated in order, so when a value is assigned twice, the latter value will be used.
        It is recommended that you supply your parameters file first, and then override selectively using KEY=VALUE syntax.
- command:
    name: deployment wait
    summary: Place the CLI in a waiting state until a deployment condition is met.
- group:
    name: deployment operation
    summary: Manage deployment operations.
- group:
    name: group lock
    summary: Manage Azure resource group locks.
- command:
    name: group lock create
    summary: Create a resource group lock.
    examples:
    - summary: Create a read-only resource group level lock.
      command: >
        az group lock create --lock-type ReadOnly -n lockName -g MyResourceGroup
- command:
    name: group lock delete
    summary: Delete a resource group lock.
    examples:
    - summary: Delete a resource group lock
      command: >
        az group lock delete --name lockName -g MyResourceGroup
- command:
    name: group lock list
    summary: List lock information in the resource-group.
    examples:
    - summary: List out all locks on the resource group level
      command: >
        az group lock list -g MyResourceGroup
- command:
    name: group lock show
    summary: Show the details of a resource group lock
    examples:
    - summary: Show a resource group level lock
      command: >
        az group lock show -n lockname -g MyResourceGroup
- command:
    name: group lock update
    summary: Update a resource group lock.
    examples:
    - summary: Update a resource group lock with new notes and type
      command: >
        az group lock update --name lockName -g MyResourceGroup --notes newNotesHere --lock-type CanNotDelete
- group:
    name: provider
    summary: Manage resource providers.
- command:
    name: provider list
    examples:
    - summary: Display all resource types for the network resource provider.
      command: >
        az provider list --query [?namespace=='Microsoft.Network'].resourceTypes[].resourceType
- command:
    name: provider register
    summary: Register a provider.
- command:
    name: provider unregister
    summary: Unregister a provider.
- group:
    name: provider operation
    summary: Get provider operations metadatas.
- command:
    name: provider operation show
    summary: Get an individual provider's operations.
- command:
    name: provider operation list
    summary: Get operations from all providers.
- group:
    name: tag
    summary: Manage resource tags.
- group:
    name: resource link
    summary: Manage links between resources.
    description: >
      Linking is a feature of the Resource Manager. It enables declaring relationships between resources even if they do not reside in the same resource group.
      Linking has no impact on resource usage, no impact on billing, and no impact on role-based access. It allows for managing multiple resources across groups
      as a single unit.
- command:
    name: resource link create
    summary: Create a new link between resources.
    description: A link-id is of the form /subscriptions/{SubID}/resourceGroups/{ResourceGroupID}/providers/{ProviderNamespace}/{ResourceType}/{ResourceName}/providers/Microsoft.Resources/links/{LinkName}
    examples:
    - summary: Create a link from {SourceID} to {ResourceID} with notes
      command: >
        az resource link create --link-id {SourceID} --target-id {ResourceID} --notes "SourceID depends on ResourceID"
- command:
    name: resource link update
    summary: Update link between resources.
    description: A link-id is of the form /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/{ProviderNamespace}/{ResourceType}/{ResourceName}/providers/Microsoft.Resources/links/{LinkName}
    examples:
    - summary: Update the notes for {LinkID} notes "some notes to explain this link"
      command: >
        az resource link update --link-id {LinkID} --notes "some notes to explain this link"
- command:
    name: resource link delete
    summary: Delete a link between resources.
    description: A link-id is of the form /subscriptions/{SubID}/resourceGroups/{ResourceGroupID}/providers/{ProviderNamespace}/{ResourceType}/{ResourceName}/providers/Microsoft.Resources/links/{LinkName}
    examples:
    - summary: Delete link {LinkID}
      command: >
        az resource link delete --link-id {LinkID}
- command:
    name: resource link list
    summary: List resource links.
    examples:
    - summary: List links, filtering with <filter-string>
      command: >
        az resource link list --filter <filter-string>
    - summary: List all links for resource group {ResourceGroup} in subscription {SubID}
      command: >
        az resource link list --scope /subscriptions/{SubID}/resourceGroups/{ResourceGroup}
- command:
    name: resource link show
    summary: Get details for a resource link.
    description: A link-id is of the form /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/{ProviderNamespace}/{ResourceType}/{ResourceName}/providers/Microsoft.Resources/links/{LinkName}
- group:
    name: resource lock
    summary: Manage Azure resource level locks.
- command:
    name: resource lock create
    summary: Create a resource-level lock.
    examples:
    - summary: Create a read-only resource level lock on a vnet.
      command: >
        az resource lock create --lock-type ReadOnly -n lockName -g MyResourceGroup --resource myvnet --resource-type Microsoft.Network/virtualNetworks
    - summary: Create a read-only resource level lock on a vnet using a vnet id.
      command: >
        az resource lock create --lock-type ReadOnly -n lockName --resource /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/Microsoft.Network/virtualNetworks/{VNETName}
- command:
    name: resource lock delete
    summary: Delete a resource-level lock.
    examples:
    - summary: Delete a resource level lock
      command: >
        az resource lock delete --name lockName -g MyResourceGroup --resource myvnet --resource-type Microsoft.Network/virtualNetworks
    - summary: Delete a resource level lock on a vnet using a vnet id.
      command: >
        az resource lock delete -n lockName --resource /subscriptions/{SubID}/resourceGroups/{ResourceGroup}/providers/Microsoft.Network/virtualNetworks/{VMName}
- command:
    name: resource lock list
    summary: List lock information in the resource-level.
    examples:
    - summary: List out all locks on a vnet
      command: >
        az resource lock list -g MyResourceGroup --resource myvnet --resource-type Microsoft.Network/virtualNetworks
- command:
    name: resource lock show
    summary: Show the details of a resource-level lock
    examples:
    - summary: Show a resource level lock
      command: >
        az resource lock show -n lockname -g MyResourceGroup --resource myvnet --resource-type Microsoft.Network/virtualNetworks
- command:
    name: resource lock update
    summary: Update a resource-level lock.
    examples:
    - summary: Update a resource level lock with new notes and type
      command: >
        az resource lock update --name lockName -g MyResourceGroup --resource myvnet --resource-type Microsoft.Network/virtualNetworks --notes newNotesHere --lock-type CanNotDelete
