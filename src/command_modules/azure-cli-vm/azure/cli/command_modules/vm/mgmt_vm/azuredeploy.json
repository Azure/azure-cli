{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Container URI of the template."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine.  Required if SSH (Linux only) is not specified."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "ssh"
      ],
      "metadata": {
        "description": "Password or SSH Public Key authentication."
      }
    },
    "availabilitySet": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name or ID of existing availability set for the VM."
      }
    },
    "availabilitySetType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "none",
        "existingName",
        "existingId"
      ],
      "metadata": {
        "description": "Flag to add the VM to an existing availability set."
      }
    },
    "customOsDiskType": {
      "type": "string",
      "defaultValue": "windows",
      "allowedValues": [
        "windows",
        "linux"
      ],
      "metadata": {
        "description": "Custom image OS type."
      }
    },
    "customOsDiskUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URI to a custom disk image."
      }
    },
    "dnsNameForPublicIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Globally unique DNS Name for the Public IP used to access the Virtual Machine.  Requires a new public IP to be created by setting Public IP Address Type to New."
      }
    },
    "dnsNameType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "none",
        "new"
      ],
      "metadata": {
        "description": "Associate VMs with a public IP address to a DNS name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for VM resources."
      }
    },
    "name": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The VM name."
      }
    },
    "networkSecurityGroup": {
      "type": "string",
      "defaultValue": "[concat(parameters('name'), 'NSG')]",
      "metadata": {
        "description": "Name or ID of the network security group."
      }
    },
    "networkSecurityGroupRule": {
      "type": "string",
      "defaultValue": "RDP",
      "allowedValues": [
        "RDP",
        "SSH"
      ],
      "metadata": {
        "description": "The type of rule to add to a new network security group."
      }
    },
    "networkSecurityGroupType": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existingName",
        "existingId",
        "none"
      ],
      "metadata": {
        "description": "Whether to use a network security group or not."
      }
    },
    "networkInterfaceIds": {
      "type": "array",
      "defaultValue": [
        { "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('name'), 'VMNic'))]" }
      ],
      "metadata": {
        "description": "One or more existing network intreface Ids to attach to the VM."
      }
    },
    "networkInterfaceType": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Whether to create a new network interface or use existing ones."
      }
    },
    "osDiskName": {
      "type": "string",
      "defaultValue": "[concat(parameters('name'), 'osdiskimage')]",
      "metadata": {
        "description": "Name of new VM OS disk."
      }
    },
    "osDiskType": {
      "type": "string",
      "defaultValue": "provided",
      "allowedValues": [
        "provided",
        "custom"
      ],
      "metadata": {
        "description": "Use a custom image URI from the OS Disk URI parameter or use a provider's image."
      }
    },
    "osDiskUri": {
      "type": "string",
      "defaultValue": "[concat('https://', split(parameters('storageAccount'), '/')[sub(length(split(parameters('storageAccount'), '/')), 1)], '.blob.core.windows.net/', parameters('storageContainerName'), '/', parameters('osDiskName'), '.vhd')]",
      "metadata": {
        "description": "URI for a custom VHD image."
      }
    },
    "osOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "The OS Offer to install."
      }
    },
    "osPublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "The OS publisher of the OS image."
      }
    },
    "osSKU": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "metadata": {
        "description": "The OS SKU to install."
      }
    },
    "osType": {
      "type": "string",
      "defaultValue": "Win2012R2Datacenter",
      "allowedValues": [
        "Win2012R2Datacenter",
        "Win2012Datacenter",
        "Win2008R2SP1",
        "Custom"
      ],
      "metadata": {
        "description": "Common OS choices.  Choose 'Custom' to specify an image with the osPublisher, osOffer, osSKU, and osVersion parameters."
      }
    },
    "osVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The OS version to install."
      }
    },
    "privateIpAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The private IP address to use with Private IP Address Allocation type Static."
      }
    },
    "privateIpAddressAllocation": {
      "type": "string",
      "defaultValue": "dynamic",
      "allowedValues": [
        "dynamic",
        "static"
      ],
      "metadata": {
        "description": "Private IP address allocation method."
      }
    },
    "publicIpAddressAllocation": {
      "type": "string",
      "defaultValue": "dynamic",
      "allowedValues": [
        "dynamic",
        "static"
      ],
      "metadata": {
        "description": "Public IP address allocation method."
      }
    },
    "publicIpAddress": {
      "type": "string",
      "defaultValue": "[concat(parameters('name'), 'PublicIP')]",
      "metadata": {
        "description": "Name or ID of public IP address to use."
      }
    },
    "publicIpAddressType": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "none",
        "new",
        "existingName",
        "existingId"
      ],
      "metadata": {
        "description": "Use a public IP Address for the VM Nic."
      }
    },
    "size": {
      "type": "string",
      "defaultValue": "Standard_DS1",
      "metadata": {
        "description": "The VM Size that should be created.  See https://azure.microsoft.com/en-us/pricing/details/virtual-machines/ for size info."
      }
    },
    "sshDestKeyPath": {
      "type": "string",
      "defaultValue": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
      "metadata": {
        "description": "Destination file path on VM for SSH key."
      }
    },
    "sshKeyValue": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH key file data."
      }
    },
    "storageAccount": {
      "type": "string",
      "defaultValue": "[concat('vhdstorage', uniqueString(parameters('name')))]",
      "metadata": {
        "description": "Name or ID of storage account for the VM OS disk."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existingName",
        "existingId"
      ],
      "metadata": {
        "description": "Whether to use an existing storage account or create a new one."
      }
    },
    "storageCaching": {
      "type": "string",
      "defaultValue": "ReadWrite",
      "allowedValues": [
        "ReadOnly",
        "ReadWrite"
      ],
      "metadata": {
        "description": "Storage caching type for the VM OS disk."
      }
    },
    "storageContainerName": {
      "type": "string",
      "defaultValue": "vhds",
      "metadata": {
        "description": "Name of storage container for the VM OS disk."
      }
    },
    "storageType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "metadata": {
        "description": "The VM storage type (Standard_LRS, Standard_GRS, Standard_RAGRS, ...)."
      }
    },
    "subnetIpAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The subnet address prefix in CIDR format."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "[concat(parameters('name'), 'Subnet')]",
      "metadata": {
        "description": "The subnet name."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": { },
      "metadata": {
        "description": "Tags object."
      }
    },
    "virtualNetworkIpAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "The virtual network IP address prefix in CIDR format."
      }
    },
    "virtualNetwork": {
      "type": "string",
      "defaultValue": "[concat(parameters('name'), 'VNET')]",
      "metadata": {
        "description": "Name or ID of virtual network to add VM to."
      }
    },
    "virtualNetworkType": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existingName",
        "existingId"
      ],
      "metadata": {
        "description": "Whether to use an existing VNet or create a new one."
      }
    }
  },
  "variables": {
    "imagePublishers": {
      "Win2012R2Datacenter": "MicrosoftWindowsServer",
      "Win2012Datacenter": "MicrosoftWindowsServer",
      "Win2008R2SP1": "MicrosoftWindowsServer",
      "Custom": "[parameters('osPublisher')]"
    },
    "imageOffers": {
      "Win2012R2Datacenter": "WindowsServer",
      "Win2012Datacenter": "WindowsServer",
      "Win2008R2SP1": "WindowsServer",
      "Custom": "[parameters('osOffer')]"
    },
    "imageSkus": {
      "Win2012R2Datacenter": "2012-R2-Datacenter",
      "Win2012Datacenter": "2012-Datacenter",
      "Win2008R2SP1": "2008-R2-SP1",
      "Custom": "[parameters('osSKU')]"
    },
    "imageVersions": {
      "Win2012R2Datacenter": "latest",
      "Win2012Datacenter": "latest",
      "Win2008R2SP1": "latest",
      "Custom": "[parameters('osVersion')]"
    },
    "authTypePath": {
      "ssh": "sshkey",
      "password": "password"
    },
    "vnetDeploymentName": "[concat(variables('vmName'), 'VNet')]",
    "vnetAddressPrefix": "[parameters('virtualNetworkIpAddressPrefix')]",
    "subnetName": "[parameters('subnetName')]",
    "subnetAddressPrefix": "[parameters('subnetIpAddressPrefix')]",
    "vhdStorageType": "[parameters('storageType')]",
    "nicName": "[concat(parameters('name'), 'VMNic')]",
    "pubIpIds": {
      "new": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/publicIPAddresses/', parameters('publicIpAddress'))]",
      "existingName": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/publicIPAddresses/', parameters('publicIpAddress'))]",
      "existingId": "[parameters('publicIpAddress')]",
      "none": "no public ip"
    },
    "publicIpAddressAllocation": "[parameters('publicIpAddressAllocation')]",
    "vhdStorageContainerName": "vhds",
    "vmName": "[parameters('name')]",
    "vmSize": "[parameters('size')]",
    "vmDeploymentName": "[concat(variables('vmName'), 'VM')]",
    "nicDeploymentName": "[concat(variables('vmName'), 'NicIp')]",
    "nsgDeploymentName": "[concat(variables('vmName'), 'NSG')]",
    "vnetName": "[parameters('virtualNetwork')]",
    "vnetIds": {
      "new": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', parameters('virtualNetwork'))]",
      "existingName": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', parameters('virtualNetwork'))]",
      "existingId": "[parameters('virtualNetwork')]"
    },
    "subnetRef": "[concat(variables('vnetIds')[parameters('virtualNetworkType')], '/subnets/', variables('subnetName'))]",
    "storageAccountTemplateFilePaths": {
      "new": "nested_templates/NewStorageAccount.json",
      "existingName": "nested_templates/ExistingStorageAccount.json",
      "existingId": "nested_templates/ExistingStorageAccount.json"
    },
    "storageDeploymentName": "[concat(variables('vmName'), uniqueString(parameters('storageAccount')))]",
    "ipOutputDeploymentName": "[concat(variables('vmName'), uniqueString(parameters('publicIpAddress')), parameters('publicIpAddressType'))]",
    "fqdnOutputDeploymentName": "[concat(variables('vmName'), uniqueString(parameters('publicIpAddress')), parameters('publicIpAddressType'), 'fqdn')]",
    "macOutputDeploymentName": "[concat(variables('vmName'), variables('nicName'), 'mac')]",
    "availSetIds": {
      "new": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Compute/availabilitySets/', parameters('availabilitySet'))]",
      "existingName": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Compute/availabilitySets/', parameters('availabilitySet'))]",
      "existingId": "[parameters('availabilitySet')]",
      "none": "no availability set"
    },
    "nsgIds": {
      "new": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroup'))]",
      "existingName": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroup'))]",
      "existingId": "[parameters('networkSecurityGroup')]",
      "none": "no network security group"
    },
    "simplifiedTypeNames": {
      "new": "new",
      "existingName": "existing",
      "existingId": "existing",
      "none": "none"
    },
    "vnetTemplateUri": "https://azuresdkci.blob.core.windows.net/templatehost/CreateVnet_2016-07-18/azuredeploy.json",
    "vnetTemplateUriEmpty": "https://azuresdkci.blob.core.windows.net/templatehost/CreateVnet_2016-07-18/azuredeploy_empty.json",
    "vnetTemplateFilePaths": {
      "existing": "[variables('vnetTemplateUriEmpty')]",
      "new": "[variables('vnetTemplateUri')]"
    },
    "nicTemplateFilePaths": {
      "new": "[variables('newNicTemplateFilePaths')]",
      "existing": {
        "none": "/nested_templates/nic_existing.json",
        "new": "/nested_templates/nic_existing.json",
        "existing": "/nested_templates/nic_existing.json"
      }
    },
    "newNicTemplateFilePaths": {
      "none": "[concat('/nested_templates/nic_ip_none_dns_', parameters('dnsNameType'), '.json')]",
      "new": "[concat('/nested_templates/nic_ip_new_dns_', parameters('dnsNameType'), '.json')]",
      "existing": "[concat('/nested_templates/nic_ip_existing_dns_', parameters('dnsNameType'), '.json')]"
    },
    "nsgTemplateFilePaths": {
      "new": "[concat('nested_templates/nsg_new', '.json')]",
      "none": "[concat('nested_templates/nsg_existing_or_none', '.json')]",
      "existing": "[concat('nested_templates/nsg_existing_or_none', '.json')]"
    },
    "ipOutputTemplateFilePaths": {
      "new": "[concat('nested_templates/output_ip_new', '.json')]",
      "existing": "[concat('nested_templates/output_ip_existing', '.json')]",
      "none": "[concat('nested_templates/output_ip_none', '.json')]"
    },
    "fqdnOutputTemplateFilePaths": {
      "new": "[concat('nested_templates/output_fqdn_new', '.json')]",
      "none": "[concat('nested_templates/output_fqdn_none', '.json')]"
    },
    "macOutputTemplateFilePaths": {
      "new": "[concat('nested_templates/output_mac_new', '.json')]",
      "existing": "[concat('nested_templates/output_mac_none', '.json')]"
    }
  },
  "resources": [
    {
      "name": "[variables('storageDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('storageAccountTemplateFilePaths')[parameters('storageAccountType')])]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": { "value": "[parameters('storageAccount')]" },
          "location": { "value": "[parameters('location')]" },
          "vhdStorageType": { "value": "[variables('vhdStorageType')]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    },
    {
      "name": "[variables('nsgDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('nsgTemplateFilePaths')[variables('simplifiedTypeNames')[parameters('networkSecurityGroupType')]])]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "networkSecurityGroupRule": { "value": "[parameters('networkSecurityGroupRule')]" },
          "networkSecurityGroup": { "value": "[parameters('networkSecurityGroup')]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    },
    {
      "name": "[variables('nicDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('vnetDeploymentName'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nsgDeploymentName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), variables('nicTemplateFilePaths')[parameters('networkInterfaceType')][variables('simplifiedTypeNames')[parameters('publicIpAddressType')]])]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": { "value": "[parameters('location')]" },
          "dnsNameForPublicIP": { "value": "[parameters('dnsNameForPublicIP')]" },
          "virtualMachineName": { "value": "[parameters('name')]" },
          "publicIpAddress": { "value": "[parameters('publicIpAddress')]" },
          "publicIpAddressAllocation": { "value": "[variables('publicIpAddressAllocation')]" },
          "nicName": { "value": "[variables('nicName')]" },
          "subnetRef": { "value": "[variables('subnetRef')]" },
          "privateIPAddress": { "value": "[parameters('privateIpAddress')]" },
          "privateIpAllocation": { "value": "[parameters('privateIpAddressAllocation')]" },
          "networkSecurityGroupId": { "value": "[variables('nsgIds')[parameters('networkSecurityGroupType')]]" },
          "networkSecurityGroupType": { "value": "[variables('simplifiedTypeNames')[parameters('networkSecurityGroupType')]]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    },
    {
      "name": "[variables('vnetDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vnetTemplateFilePaths')[variables('simplifiedTypeNames')[parameters('virtualNetworkType')]]]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": { "value": "[variables('vnetName')]" },
          "virtualNetworkPrefix": { "value": "[variables('vnetAddressPrefix')]" },
          "subnetPrefix": { "value": "[variables('subnetAddressPrefix')]" },
          "subnetName": { "value": "[variables('subnetName')]" },
          "location": { "value": "[parameters('location')]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    },
    {
      "name": "[variables('vmDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('storageDeploymentName'))]",
        "[concat('Microsoft.Resources/deployments/', variables('nicDeploymentName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nested_templates/vm_', variables('simplifiedTypeNames')[parameters('availabilitySetType')], '_', variables('authTypePath')[parameters('authenticationType')], '.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "dnsNameForPublicIP": { "value": "[parameters('dnsNameForPublicIP')]" },
          "virtualMachineName": { "value": "[variables('vmName')]" },
          "osPublisher": { "value": "[variables('imagePublishers')[parameters('osType')]]" },
          "osOffer": { "value": "[variables('imageOffers')[parameters('osType')]]" },
          "osSKU": { "value": "[variables('imageSkus')[parameters('osType')]]" },
          "osVersion": { "value": "[variables('imageVersions')[parameters('osType')]]" },
          "size": { "value": "[variables('vmSize')]" },
          "storageType": { "value": "[variables('vhdStorageType')]" },
          "storageAccountName": { "value": "[parameters('storageAccount')]" },
          "storageContainerName": { "value": "[parameters('storageContainerName')]" },
          "osDiskName": { "value": "[parameters('osDiskName')]" },
          "osDiskUri": { "value": "[parameters('osDiskUri')]" },
          "sshKeyValue": { "value": "[parameters('sshKeyValue')]" },
          "sshKeyPath": { "value": "[parameters('sshDestKeyPath')]" },
          "availabilitySetId": { "value": "[variables('availSetIds')[parameters('availabilitySetType')]]" },
          "location": { "value": "[parameters('location')]" },
          "nics": { "value": "[parameters('networkInterfaceIds')]" },
          "storageCaching": { "value": "[parameters('storageCaching')]" },
          "customOsDiskType": { "value": "[parameters('customOsDiskType')]" },
          "customOsDiskUri": { "value": "[parameters('customOsDiskUri')]" },
          "osDiskType": { "value": "[parameters('osDiskType')]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    },
    {
      "name": "[variables('ipOutputDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('vmDeploymentName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('ipOutputTemplateFilePaths')[variables('simplifiedTypeNames')[parameters('publicIpAddressType')]])]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpAddress": { "value": "[parameters('publicIpAddress')]" }
        }
      }
    },
    {
      "name": "[variables('fqdnOutputDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('vmDeploymentName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('fqdnOutputTemplateFilePaths')[parameters('dnsNameType')])]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpAddressName": { "value": "[parameters('publicIpAddress')]" }
        }
      }
    },
    {
      "name": "[variables('macOutputDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('vmDeploymentName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('macOutputTemplateFilePaths')[parameters('networkInterfaceType')])]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": { "value": "[variables('nicName')]" }
        }
      }
    }
  ],
  "outputs": {
    "id": {
      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
      "type": "string"
    },
    "publicIpAddress": {
      "value": "[reference(variables('ipOutputDeploymentName')).outputs.ipAddress.value]",
      "type": "string"
    },
    "fqdn": {
      "value": "[reference(variables('fqdnOutputDeploymentName')).outputs.fqdn.value]",
      "type": "string"
    },
    "privateIpAddress": {
      "value": "[reference(variables('nicDeploymentName')).outputs.privateIp.value]",
      "type": "string"
    },
    "macAddress": {
      "value": "[reference(variables('macOutputDeploymentName')).outputs.macAddress.value]",
      "type": "string"
    }
  }
}
