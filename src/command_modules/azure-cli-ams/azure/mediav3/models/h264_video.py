# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .video import Video


class H264Video(Video):
    """An object to represent H264 video encoding.

    :param label: Gets or sets the codec label.
    :type label: str
    :param odatatype: Constant filled by server.
    :type odatatype: str
    :param preserve_resolution_after_rotation: Gets or sets a value indicating
     whether to disable resolution change rotation.
    :type preserve_resolution_after_rotation: bool
    :param key_frame_interval: Gets or sets the distance between two key
     frames.
    :type key_frame_interval: timedelta
    :param stretch_mode: Gets or sets the Resolution Mode. Possible values
     include: 'None', 'AutoSize', 'AutoFit'
    :type stretch_mode: str or ~accounts.models.StretchMode
    :param sync_mode: Gets or sets the Video Sync Mode. Possible values
     include: 'Auto', 'Passthrough', 'Cfr', 'Vfr', 'Drop'
    :type sync_mode: str or ~accounts.models.VideoSyncMode
    :param scene_change_detection: Gets or sets a value indicating whether to
     use scene change detection during encoding
    :type scene_change_detection: bool
    :param rate_control_mode: Gets or sets the video rate control mode.
     Possible values include: 'ABR', 'CBR'
    :type rate_control_mode: str or ~accounts.models.H264RateControlMode
    :param complexity: Gets or sets the encoder complexity mode used for all
     layers. Possible values include: 'Speed', 'Balanced', 'Quality'
    :type complexity: str or ~accounts.models.H264Complexity
    :param layers: Gets the layers for the video.
    :type layers: list[~accounts.models.H264Layer]
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
        'preserve_resolution_after_rotation': {'key': 'preserveResolutionAfterRotation', 'type': 'bool'},
        'key_frame_interval': {'key': 'keyFrameInterval', 'type': 'duration'},
        'stretch_mode': {'key': 'stretchMode', 'type': 'StretchMode'},
        'sync_mode': {'key': 'syncMode', 'type': 'VideoSyncMode'},
        'scene_change_detection': {'key': 'sceneChangeDetection', 'type': 'bool'},
        'rate_control_mode': {'key': 'rateControlMode', 'type': 'H264RateControlMode'},
        'complexity': {'key': 'complexity', 'type': 'H264Complexity'},
        'layers': {'key': 'layers', 'type': '[H264Layer]'},
    }

    def __init__(self, label=None, preserve_resolution_after_rotation=None, key_frame_interval=None, stretch_mode=None, sync_mode=None, scene_change_detection=None, rate_control_mode=None, complexity=None, layers=None):
        super(H264Video, self).__init__(label=label, preserve_resolution_after_rotation=preserve_resolution_after_rotation, key_frame_interval=key_frame_interval, stretch_mode=stretch_mode, sync_mode=sync_mode)
        self.scene_change_detection = scene_change_detection
        self.rate_control_mode = rate_control_mode
        self.complexity = complexity
        self.layers = layers
        self.odatatype = '#Microsoft.Media.H264Video'
