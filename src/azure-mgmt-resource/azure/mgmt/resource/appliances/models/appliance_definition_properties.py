# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ApplianceDefinitionProperties(Model):
    """The appliance definition properties.

    :param lock_level: The appliance lock level. Possible values include:
     'CanNotDelete', 'ReadOnly', 'None'
    :type lock_level: str or :class:`ApplianceLockLevel
     <azure.mgmt.resource.appliances.models.ApplianceLockLevel>`
    :param display_name: The appliance definition display name.
    :type display_name: str
    :param authorizations: The appliance provider authorizations.
    :type authorizations: list of :class:`ApplianceProviderAuthorization
     <azure.mgmt.resource.appliances.models.ApplianceProviderAuthorization>`
    :param artifacts: The collection of appliance artifacts. The portal will
     use the files specified as artifacts to construct the user experience of
     creating an appliance from an appliance definition.
    :type artifacts: list of :class:`ApplianceArtifact
     <azure.mgmt.resource.appliances.models.ApplianceArtifact>`
    :param description: The appliance definition description.
    :type description: str
    :param package_file_uri: The appliance definition package file Uri.
    :type package_file_uri: str
    """

    _validation = {
        'lock_level': {'required': True},
        'authorizations': {'required': True},
        'package_file_uri': {'required': True},
    }

    _attribute_map = {
        'lock_level': {'key': 'lockLevel', 'type': 'ApplianceLockLevel'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'authorizations': {'key': 'authorizations', 'type': '[ApplianceProviderAuthorization]'},
        'artifacts': {'key': 'artifacts', 'type': '[ApplianceArtifact]'},
        'description': {'key': 'description', 'type': 'str'},
        'package_file_uri': {'key': 'packageFileUri', 'type': 'str'},
    }

    def __init__(self, lock_level, authorizations, package_file_uri, display_name=None, artifacts=None, description=None):
        self.lock_level = lock_level
        self.display_name = display_name
        self.authorizations = authorizations
        self.artifacts = artifacts
        self.description = description
        self.package_file_uri = package_file_uri
