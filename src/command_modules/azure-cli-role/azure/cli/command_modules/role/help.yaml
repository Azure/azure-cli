version: 1
content:
- command:
    name: ad sp create-for-rbac
    summary: Create a service principal and configure its access to Azure resources.
    arguments:
    - name: --name
      summary: a URI to use as the logic name. It doesn't need to exist. If not present, CLI will generate one.
    - name: --cert
      summary: Certificate to use for credentials.
      description: When used with `--keyvault,` indicates the name of the cert to use or create. Otherwise, supply a PEM or DER formatted public certificate string. Use `@{path}` to load from a file. Do not include private key info.
    - name: --create-cert
      summary: Create a self-signed certificate to use for the credential.
      description: Use with `--keyvault` to create the certificate in Key Vault. Otherwise, a certificate will be created locally.
    - name: --keyvault
      summary: Name or ID of a KeyVault to use for creating or retrieving certificates.
    - name: --years
      summary: 'Number of years for which the credentials will be valid. Default: 1 year'
    - name: --scopes
      summary: >
        Space-separated list of scopes the service principal's role assignment applies to.
        Defaults to the root of the current subscription.
    - name: --role
      summary: Role of the service principal.
    examples:
    - summary: Create with a default role assignment.
      command: >
        az ad sp create-for-rbac
    - summary: Create using a custom name, and with a default assignment.
      command: >
        az ad sp create-for-rbac -n "MyApp"
    - summary: Create without a default assignment.
      command: >
        az ad sp create-for-rbac --skip-assignment
    - summary: Create with customized contributor assignments.
      command: |
        az ad sp create-for-rbac -n "MyApp" --role contributor \
            --scopes /subscriptions/{SubID}/resourceGroups/{ResourceGroup1} \
            /subscriptions/{SubID}/resourceGroups/{ResourceGroup2}
    - summary: Create using a self-signed certificte.
      command: az ad sp create-for-rbac --create-cert
    - summary: Create using a self-signed certificate, and store it within KeyVault.
      command: az ad sp create-for-rbac --keyvault MyVault --cert CertName --create-cert
    - summary: Create using existing certificate in KeyVault.
      command: az ad sp create-for-rbac --keyvault MyVault --cert CertName
- group:
    name: ad sp credential
    summary: manage a service principal's credentials.
    description: the credential update will be applied on the Application object the service principal is associated with. In other words, you can accomplish the same thing using "az ad app credential"
- command:
    name: ad sp credential list
    summary: list a service principal's credentials.
- command:
    name: ad sp credential delete
    summary: delete a service principal's credential.
- command:
    name: ad sp credential reset
    summary: Reset a service principal credential.
    description: Use upon expiration of the service principal's credentials, or in the event that login credentials are lost.
    arguments:
    - name: --name
      summary: Name or app URI for the credential.
    - name: --password
      summary: The password used to log in.
      description: If not present and `--cert` is not specified, a random password will be generated.
    - name: --cert
      summary: Certificate to use for credentials.
      description: When using `--keyvault,` indicates the name of the cert to use or create. Otherwise, supply a PEM or DER formatted public certificate string. Use `@{path}` to load from a file. Do not include private key info.
    - name: --create-cert
      summary: Create a self-signed certificate to use for the credential.
      description: Use with `--keyvault` to create the certificate in Key Vault. Otherwise, a certificate will be created locally.
    - name: --keyvault
      summary: Name or ID of a KeyVault to use for creating or retrieving certificates.
    - name: --years
      summary: 'Number of years for which the credentials will be valid. Default: 1 year'
- command:
    name: ad sp delete
    summary: Delete a service principal and its role assignments.
- command:
    name: ad sp create
    summary: Create a service principal.
- command:
    name: ad sp list
    summary: List service principals.
    description: For low latency, by default, only the first 100 will be returned unless you provide filter arguments or use "--all"
- group:
    name: ad sp owner
    summary: Manage service principal owners.
- command:
    name: ad sp owner list
    summary: List service principal owners.
- command:
    name: ad sp show
    summary: Get the details of a service principal.
- group:
    name: ad app
    summary: Manage applications with AAD Graph.
- command:
    name: ad app delete
    summary: Delete an application.
- command:
    name: ad app list
    summary: List applications.
    description: for low latency, by default, only the first 100 will be returned unless you provide filter arguments or use "--all"
- command:
    name: ad app show
    summary: Get the details of an application.
- command:
    name: ad app update
    summary: Update an application.
    examples:
    - summary: update a native application with delegated permission of "access the AAD directory as the signed-in user"
      command: |
        az ad app update --id e042ec79-34cd-498f-9d9f-123456781234 --required-resource-accesses @manifest.json
        ("manifest.json" contains the following content)
        [{
            "resourceAppId": "00000002-0000-0000-c000-000000000000",
            "resourceAccess": [
                {
                    "id": "a42657d6-7f20-40e3-b6f0-cee03008a62a",
                    "type": "Scope"
                }
           ]
        }]
    - summary: update an application's group membership claims to "All"
      command: >
        az ad app update --id e042ec79-34cd-498f-9d9f-123456781234 --set groupMembershipClaims=All
- group:
    name: ad app owner
    summary: Manage application owners.
- command:
    name: ad app owner list
    summary: List application owners.
- command:
    name: ad app owner add
    summary: add an application owner.
- command:
    name: ad app owner remove
    summary: remove an application owner.
- group:
    name: ad app permission
    summary: manage an application's OAuth2 permissions.
- command:
    name: ad app permission grant
    summary: Grant the app an API permission
    examples:
    - summary: Grant a native application with permissions to access an existing API with TTL of 2 years
      command: az ad app permission grant --id e042ec79-34cd-498f-9d9f-1234234 --api a0322f79-57df-498f-9d9f-12678 --expires 2
- command:
    name: ad app permission list
    summary: List API permissions the application has requested
    examples:
    - summary: List the OAuth2 permissions for an existing AAD app
      command: az ad app permission list --id e042ec79-34cd-498f-9d9f-1234234
- command:
    name: ad app permission add
    summary: add an API permission
    description: invoking "az ad app permission grant" is needed to activate it
    examples:
    - summary: add a Graph API permission of "Sign in and read user profile"
      command: az ad app permission add --id eeba0b46-78e5-4a1a-a1aa-cafe6c123456 --api 00000002-0000-0000-c000-000000000000 --api-permissions 311a71cc-e848-46a1-bdf8-97ff7156d8e6=Scope
- command:
    name: ad app permission delete
    summary: remove an API permission
    examples:
    - summary: remove an AAD graph permission
      command: az ad app permission delete --id eeba0b46-78e5-4a1a-a1aa-cafe6c123456 --api 00000002-0000-0000-c000-000000000000
- group:
    name: ad app credential
    summary: manage an application's password or certificate credentials
- command:
    name: ad app credential reset
    summary: append or overwrite an application's password or certificate credentials
- command:
    name: ad app credential list
    summary: list an application's password or certificate credentials
- command:
    name: ad app credential delete
    summary: delete an application's password or certificate credentials
- command:
    name: ad user list
    summary: List Azure Active Directory users.
- command:
    name: ad user get-member-groups
    summary: Get groups of which the user is a member
- group:
    name: role
    summary: Manage user roles for access control with Azure Active Directory and service principals.
- group:
    name: role assignment
    summary: Manage role assignments.
- command:
    name: role assignment create
    summary: Create a new role assignment for a user, group, or service principal.
    examples:
    - summary: Create role assignment for an assignee.
      command: az role assignment create --assignee sp_name --role a_role
- command:
    name: role assignment delete
    summary: Delete role assignments.
- command:
    name: role assignment list
    summary: List role assignments.
    description: By default, only assignments scoped to subscription will be displayed. To view assignments scoped by resource or group, use `--all`.
- command:
    name: role assignment list-changelogs
    summary: List changelogs for role assignments.
- group:
    name: role definition
    summary: Manage role definitions.
- command:
    name: role definition create
    summary: Create a custom role definition.
    arguments:
    - name: --role-definition
      summary: Description of a role as JSON, or a path to a file containing a JSON description.
    examples:
    - summary: Create a role with read-only access to storage and network resources, and the ability to start or restart VMs.
      command: |
        az role definition create --role-definition '{ \
            "Name": "Contoso On-call", \
            "Description": "Perform VM actions and read storage and network information." \
            "Actions": [ \
                "Microsoft.Compute/*/read", \
                "Microsoft.Compute/virtualMachines/start/action", \
                "Microsoft.Compute/virtualMachines/restart/action", \
                "Microsoft.Network/*/read", \
                "Microsoft.Storage/*/read", \
                "Microsoft.Authorization/*/read", \
                "Microsoft.Resources/subscriptions/resourceGroups/read", \
                "Microsoft.Resources/subscriptions/resourceGroups/resources/read", \
                "Microsoft.Insights/alertRules/*", \
                "Microsoft.Support/*" \
            ], \
            "DataActions": [ \
                "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/*" \
            ], \
            "NotDataActions": [ \
                "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write" \
            ], \
            "AssignableScopes": ["/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"] \
        }'
    - summary: Create a role from a file containing a JSON description.
      command: >
        az role definition create --role-definition @ad-role.json
- command:
    name: role definition delete
    summary: Delete a role definition.
- command:
    name: role definition list
    summary: List role definitions.
- command:
    name: role definition update
    summary: Update a role definition.
    arguments:
    - name: --role-definition
      summary: Description of a role as JSON, or a path to a file containing a JSON description.
- group:
    name: ad
    summary: Manage Azure Active Directory Graph entities needed for Role Based Access Control
- command:
    name: ad app create
    summary: Create a web application, web API or native application
    examples:
    - summary: Create a native application with delegated permission of "access the AAD directory as the signed-in user"
      command: |
        az ad app create --display-name my-native --native-app --required-resource-accesses @manifest.json
        ("manifest.json" contains the following content)
        [{
            "resourceAppId": "00000002-0000-0000-c000-000000000000",
            "resourceAccess": [
                {
                    "id": "a42657d6-7f20-40e3-b6f0-cee03008a62a",
                    "type": "Scope"
                }
           ]
        }]
- group:
    name: ad group
    summary: Manage Azure Active Directory groups.
- command:
    name: ad group create
    summary: Create a group in the directory.
- group:
    name: ad group member
    summary: Manage Azure Active Directory group members.
- command:
    name: ad group member check
    summary: Check if a member is in a group.
- group:
    name: ad group owner
    summary: Manage Azure Active Directory group owners.
- command:
    name: ad group owner list
    summary: List group owners.
- command:
    name: ad group owner add
    summary: add a group owner.
- command:
    name: ad group owner remove
    summary: remove a group owner.
- group:
    name: ad sp
    summary: Manage Azure Active Directory service principals for automation authentication.
- group:
    name: ad user
    summary: Manage Azure Active Directory users and user authentication.
- group:
    name: ad signed-in-user
    summary: Show graph information about current signed-in user in CLI
- command:
    name: ad signed-in-user list-owned-objects
    summary: Get the list of directory objects that are owned by the user
