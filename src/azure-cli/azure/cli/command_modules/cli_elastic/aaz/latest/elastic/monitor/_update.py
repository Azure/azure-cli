# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "elastic monitor update",
)
class Update(AAZCommand):
    """Update a monitor resource.

    :example: Update monitor
        az elastic monitor update -n monitor -g rg --tags "{tag:test,tag1:test1}"
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.elastic/monitors/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["-n", "--name", "--monitor-name"],
            help="Monitor resource name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Body",
            help="Identity properties of the monitor resource.",
            nullable=True,
        )
        _args_schema.sku = AAZObjectArg(
            options=["--sku"],
            arg_group="Body",
            help="SKU of the monitor resource.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="The tags of the monitor resource.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Managed identity type.",
            nullable=True,
            enum={"SystemAssigned": "SystemAssigned"},
        )

        sku = cls._args_schema.sku
        sku.name = AAZStrArg(
            options=["name"],
            help="Name of the SKU.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.generate_api_key = AAZBoolArg(
            options=["--generate-api-key"],
            arg_group="Properties",
            help="Flag to determine if User API Key has to be generated and shared.",
            nullable=True,
        )
        _args_schema.monitoring_status = AAZStrArg(
            options=["--monitoring-status"],
            arg_group="Properties",
            help="Flag specifying if the resource monitoring is enabled or disabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.plan_details = AAZObjectArg(
            options=["--plan-details"],
            arg_group="Properties",
            help="Plan details of the monitor resource.",
            nullable=True,
        )
        _args_schema.saa_s_azure_subscription_status = AAZStrArg(
            options=["--saa-s-azure-subscription-status"],
            arg_group="Properties",
            help="Status of Azure Subscription where Marketplace SaaS is located.",
            nullable=True,
        )
        _args_schema.source_campaign_id = AAZStrArg(
            options=["--source-campaign-id"],
            arg_group="Properties",
            help="A unique identifier associated with the campaign.",
            nullable=True,
        )
        _args_schema.source_campaign_name = AAZStrArg(
            options=["--source-campaign-name"],
            arg_group="Properties",
            help="Name of the marketing campaign.",
            nullable=True,
        )
        _args_schema.subscription_state = AAZStrArg(
            options=["--subscription-state"],
            arg_group="Properties",
            help="State of the Azure Subscription containing the monitor resource",
            nullable=True,
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="Version of elastic of the monitor resource",
            nullable=True,
        )

        plan_details = cls._args_schema.plan_details
        plan_details.offer_id = AAZStrArg(
            options=["offer-id"],
            help="Offer ID of the plan",
            nullable=True,
        )
        plan_details.plan_id = AAZStrArg(
            options=["plan-id"],
            help="Plan ID",
            nullable=True,
        )
        plan_details.plan_name = AAZStrArg(
            options=["plan-name"],
            help="Plan Name",
            nullable=True,
        )
        plan_details.publisher_id = AAZStrArg(
            options=["publisher-id"],
            help="Publisher ID of the plan",
            nullable=True,
        )
        plan_details.term_id = AAZStrArg(
            options=["term-id"],
            help="Term ID of the plan",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MonitorsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.MonitorsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitorsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_elastic_monitor_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class MonitorsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_elastic_monitor_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("sku", AAZObjectType, ".sku")
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("generateApiKey", AAZBoolType, ".generate_api_key")
                properties.set_prop("monitoringStatus", AAZStrType, ".monitoring_status")
                properties.set_prop("planDetails", AAZObjectType, ".plan_details")
                properties.set_prop("saaSAzureSubscriptionStatus", AAZStrType, ".saa_s_azure_subscription_status")
                properties.set_prop("sourceCampaignId", AAZStrType, ".source_campaign_id")
                properties.set_prop("sourceCampaignName", AAZStrType, ".source_campaign_name")
                properties.set_prop("subscriptionState", AAZStrType, ".subscription_state")
                properties.set_prop("version", AAZStrType, ".version")

            plan_details = _builder.get(".properties.planDetails")
            if plan_details is not None:
                plan_details.set_prop("offerID", AAZStrType, ".offer_id")
                plan_details.set_prop("planID", AAZStrType, ".plan_id")
                plan_details.set_prop("planName", AAZStrType, ".plan_name")
                plan_details.set_prop("publisherID", AAZStrType, ".publisher_id")
                plan_details.set_prop("termID", AAZStrType, ".term_id")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_elastic_monitor_resource_read = None

    @classmethod
    def _build_schema_elastic_monitor_resource_read(cls, _schema):
        if cls._schema_elastic_monitor_resource_read is not None:
            _schema.id = cls._schema_elastic_monitor_resource_read.id
            _schema.identity = cls._schema_elastic_monitor_resource_read.identity
            _schema.location = cls._schema_elastic_monitor_resource_read.location
            _schema.name = cls._schema_elastic_monitor_resource_read.name
            _schema.properties = cls._schema_elastic_monitor_resource_read.properties
            _schema.sku = cls._schema_elastic_monitor_resource_read.sku
            _schema.system_data = cls._schema_elastic_monitor_resource_read.system_data
            _schema.tags = cls._schema_elastic_monitor_resource_read.tags
            _schema.type = cls._schema_elastic_monitor_resource_read.type
            return

        cls._schema_elastic_monitor_resource_read = _schema_elastic_monitor_resource_read = AAZObjectType()

        elastic_monitor_resource_read = _schema_elastic_monitor_resource_read
        elastic_monitor_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        elastic_monitor_resource_read.identity = AAZObjectType()
        elastic_monitor_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        elastic_monitor_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        elastic_monitor_resource_read.properties = AAZObjectType()
        elastic_monitor_resource_read.sku = AAZObjectType()
        elastic_monitor_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        elastic_monitor_resource_read.tags = AAZDictType()
        elastic_monitor_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_elastic_monitor_resource_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType()

        properties = _schema_elastic_monitor_resource_read.properties
        properties.elastic_properties = AAZObjectType(
            serialized_name="elasticProperties",
        )
        properties.generate_api_key = AAZBoolType(
            serialized_name="generateApiKey",
        )
        properties.liftr_resource_category = AAZStrType(
            serialized_name="liftrResourceCategory",
            flags={"read_only": True},
        )
        properties.liftr_resource_preference = AAZIntType(
            serialized_name="liftrResourcePreference",
            flags={"read_only": True},
        )
        properties.monitoring_status = AAZStrType(
            serialized_name="monitoringStatus",
        )
        properties.plan_details = AAZObjectType(
            serialized_name="planDetails",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.saa_s_azure_subscription_status = AAZStrType(
            serialized_name="saaSAzureSubscriptionStatus",
        )
        properties.source_campaign_id = AAZStrType(
            serialized_name="sourceCampaignId",
        )
        properties.source_campaign_name = AAZStrType(
            serialized_name="sourceCampaignName",
        )
        properties.subscription_state = AAZStrType(
            serialized_name="subscriptionState",
        )
        properties.version = AAZStrType()

        elastic_properties = _schema_elastic_monitor_resource_read.properties.elastic_properties
        elastic_properties.elastic_cloud_deployment = AAZObjectType(
            serialized_name="elasticCloudDeployment",
        )
        elastic_properties.elastic_cloud_user = AAZObjectType(
            serialized_name="elasticCloudUser",
        )

        elastic_cloud_deployment = _schema_elastic_monitor_resource_read.properties.elastic_properties.elastic_cloud_deployment
        elastic_cloud_deployment.azure_subscription_id = AAZStrType(
            serialized_name="azureSubscriptionId",
            flags={"read_only": True},
        )
        elastic_cloud_deployment.deployment_id = AAZStrType(
            serialized_name="deploymentId",
            flags={"read_only": True},
        )
        elastic_cloud_deployment.elasticsearch_region = AAZStrType(
            serialized_name="elasticsearchRegion",
            flags={"read_only": True},
        )
        elastic_cloud_deployment.elasticsearch_service_url = AAZStrType(
            serialized_name="elasticsearchServiceUrl",
            flags={"read_only": True},
        )
        elastic_cloud_deployment.kibana_service_url = AAZStrType(
            serialized_name="kibanaServiceUrl",
            flags={"read_only": True},
        )
        elastic_cloud_deployment.kibana_sso_url = AAZStrType(
            serialized_name="kibanaSsoUrl",
            flags={"read_only": True},
        )
        elastic_cloud_deployment.name = AAZStrType(
            flags={"read_only": True},
        )

        elastic_cloud_user = _schema_elastic_monitor_resource_read.properties.elastic_properties.elastic_cloud_user
        elastic_cloud_user.elastic_cloud_sso_default_url = AAZStrType(
            serialized_name="elasticCloudSsoDefaultUrl",
            flags={"read_only": True},
        )
        elastic_cloud_user.email_address = AAZStrType(
            serialized_name="emailAddress",
            flags={"read_only": True},
        )
        elastic_cloud_user.id = AAZStrType(
            flags={"read_only": True},
        )

        plan_details = _schema_elastic_monitor_resource_read.properties.plan_details
        plan_details.offer_id = AAZStrType(
            serialized_name="offerID",
        )
        plan_details.plan_id = AAZStrType(
            serialized_name="planID",
        )
        plan_details.plan_name = AAZStrType(
            serialized_name="planName",
        )
        plan_details.publisher_id = AAZStrType(
            serialized_name="publisherID",
        )
        plan_details.term_id = AAZStrType(
            serialized_name="termID",
        )

        sku = _schema_elastic_monitor_resource_read.sku
        sku.name = AAZStrType(
            flags={"required": True},
        )

        system_data = _schema_elastic_monitor_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_elastic_monitor_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_elastic_monitor_resource_read.id
        _schema.identity = cls._schema_elastic_monitor_resource_read.identity
        _schema.location = cls._schema_elastic_monitor_resource_read.location
        _schema.name = cls._schema_elastic_monitor_resource_read.name
        _schema.properties = cls._schema_elastic_monitor_resource_read.properties
        _schema.sku = cls._schema_elastic_monitor_resource_read.sku
        _schema.system_data = cls._schema_elastic_monitor_resource_read.system_data
        _schema.tags = cls._schema_elastic_monitor_resource_read.tags
        _schema.type = cls._schema_elastic_monitor_resource_read.type


__all__ = ["Update"]
