# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Multiple Roles
@try_manual
def step_cloud_service_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--load-balancer-configurations "[{{\\"name\\":\\"contosolb\\",\\"properties\\":{{\\"frontendIPConfigurati'
             'ons\\":[{{\\"name\\":\\"contosofe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Network/publicIPAddresses/contosopublicip\\'
             '"}}}}}}]}}}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}},{{\\"name\\":\\"ContosoBackend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2'
             '\\",\\"capacity\\":1,\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg_4}"',
             checks=[])
    test.cmd('az vm cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Single Role
@try_manual
def step_cloud_service_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--load-balancer-configurations "[{{\\"name\\":\\"myLoadBalancer\\",\\"properties\\":{{\\"frontendIPConfig'
             'urations\\":[{{\\"name\\":\\"myfe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Network/publicIPAddresses/myPublicIP\\"}}}}'
             '}}]}}}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg_4}"',
             checks=[])
    test.cmd('az vm cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Single Role and Certificate from Key Vault
@try_manual
def step_cloud_service_create3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--load-balancer-configurations "[{{\\"name\\":\\"contosolb\\",\\"properties\\":{{\\"frontendIPConfigurati'
             'ons\\":[{{\\"name\\":\\"contosofe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Network/publicIPAddresses/contosopublicip\\'
             '"}}}}}}]}}}}]" '
             '--secrets "[{{\\"sourceVault\\":{{\\"id\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg_4}/prov'
             'iders/Microsoft.KeyVault/vaults/{{{{keyvault-name}}}}\\"}},\\"vaultCertificates\\":[{{\\"certificateUrl\\'
             '":\\"https://{{{{keyvault-name}}}}.vault.azure.net:443/secrets/ContosoCertificate/{{{{secret-id}}}}\\"}}]'
             '}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg_4}"',
             checks=[])
    test.cmd('az vm cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Single Role and RDP Extension
@try_manual
def step_cloud_service_create4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--extensions "[{{\\"name\\":\\"RDPExtension\\",\\"properties\\":{{\\"type\\":\\"RDP\\",\\"autoUpgradeMino'
             'rVersion\\":false,\\"protectedSettings\\":\\"<PrivateConfig><Password>{{{{password}}}}</Password></Privat'
             'eConfig>\\",\\"publisher\\":\\"Microsoft.Windows.Azure.Extensions\\",\\"settings\\":\\"<PublicConfig><Use'
             'rName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>\\",\\"typeHandlerVe'
             'rsion\\":\\"1.2.1\\"}}}}]" '
             '--load-balancer-configurations "[{{\\"name\\":\\"contosolb\\",\\"properties\\":{{\\"frontendIPConfigurati'
             'ons\\":[{{\\"name\\":\\"contosofe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Network/publicIPAddresses/contosopublicip\\'
             '"}}}}}}]}}}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg_4}"',
             checks=[])
    test.cmd('az vm cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/get/Get Cloud Service Instance View with Multiple Roles
@try_manual
def step_cloud_service_show_instance_view(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service show-instance-view '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/get/Get Cloud Service with Multiple Roles and RDP Extension
@try_manual
def step_cloud_service_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service show '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/get/List Cloud Services in a Resource Group
@try_manual
def step_cloud_service_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service list '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/get/List Cloud Services in a Subscription
@try_manual
def step_cloud_service_list_all(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service list-all',
             checks=checks)


# EXAMPLE: /CloudServices/post/Delete Cloud Service Role Instances
@try_manual
def step_cloud_service_delete_instance(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service delete-instance '
             '--name "{myCloudService}" '
             '--role-instances "ContosoFrontend_IN_0" "ContosoBackend_IN_1" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/post/Restart Cloud Service Role Instances
@try_manual
def step_cloud_service_restart(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service restart '
             '--name "{myCloudService}" '
             '--role-instances "ContosoFrontend_IN_0" "ContosoBackend_IN_1" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/post/Start Cloud Service
@try_manual
def step_cloud_service_start(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service start '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/post/Stop or PowerOff Cloud Service
@try_manual
def step_cloud_service_power_off(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service power-off '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoleInstances/get/Get Cloud Service Role Instance
@try_manual
def step_cloud_service_role_instance_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role-instance show '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--role-instance-name "{{roleInstance-name}}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoleInstances/get/Get Instance View of Cloud Service Role Instance
@try_manual
def step_cloud_service_role(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role-instance show-instance-view '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--role-instance-name "{{roleInstance-name}}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoleInstances/get/List Role Instances in a Cloud Service
@try_manual
def step_cloud_service_role_instance_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role-instance list '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoleInstances/post/Reimage Cloud Service Role Instance
@try_manual
def step_cloud_service_role_instance_reimage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role-instance reimage '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--role-instance-name "{{roleInstance-name}}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoleInstances/post/Restart Cloud Service Role Instance
@try_manual
def step_cloud_service_role_instance_restart(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role-instance restart '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--role-instance-name "{{roleInstance-name}}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoles/get/Get Cloud Service Role
@try_manual
def step_cloud_service_role_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role show '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--role-name "{{role-name}}"',
             checks=checks)


# EXAMPLE: /CloudServiceRoles/get/List Roles in a Cloud Service
@try_manual
def step_cloud_service_role_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-role list '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServicesUpdateDomain/put/Update Cloud Service to specified Domain
@try_manual
def step_cloud_service_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-update-domain walk-update-domain '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--update-domain 1',
             checks=checks)


# EXAMPLE: /CloudServicesUpdateDomain/get/Get Cloud Service Update Domain
@try_manual
def step_cloud_service_update2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-update-domain show-update-domain '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}" '
             '--update-domain 1',
             checks=checks)


# EXAMPLE: /CloudServicesUpdateDomain/get/List Update Domains in Cloud Service
@try_manual
def step_cloud_service_update3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service-update-domain list-update-domain '
             '--cloud-service-name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /CloudServices/delete/Delete Cloud Service
@try_manual
def step_cloud_service_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm cloud-service delete -y '
             '--name "{myCloudService}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /DiskAccesses/get/Get information about a private endpoint connection under a disk access resource.
@try_manual
def step_disk_access_list_private_endpoint_connection(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm disk-access list-private-endpoint-connection '
             '--name "{myDiskAccess}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DiskAccesses/get/List all possible private link resources under disk access resource.
@try_manual
def step_disk_access_show_private_link_resource(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm disk-access show-private-link-resource '
             '--name "{myDiskAccess}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DiskAccesses/delete/Delete a private endpoint connection under a disk access resource.
@try_manual
def step_disk_access_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm disk-access delete-a-private-endpoint-connection -y '
             '--name "{myDiskAccess}" '
             '--private-endpoint-connection-name "myPrivateEndpointConnection" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DiskRestorePoint/get/Get an incremental disk restorePoint resource.
@try_manual
def step_disk_restore_point_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm disk-restore-point show '
             '--name "{myDiskRestorePoint}" '
             '--resource-group "{rg}" '
             '--restore-point-collection-name "rpc" '
             '--vm-restore-point-name "vmrp"',
             checks=checks)


# EXAMPLE: /GalleryApplications/put/Create or update a simple gallery Application.
@try_manual
def step_gallery_application_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application create '
             '--location "West US" '
             '--description "This is the gallery application description." '
             '--eula "This is the gallery application EULA." '
             '--privacy-statement-uri "myPrivacyStatementUri}}" '
             '--release-note-uri "myReleaseNoteUri" '
             '--supported-os-type "Windows" '
             '--name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/get/Get a gallery Application.
@try_manual
def step_gallery_application_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application show '
             '--name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/get/List gallery Applications in a gallery.
@try_manual
def step_gallery_application_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application list '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplicationVersions/get/List gallery Application Versions in a gallery Application Definition.
@try_manual
def step_gallery_application_version_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application-version list '
             '--gallery-application-name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GalleryApplications/delete/Delete a gallery Application.
@try_manual
def step_gallery_application_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm gallery-application delete -y '
             '--name "{myGalleryApplication}" '
             '--gallery-name "myGalleryName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SshPublicKeys/put/Create a new SSH public key resource.
@try_manual
def step_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az sshkey create '
             '--location "westus" '
             '--public-key "{{ssh-rsa public key}}" '
             '--resource-group "{rg}" '
             '--name "{mySshPublicKey}"',
             checks=checks)


# EXAMPLE: /SshPublicKeys/get/Get an ssh public key.
@try_manual
def step_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az sshkey show '
             '--resource-group "{rg}" '
             '--name "{mySshPublicKey}"',
             checks=checks)


# EXAMPLE: /VirtualMachines/post/Install patch state of a virtual machine.
@try_manual
def step_install_patch(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm install-patch '
             '--maximum-duration "PT4H" '
             '--reboot-setting "IfRequired" '
             '--windows-parameters classifications-to-include="Critical" classifications-to-include="Security" '
             'max-patch-publish-date="2020-11-19T02:36:43.0539904+00:00" '
             '--resource-group "{rg_2}" '
             '--name "myVMName"',
             checks=checks)


# EXAMPLE: /VirtualMachines/post/Reimage a Virtual Machine.
@try_manual
def step_reimage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vm reimage '
             '--temp-disk true '
             '--resource-group "{rg}" '
             '--name "myVMName"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMExtensions/put/Create VirtualMachineScaleSet VM extension.
@try_manual
def step_vm_extension_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vmss vm-extension create '
             '--type-properties-type "extType" '
             '--auto-upgrade-minor-version true '
             '--publisher "extPublisher" '
             '--settings "{{\\"UserName\\":\\"xyz@microsoft.com\\"}}" '
             '--type-handler-version "1.2" '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-extension-name "myVMExtension" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMExtensions/get/Get VirtualMachineScaleSet VM extension.
@try_manual
def step_vm_extension_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vmss vm-extension show '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-extension-name "myVMExtension" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMExtensions/get/List extensions in Vmss instance.
@try_manual
def step_vm_extension_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vmss vm-extension list '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMRunCommands/get/List run commands in Vmss instance.
@try_manual
def step_vm_run_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vmss vm-run list '
             '--instance-id "0" '
             '--resource-group "{rg}" '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)


# EXAMPLE: /VirtualMachineScaleSetVMs/post/RetrieveBootDiagnosticsData of a virtual machine.
@try_manual
def step_v_ms_retrieve_boot_diagnostic_data(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az vmss v-ms retrieve-boot-diagnostic-data '
             '--instance-id "0" '
             '--resource-group "{rg_3}" '
             '--sas-uri-expiration-time-in-minutes 60 '
             '--vm-scale-set-name "myvmScaleSet"',
             checks=checks)
