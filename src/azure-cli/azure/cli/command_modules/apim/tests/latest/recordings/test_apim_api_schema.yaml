interactions:
- request:
    body: '{"properties": {"authenticationSettings": {}, "displayName": "gr-api000001",
      "path": "/api/gr-api000001", "protocols": ["https"]}}'
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api create
      Connection:
      - keep-alive
      Content-Length:
      - '130'
      Content-Type:
      - application/json
      ParameterSetName:
      - -g -n --api-id --path --display-name
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: PUT
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001?api-version=2021-08-01
  response:
    body:
      string: "{\r\n  \"id\": \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001\",\r\n
        \ \"type\": \"Microsoft.ApiManagement/service/apis\",\r\n  \"name\": \"gr-api000001\",\r\n
        \ \"properties\": {\r\n    \"displayName\": \"gr-api000001\",\r\n    \"apiRevision\":
        \"1\",\r\n    \"description\": null,\r\n    \"subscriptionRequired\": true,\r\n
        \   \"serviceUrl\": null,\r\n    \"path\": \"api/gr-api000001\",\r\n    \"protocols\":
        [\r\n      \"https\"\r\n    ],\r\n    \"authenticationSettings\": {\r\n      \"oAuth2\":
        null,\r\n      \"openid\": null\r\n    },\r\n    \"subscriptionKeyParameterNames\":
        {\r\n      \"header\": \"Ocp-Apim-Subscription-Key\",\r\n      \"query\":
        \"subscription-key\"\r\n    },\r\n    \"isCurrent\": true\r\n  }\r\n}"
    headers:
      cache-control:
      - no-cache
      content-length:
      - '752'
      content-type:
      - application/json; charset=utf-8
      date:
      - Tue, 30 Aug 2022 20:57:17 GMT
      etag:
      - '"AAAAAADnovk="'
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      x-content-type-options:
      - nosniff
      x-ms-ratelimit-remaining-subscription-writes:
      - '1199'
    status:
      code: 201
      message: Created
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api create
      Connection:
      - keep-alive
      ParameterSetName:
      - -g -n --api-id --path --display-name
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001?api-version=2021-08-01
  response:
    body:
      string: "{\r\n  \"id\": \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001\",\r\n
        \ \"type\": \"Microsoft.ApiManagement/service/apis\",\r\n  \"name\": \"gr-api000001\",\r\n
        \ \"properties\": {\r\n    \"displayName\": \"gr-api000001\",\r\n    \"apiRevision\":
        \"1\",\r\n    \"description\": null,\r\n    \"subscriptionRequired\": true,\r\n
        \   \"serviceUrl\": null,\r\n    \"path\": \"api/gr-api000001\",\r\n    \"protocols\":
        [\r\n      \"https\"\r\n    ],\r\n    \"authenticationSettings\": {\r\n      \"oAuth2\":
        null,\r\n      \"openid\": null\r\n    },\r\n    \"subscriptionKeyParameterNames\":
        {\r\n      \"header\": \"Ocp-Apim-Subscription-Key\",\r\n      \"query\":
        \"subscription-key\"\r\n    },\r\n    \"isCurrent\": true\r\n  }\r\n}"
    headers:
      cache-control:
      - no-cache
      content-length:
      - '752'
      content-type:
      - application/json; charset=utf-8
      date:
      - Tue, 30 Aug 2022 20:57:48 GMT
      etag:
      - '"AAAAAADnovk="'
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      transfer-encoding:
      - chunked
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
    status:
      code: 200
      message: OK
- request:
    body: '{"properties": {"contentType": "application/vnd.ms-azure-apim.graphql.schema",
      "document": {"value": "schema {\n  query: Query\n  mutation: Mutation\n  subscription:
      Subscription\n}\n\ntype Address {\n  address: String\n  city: String\n  state:
      String\n}\n\ntype Capsule {\n  id: ID\n  landings: Int\n  missions: [CapsuleMission]\n  original_launch:
      Date\n  reuse_count: Int\n  status: String\n  type: String\n  dragon: Dragon\n}\n\ntype
      CapsuleMission {\n  flight: Int\n  name: String\n}\n\ninput CapsulesFind {\n  id:
      ID\n  landings: Int\n  mission: String\n  original_launch: Date\n  reuse_count:
      Int\n  status: String\n  type: String\n}\n\ntype Core {\n  asds_attempts: Int\n  asds_landings:
      Int\n  block: Int\n  id: ID\n  missions: [CapsuleMission]\n  original_launch:
      Date\n  reuse_count: Int\n  rtls_attempts: Int\n  rtls_landings: Int\n  status:
      String\n  water_landing: Boolean\n}\n\ntype CoreMission {\n  name: String\n  flight:
      Int\n}\n\ninput CoresFind {\n  asds_attempts: Int\n  asds_landings: Int\n  block:
      Int\n  id: String\n  missions: String\n  original_launch: Date\n  reuse_count:
      Int\n  rtls_attempts: Int\n  rtls_landings: Int\n  status: String\n  water_landing:
      Boolean\n}\n\nscalar Date\n\ntype Distance {\n  feet: Float\n  meters: Float\n}\n\ntype
      Dragon {\n  active: Boolean\n  crew_capacity: Int\n  description: String\n  diameter:
      Distance\n  dry_mass_kg: Int\n  dry_mass_lb: Int\n  first_flight: String\n  heat_shield:
      DragonHeatShield\n  height_w_trunk: Distance\n  id: ID\n  launch_payload_mass:
      Mass\n  launch_payload_vol: Volume\n  name: String\n  orbit_duration_yr: Int\n  pressurized_capsule:
      DragonPressurizedCapsule\n  return_payload_mass: Mass\n  return_payload_vol:
      Volume\n  sidewall_angle_deg: Float\n  thrusters: [DragonThrust]\n  trunk: DragonTrunk\n  type:
      String\n  wikipedia: String\n}\n\ntype DragonHeatShield {\n  dev_partner: String\n  material:
      String\n  size_meters: Float\n  temp_degrees: Int\n}\n\ntype DragonPressurizedCapsule
      {\n  payload_volume: Volume\n}\n\ntype DragonThrust {\n  amount: Int\n  fuel_1:
      String\n  fuel_2: String\n  pods: Int\n  thrust: Force\n  type: String\n}\n\ntype
      DragonTrunk {\n  cargo: DragonTrunkCargo\n  trunk_volume: Volume\n}\n\ntype
      DragonTrunkCargo {\n  solar_array: Int\n  unpressurized_cargo: Boolean\n}\n\ntype
      Force {\n  kN: Float\n  lbf: Float\n}\n\ntype HistoriesResult {\n  result: Result\n  data:
      [History]\n}\n\ntype History {\n  details: String\n  event_date_unix: Date\n  event_date_utc:
      Date\n  id: ID\n  links: Link\n  title: String\n  flight: Launch\n}\n\ninput
      HistoryFind {\n  end: Date\n  flight_number: Int\n  id: ID\n  start: Date\n}\n\ntype
      Info {\n  ceo: String\n  coo: String\n  cto_propulsion: String\n  cto: String\n  employees:
      Int\n  founded: Int\n  founder: String\n  headquarters: Address\n  launch_sites:
      Int\n  links: InfoLinks\n  name: String\n  summary: String\n  test_sites: Int\n  valuation:
      Float\n  vehicles: Int\n}\n\ntype InfoLinks {\n  elon_twitter: String\n  flickr:
      String\n  twitter: String\n  website: String\n}\n\ntype Landpad {\n  attempted_landings:
      String\n  details: String\n  full_name: String\n  id: ID\n  landing_type: String\n  location:
      Location\n  status: String\n  successful_landings: String\n  wikipedia: String\n}\n\ntype
      Launch {\n  details: String\n  id: ID\n  is_tentative: Boolean\n  launch_date_local:
      Date\n  launch_date_unix: Date\n  launch_date_utc: Date\n  launch_site: LaunchSite\n  launch_success:
      Boolean\n  launch_year: String\n  links: LaunchLinks\n  mission_id: [String]\n  mission_name:
      String\n  rocket: LaunchRocket\n  static_fire_date_unix: Date\n  static_fire_date_utc:
      Date\n  telemetry: LaunchTelemetry\n  tentative_max_precision: String\n  upcoming:
      Boolean\n  ships: [Ship]\n}\n\ninput LaunchFind {\n  apoapsis_km: Float\n  block:
      Int\n  cap_serial: String\n  capsule_reuse: String\n  core_flight: Int\n  core_reuse:
      String\n  core_serial: String\n  customer: String\n  eccentricity: Float\n  end:
      Date\n  epoch: Date\n  fairings_recovered: String\n  fairings_recovery_attempt:
      String\n  fairings_reuse: String\n  fairings_reused: String\n  fairings_ship:
      String\n  gridfins: String\n  id: ID\n  inclination_deg: Float\n  land_success:
      String\n  landing_intent: String\n  landing_type: String\n  landing_vehicle:
      String\n  launch_date_local: Date\n  launch_date_utc: Date\n  launch_success:
      String\n  launch_year: String\n  legs: String\n  lifespan_years: Float\n  longitude:
      Float\n  manufacturer: String\n  mean_motion: Float\n  mission_id: String\n  mission_name:
      String\n  nationality: String\n  norad_id: Int\n  orbit: String\n  payload_id:
      String\n  payload_type: String\n  periapsis_km: Float\n  period_min: Float\n  raan:
      Float\n  reference_system: String\n  regime: String\n  reused: String\n  rocket_id:
      String\n  rocket_name: String\n  rocket_type: String\n  second_stage_block:
      String\n  semi_major_axis_km: Float\n  ship: String\n  side_core1_reuse: String\n  side_core2_reuse:
      String\n  site_id: String\n  site_name_long: String\n  site_name: String\n  start:
      Date\n  tbd: String\n  tentative_max_precision: String\n  tentative: String\n}\n\ntype
      LaunchLinks {\n  article_link: String\n  flickr_images: [String]\n  mission_patch_small:
      String\n  mission_patch: String\n  presskit: String\n  reddit_campaign: String\n  reddit_launch:
      String\n  reddit_media: String\n  reddit_recovery: String\n  video_link: String\n  wikipedia:
      String\n}\n\ntype LaunchRocket {\n  fairings: LaunchRocketFairings\n  first_stage:
      LaunchRocketFirstStage\n  rocket_name: String\n  rocket_type: String\n  rocket:
      Rocket\n  second_stage: LaunchRocketSecondStage\n}\n\ntype LaunchRocketFairings
      {\n  recovered: Boolean\n  recovery_attempt: Boolean\n  reused: Boolean\n  ship:
      String\n}\n\ntype LaunchRocketFirstStage {\n  cores: [LaunchRocketFirstStageCore]\n}\n\ntype
      LaunchRocketFirstStageCore {\n  block: Int\n  core: Core\n  flight: Int\n  gridfins:
      Boolean\n  land_success: Boolean\n  landing_intent: Boolean\n  landing_type:
      String\n  landing_vehicle: String\n  legs: Boolean\n  reused: Boolean\n}\n\ntype
      LaunchRocketSecondStage {\n  block: Int\n  payloads: [Payload]\n}\n\ntype LaunchSite
      {\n  site_id: String\n  site_name_long: String\n  site_name: String\n}\n\ntype
      LaunchTelemetry {\n  flight_club: String\n}\n\ntype LaunchesPastResult {\n  result:
      Result\n  data: [Launch]\n}\n\ntype Launchpad {\n  attempted_launches: Int\n  details:
      String\n  id: ID\n  location: Location\n  name: String\n  status: String\n  successful_launches:
      Int\n  vehicles_launched: [Rocket]\n  wikipedia: String\n}\n\ntype Link {\n  article:
      String\n  reddit: String\n  wikipedia: String\n}\n\ntype Location {\n  latitude:
      Float\n  longitude: Float\n  name: String\n  region: String\n}\n\ntype Mass
      {\n  kg: Int\n  lb: Int\n}\n\ntype Mission {\n  description: String\n  id: ID\n  manufacturers:
      [String]\n  name: String\n  twitter: String\n  website: String\n  wikipedia:
      String\n  payloads: [Payload]\n}\n\ntype MissionResult {\n  result: Result\n  data:
      [Mission]\n}\n\ninput MissionsFind {\n  id: ID\n  manufacturer: String\n  name:
      String\n  payload_id: String\n}\n\ntype Mutation {\n  # delete data from the
      table: \\\"users\\\"\n  delete_users(\n    # filter the rows which have to be
      deleted\n    where: users_bool_exp!\n  ): users_mutation_response\n  # insert
      data into the table: \\\"users\\\"\n  insert_users(\n    # the rows to be inserted\n    objects:
      [users_insert_input!]!\n    # on conflict condition\n    on_conflict: users_on_conflict\n  ):
      users_mutation_response\n  # update data of the table: \\\"users\\\"\n  update_users(\n    #
      sets the columns of the filtered rows to the given values\n    _set: users_set_input\n    #
      filter the rows which have to be updated\n    where: users_bool_exp!\n  ): users_mutation_response\n}\n\nscalar
      ObjectID\n\ntype Payload {\n  customers: [String]\n  id: ID\n  manufacturer:
      String\n  nationality: String\n  norad_id: [Int]\n  orbit_params: PayloadOrbitParams\n  orbit:
      String\n  payload_mass_kg: Float\n  payload_mass_lbs: Float\n  payload_type:
      String\n  reused: Boolean\n}\n\ntype PayloadOrbitParams {\n  apoapsis_km: Float\n  arg_of_pericenter:
      Float\n  eccentricity: Float\n  epoch: Date\n  inclination_deg: Float\n  lifespan_years:
      Float\n  longitude: Float\n  mean_anomaly: Float\n  mean_motion: Float\n  periapsis_km:
      Float\n  period_min: Float\n  raan: Float\n  reference_system: String\n  regime:
      String\n  semi_major_axis_km: Float\n}\n\ninput PayloadsFind {\n  apoapsis_km:
      Float\n  customer: String\n  eccentricity: Float\n  epoch: Date\n  inclination_deg:
      Float\n  lifespan_years: Float\n  longitude: Float\n  manufacturer: String\n  mean_motion:
      Float\n  nationality: String\n  norad_id: Int\n  orbit: String\n  payload_id:
      ID\n  payload_type: String\n  periapsis_km: Float\n  period_min: Float\n  raan:
      Float\n  reference_system: String\n  regime: String\n  reused: Boolean\n  semi_major_axis_km:
      Float\n}\n\ntype Query {\n  # fetch data from the table: \\\"users\\\"\n  users(\n    #
      distinct select on columns\n    distinct_on: [users_select_column!]\n    # limit
      the nuber of rows returned\n    limit: Int\n    # skip the first n rows. Use
      only with order_by\n    offset: Int\n    # sort the rows by one or more columns\n    order_by:
      [users_order_by!]\n    # filter the rows returned\n    where: users_bool_exp\n  ):
      [users!]!\n  # fetch aggregated fields from the table: \\\"users\\\"\n  users_aggregate(\n    #
      distinct select on columns\n    distinct_on: [users_select_column!]\n    # limit
      the nuber of rows returned\n    limit: Int\n    # skip the first n rows. Use
      only with order_by\n    offset: Int\n    # sort the rows by one or more columns\n    order_by:
      [users_order_by!]\n    # filter the rows returned\n    where: users_bool_exp\n  ):
      users_aggregate!\n  # fetch data from the table: \\\"users\\\" using primary
      key columns\n  users_by_pk(\n    id: uuid!\n  ): users\n  capsules(\n    find:
      CapsulesFind\n    limit: Int\n    offset: Int\n    order: String\n    sort:
      String\n  ): [Capsule]\n  capsulesPast(\n    find: CapsulesFind\n    limit:
      Int\n    offset: Int\n    order: String\n    sort: String\n  ): [Capsule]\n  capsulesUpcoming(\n    find:
      CapsulesFind\n    limit: Int\n    offset: Int\n    order: String\n    sort:
      String\n  ): [Capsule]\n  capsule(\n    id: ID!\n  ): Capsule\n  company: Info\n  cores(\n    find:
      CoresFind\n    limit: Int\n    offset: Int\n    order: String\n    sort: String\n  ):
      [Core]\n  coresPast(\n    find: CoresFind\n    limit: Int\n    offset: Int\n    order:
      String\n    sort: String\n  ): [Core]\n  coresUpcoming(\n    find: CoresFind\n    limit:
      Int\n    offset: Int\n    order: String\n    sort: String\n  ): [Core]\n  core(\n    id:
      ID!\n  ): Core\n  dragons(\n    limit: Int\n    offset: Int\n  ): [Dragon]\n  dragon(\n    id:
      ID!\n  ): Dragon\n  histories(\n    find: HistoryFind\n    limit: Int\n    offset:
      Int\n    order: String\n    sort: String\n  ): [History]\n  historiesResult(\n    find:
      HistoryFind\n    limit: Int\n    offset: Int\n    order: String\n    sort: String\n  ):
      HistoriesResult\n  history(\n    id: ID!\n  ): History\n  landpads(\n    limit:
      Int\n    offset: Int\n  ): [Landpad]\n  landpad(\n    id: ID!\n  ): Landpad\n  launches(\n    find:
      LaunchFind\n    limit: Int\n    offset: Int\n    order: String\n    sort: String\n  ):
      [Launch]\n  launchesPast(\n    find: LaunchFind\n    limit: Int\n    offset:
      Int\n    order: String\n    sort: String\n  ): [Launch]\n  launchesPastResult(\n    find:
      LaunchFind\n    limit: Int\n    offset: Int\n    order: String\n    sort: String\n  ):
      LaunchesPastResult\n  launchesUpcoming(\n    find: LaunchFind\n    limit: Int\n    offset:
      Int\n    order: String\n    sort: String\n  ): [Launch]\n  launch(\n    id:
      ID!\n  ): Launch\n  launchLatest(\n    offset: Int\n  ): Launch\n  launchNext(\n    offset:
      Int\n  ): Launch\n  launchpads(\n    limit: Int\n    offset: Int\n  ): [Launchpad]\n  launchpad(\n    id:
      ID!\n  ): Launchpad\n  missions(\n    find: MissionsFind\n    limit: Int\n    offset:
      Int\n  ): [Mission]\n  missionsResult(\n    find: MissionsFind\n    limit: Int\n    offset:
      Int\n  ): MissionResult\n  mission(\n    id: ID!\n  ): Mission\n  payloads(\n    find:
      PayloadsFind\n    limit: Int\n    offset: Int\n    order: String\n    sort:
      String\n  ): [Payload]\n  payload(\n    id: ID!\n  ): Payload\n  roadster: Roadster\n  rockets(\n    limit:
      Int\n    offset: Int\n  ): [Rocket]\n  rocketsResult(\n    limit: Int\n    offset:
      Int\n  ): RocketsResult\n  rocket(\n    id: ID!\n  ): Rocket\n  ships(\n    find:
      ShipsFind\n    limit: Int\n    offset: Int\n    order: String\n    sort: String\n  ):
      [Ship]\n  shipsResult(\n    find: ShipsFind\n    limit: Int\n    offset: Int\n    order:
      String\n    sort: String\n  ): ShipsResult\n  ship(\n    id: ID!\n  ): Ship\n}\n\ntype
      Result {\n  totalCount: Int\n}\n\ntype Roadster {\n  apoapsis_au: Float\n  details:
      String\n  earth_distance_km: Float\n  earth_distance_mi: Float\n  eccentricity:
      Float\n  epoch_jd: Float\n  inclination: Float\n  launch_date_unix: Date\n  launch_date_utc:
      Date\n  launch_mass_kg: Int\n  launch_mass_lbs: Int\n  longitude: Float\n  mars_distance_km:
      Float\n  mars_distance_mi: Float\n  name: String\n  norad_id: Int\n  orbit_type:
      Float\n  periapsis_arg: Float\n  periapsis_au: Float\n  period_days: Float\n  semi_major_axis_au:
      Float\n  speed_kph: Float\n  speed_mph: Float\n  wikipedia: String\n}\n\ntype
      Rocket {\n  active: Boolean\n  boosters: Int\n  company: String\n  cost_per_launch:
      Int\n  country: String\n  description: String\n  diameter: Distance\n  engines:
      RocketEngines\n  first_flight: Date\n  first_stage: RocketFirstStage\n  height:
      Distance\n  id: ID\n  landing_legs: RocketLandingLegs\n  mass: Mass\n  name:
      String\n  payload_weights: [RocketPayloadWeight]\n  second_stage: RocketSecondStage\n  stages:
      Int\n  success_rate_pct: Int\n  type: String\n  wikipedia: String\n}\n\ntype
      RocketEngines {\n  number: Int\n  type: String\n  version: String\n  layout:
      String\n  engine_loss_max: String\n  propellant_1: String\n  propellant_2: String\n  thrust_sea_level:
      Force\n  thrust_vacuum: Force\n  thrust_to_weight: Float\n}\n\ntype RocketFirstStage
      {\n  burn_time_sec: Int\n  engines: Int\n  fuel_amount_tons: Float\n  reusable:
      Boolean\n  thrust_sea_level: Force\n  thrust_vacuum: Force\n}\n\ntype RocketLandingLegs
      {\n  number: Int\n  material: String\n}\n\ntype RocketPayloadWeight {\n  id:
      String\n  kg: Int\n  lb: Int\n  name: String\n}\n\ntype RocketSecondStage {\n  burn_time_sec:
      Int\n  engines: Int\n  fuel_amount_tons: Float\n  payloads: RocketSecondStagePayloads\n  thrust:
      Force\n}\n\ntype RocketSecondStagePayloadCompositeFairing {\n  height: Distance\n  diameter:
      Distance\n}\n\ntype RocketSecondStagePayloads {\n  option_1: String\n  composite_fairing:
      RocketSecondStagePayloadCompositeFairing\n}\n\ntype RocketsResult {\n  result:
      Result\n  data: [Rocket]\n}\n\ntype Ship {\n  abs: Int\n  active: Boolean\n  attempted_landings:
      Int\n  class: Int\n  course_deg: Int\n  home_port: String\n  id: ID\n  image:
      String\n  imo: Int\n  missions: [ShipMission]\n  mmsi: Int\n  model: String\n  name:
      String\n  position: ShipLocation\n  roles: [String]\n  speed_kn: Float\n  status:
      String\n  successful_landings: Int\n  type: String\n  url: String\n  weight_kg:
      Int\n  weight_lbs: Int\n  year_built: Int\n}\n\ntype ShipLocation {\n  latitude:
      Float\n  longitude: Float\n}\n\ntype ShipMission {\n  flight: String\n  name:
      String\n}\n\ninput ShipsFind {\n  id: ID\n  name: String\n  model: String\n  type:
      String\n  role: String\n  active: Boolean\n  imo: Int\n  mmsi: Int\n  abs: Int\n  class:
      Int\n  weight_lbs: Int\n  weight_kg: Int\n  year_built: Int\n  home_port: String\n  status:
      String\n  speed_kn: Int\n  course_deg: Int\n  latitude: Float\n  longitude:
      Float\n  successful_landings: Int\n  attempted_landings: Int\n  mission: String\n}\n\ntype
      ShipsResult {\n  result: Result\n  data: [Ship]\n}\n\n# expression to compare
      columns of type String. All fields are combined with logical ''AND''.\ninput
      String_comparison_exp {\n  _eq: String\n  _gt: String\n  _gte: String\n  _ilike:
      String\n  _in: [String!]\n  _is_null: Boolean\n  _like: String\n  _lt: String\n  _lte:
      String\n  _neq: String\n  _nilike: String\n  _nin: [String!]\n  _nlike: String\n  _nsimilar:
      String\n  _similar: String\n}\n\ntype Subscription {\n  # fetch data from the
      table: \\\"users\\\"\n  users(\n    # distinct select on columns\n    distinct_on:
      [users_select_column!]\n    # limit the nuber of rows returned\n    limit: Int\n    #
      skip the first n rows. Use only with order_by\n    offset: Int\n    # sort the
      rows by one or more columns\n    order_by: [users_order_by!]\n    # filter the
      rows returned\n    where: users_bool_exp\n  ): [users!]!\n  # fetch aggregated
      fields from the table: \\\"users\\\"\n  users_aggregate(\n    # distinct select
      on columns\n    distinct_on: [users_select_column!]\n    # limit the nuber of
      rows returned\n    limit: Int\n    # skip the first n rows. Use only with order_by\n    offset:
      Int\n    # sort the rows by one or more columns\n    order_by: [users_order_by!]\n    #
      filter the rows returned\n    where: users_bool_exp\n  ): users_aggregate!\n  #
      fetch data from the table: \\\"users\\\" using primary key columns\n  users_by_pk(\n    id:
      uuid!\n  ): users\n}\n\ntype Volume {\n  cubic_feet: Int\n  cubic_meters: Int\n}\n\n#
      conflict action\nenum conflict_action {\n  # ignore the insert on this row\n  ignore\n  #
      update the row with the given values\n  update\n}\n\n# column ordering options\nenum
      order_by {\n  # in the ascending order, nulls last\n  asc\n  # in the ascending
      order, nulls first\n  asc_nulls_first\n  # in the ascending order, nulls last\n  asc_nulls_last\n  #
      in the descending order, nulls first\n  desc\n  # in the descending order, nulls
      first\n  desc_nulls_first\n  # in the descending order, nulls last\n  desc_nulls_last\n}\n\nscalar
      timestamptz\n\n# expression to compare columns of type timestamptz. All fields
      are combined with logical ''AND''.\ninput timestamptz_comparison_exp {\n  _eq:
      timestamptz\n  _gt: timestamptz\n  _gte: timestamptz\n  _in: [timestamptz!]\n  _is_null:
      Boolean\n  _lt: timestamptz\n  _lte: timestamptz\n  _neq: timestamptz\n  _nin:
      [timestamptz!]\n}\n\n# columns and relationships of \\\"users\\\"\ntype users
      {\n  id: uuid!\n  name: String\n  rocket: String\n  timestamp: timestamptz!\n  twitter:
      String\n}\n\n# aggregated selection of \\\"users\\\"\ntype users_aggregate {\n  aggregate:
      users_aggregate_fields\n  nodes: [users!]!\n}\n\n# aggregate fields of \\\"users\\\"\ntype
      users_aggregate_fields {\n  count(\n    columns: [users_select_column!]\n    distinct:
      Boolean\n  ): Int\n  max: users_max_fields\n  min: users_min_fields\n}\n\n#
      order by aggregate values of table \\\"users\\\"\ninput users_aggregate_order_by
      {\n  count: order_by\n  max: users_max_order_by\n  min: users_min_order_by\n}\n\n#
      input type for inserting array relation for remote table \\\"users\\\"\ninput
      users_arr_rel_insert_input {\n  data: [users_insert_input!]!\n  on_conflict:
      users_on_conflict\n}\n\n# Boolean expression to filter rows from the table \\\"users\\\".
      All fields are combined with a logical ''AND''.\ninput users_bool_exp {\n  _and:
      [users_bool_exp]\n  _not: users_bool_exp\n  _or: [users_bool_exp]\n  id: uuid_comparison_exp\n  name:
      String_comparison_exp\n  rocket: String_comparison_exp\n  timestamp: timestamptz_comparison_exp\n  twitter:
      String_comparison_exp\n}\n\n# unique or primary key constraints on table \\\"users\\\"\nenum
      users_constraint {\n  # unique or primary key constraint\n  users_pkey\n}\n\n#
      input type for inserting data into table \\\"users\\\"\ninput users_insert_input
      {\n  id: uuid\n  name: String\n  rocket: String\n  timestamp: timestamptz\n  twitter:
      String\n}\n\n# aggregate max on columns\ntype users_max_fields {\n  name: String\n  rocket:
      String\n  timestamp: timestamptz\n  twitter: String\n}\n\n# order by max() on
      columns of table \\\"users\\\"\ninput users_max_order_by {\n  name: order_by\n  rocket:
      order_by\n  timestamp: order_by\n  twitter: order_by\n}\n\n# aggregate min on
      columns\ntype users_min_fields {\n  name: String\n  rocket: String\n  timestamp:
      timestamptz\n  twitter: String\n}\n\n# order by min() on columns of table \\\"users\\\"\ninput
      users_min_order_by {\n  name: order_by\n  rocket: order_by\n  timestamp: order_by\n  twitter:
      order_by\n}\n\n# response of any mutation on the table \\\"users\\\"\ntype users_mutation_response
      {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data
      of the affected rows by the mutation\n  returning: [users!]!\n}\n\n# input type
      for inserting object relation for remote table \\\"users\\\"\ninput users_obj_rel_insert_input
      {\n  data: users_insert_input!\n  on_conflict: users_on_conflict\n}\n\n# on
      conflict condition type for table \\\"users\\\"\ninput users_on_conflict {\n  constraint:
      users_constraint!\n  update_columns: [users_update_column!]!\n}\n\n# ordering
      options when selecting data from \\\"users\\\"\ninput users_order_by {\n  id:
      order_by\n  name: order_by\n  rocket: order_by\n  timestamp: order_by\n  twitter:
      order_by\n}\n\n# select columns of table \\\"users\\\"\nenum users_select_column
      {\n  # column name\n  id\n  # column name\n  name\n  # column name\n  rocket\n  #
      column name\n  timestamp\n  # column name\n  twitter\n}\n\n# input type for
      updating data in table \\\"users\\\"\ninput users_set_input {\n  id: uuid\n  name:
      String\n  rocket: String\n  timestamp: timestamptz\n  twitter: String\n}\n\n#
      update columns of table \\\"users\\\"\nenum users_update_column {\n  # column
      name\n  id\n  # column name\n  name\n  # column name\n  rocket\n  # column name\n  timestamp\n  #
      column name\n  twitter\n}\n\nscalar uuid\n\n# expression to compare columns
      of type uuid. All fields are combined with logical ''AND''.\ninput uuid_comparison_exp
      {\n  _eq: uuid\n  _gt: uuid\n  _gte: uuid\n  _in: [uuid!]\n  _is_null: Boolean\n  _lt:
      uuid\n  _lte: uuid\n  _neq: uuid\n  _nin: [uuid!]\n}\n"}}}'
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api schema create
      Connection:
      - keep-alive
      Content-Length:
      - '22057'
      Content-Type:
      - application/json
      ParameterSetName:
      - -g --service-name --api-id --schema-id --schema-type --schema-file
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: PUT
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql?api-version=2021-08-01
  response:
    body:
      string: ''
    headers:
      cache-control:
      - no-cache
      content-length:
      - '0'
      date:
      - Tue, 30 Aug 2022 20:57:49 GMT
      expires:
      - '-1'
      location:
      - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql?api-version=2021-08-01&asyncId=630e79cdb2738c1becb56816&asyncCode=201
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      x-content-type-options:
      - nosniff
      x-ms-ratelimit-remaining-subscription-writes:
      - '1199'
    status:
      code: 202
      message: Accepted
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api schema create
      Connection:
      - keep-alive
      ParameterSetName:
      - -g --service-name --api-id --schema-id --schema-type --schema-file
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql?api-version=2021-08-01&asyncId=630e79cdb2738c1becb56816&asyncCode=201
  response:
    body:
      string: "{\r\n  \"id\": \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql\",\r\n
        \ \"type\": \"Microsoft.ApiManagement/service/apis/schemas\",\r\n  \"name\":
        \"graphql\",\r\n  \"properties\": {\r\n    \"contentType\": \"application/vnd.ms-azure-apim.graphql.schema\",\r\n
        \   \"document\": {\r\n      \"value\": \"schema {\\n  query: Query\\n  mutation:
        Mutation\\n  subscription: Subscription\\n}\\n\\ntype Address {\\n  address:
        String\\n  city: String\\n  state: String\\n}\\n\\ntype Capsule {\\n  id:
        ID\\n  landings: Int\\n  missions: [CapsuleMission]\\n  original_launch: Date\\n
        \ reuse_count: Int\\n  status: String\\n  type: String\\n  dragon: Dragon\\n}\\n\\ntype
        CapsuleMission {\\n  flight: Int\\n  name: String\\n}\\n\\ninput CapsulesFind
        {\\n  id: ID\\n  landings: Int\\n  mission: String\\n  original_launch: Date\\n
        \ reuse_count: Int\\n  status: String\\n  type: String\\n}\\n\\ntype Core
        {\\n  asds_attempts: Int\\n  asds_landings: Int\\n  block: Int\\n  id: ID\\n
        \ missions: [CapsuleMission]\\n  original_launch: Date\\n  reuse_count: Int\\n
        \ rtls_attempts: Int\\n  rtls_landings: Int\\n  status: String\\n  water_landing:
        Boolean\\n}\\n\\ntype CoreMission {\\n  name: String\\n  flight: Int\\n}\\n\\ninput
        CoresFind {\\n  asds_attempts: Int\\n  asds_landings: Int\\n  block: Int\\n
        \ id: String\\n  missions: String\\n  original_launch: Date\\n  reuse_count:
        Int\\n  rtls_attempts: Int\\n  rtls_landings: Int\\n  status: String\\n  water_landing:
        Boolean\\n}\\n\\nscalar Date\\n\\ntype Distance {\\n  feet: Float\\n  meters:
        Float\\n}\\n\\ntype Dragon {\\n  active: Boolean\\n  crew_capacity: Int\\n
        \ description: String\\n  diameter: Distance\\n  dry_mass_kg: Int\\n  dry_mass_lb:
        Int\\n  first_flight: String\\n  heat_shield: DragonHeatShield\\n  height_w_trunk:
        Distance\\n  id: ID\\n  launch_payload_mass: Mass\\n  launch_payload_vol:
        Volume\\n  name: String\\n  orbit_duration_yr: Int\\n  pressurized_capsule:
        DragonPressurizedCapsule\\n  return_payload_mass: Mass\\n  return_payload_vol:
        Volume\\n  sidewall_angle_deg: Float\\n  thrusters: [DragonThrust]\\n  trunk:
        DragonTrunk\\n  type: String\\n  wikipedia: String\\n}\\n\\ntype DragonHeatShield
        {\\n  dev_partner: String\\n  material: String\\n  size_meters: Float\\n  temp_degrees:
        Int\\n}\\n\\ntype DragonPressurizedCapsule {\\n  payload_volume: Volume\\n}\\n\\ntype
        DragonThrust {\\n  amount: Int\\n  fuel_1: String\\n  fuel_2: String\\n  pods:
        Int\\n  thrust: Force\\n  type: String\\n}\\n\\ntype DragonTrunk {\\n  cargo:
        DragonTrunkCargo\\n  trunk_volume: Volume\\n}\\n\\ntype DragonTrunkCargo {\\n
        \ solar_array: Int\\n  unpressurized_cargo: Boolean\\n}\\n\\ntype Force {\\n
        \ kN: Float\\n  lbf: Float\\n}\\n\\ntype HistoriesResult {\\n  result: Result\\n
        \ data: [History]\\n}\\n\\ntype History {\\n  details: String\\n  event_date_unix:
        Date\\n  event_date_utc: Date\\n  id: ID\\n  links: Link\\n  title: String\\n
        \ flight: Launch\\n}\\n\\ninput HistoryFind {\\n  end: Date\\n  flight_number:
        Int\\n  id: ID\\n  start: Date\\n}\\n\\ntype Info {\\n  ceo: String\\n  coo:
        String\\n  cto_propulsion: String\\n  cto: String\\n  employees: Int\\n  founded:
        Int\\n  founder: String\\n  headquarters: Address\\n  launch_sites: Int\\n
        \ links: InfoLinks\\n  name: String\\n  summary: String\\n  test_sites: Int\\n
        \ valuation: Float\\n  vehicles: Int\\n}\\n\\ntype InfoLinks {\\n  elon_twitter:
        String\\n  flickr: String\\n  twitter: String\\n  website: String\\n}\\n\\ntype
        Landpad {\\n  attempted_landings: String\\n  details: String\\n  full_name:
        String\\n  id: ID\\n  landing_type: String\\n  location: Location\\n  status:
        String\\n  successful_landings: String\\n  wikipedia: String\\n}\\n\\ntype
        Launch {\\n  details: String\\n  id: ID\\n  is_tentative: Boolean\\n  launch_date_local:
        Date\\n  launch_date_unix: Date\\n  launch_date_utc: Date\\n  launch_site:
        LaunchSite\\n  launch_success: Boolean\\n  launch_year: String\\n  links:
        LaunchLinks\\n  mission_id: [String]\\n  mission_name: String\\n  rocket:
        LaunchRocket\\n  static_fire_date_unix: Date\\n  static_fire_date_utc: Date\\n
        \ telemetry: LaunchTelemetry\\n  tentative_max_precision: String\\n  upcoming:
        Boolean\\n  ships: [Ship]\\n}\\n\\ninput LaunchFind {\\n  apoapsis_km: Float\\n
        \ block: Int\\n  cap_serial: String\\n  capsule_reuse: String\\n  core_flight:
        Int\\n  core_reuse: String\\n  core_serial: String\\n  customer: String\\n
        \ eccentricity: Float\\n  end: Date\\n  epoch: Date\\n  fairings_recovered:
        String\\n  fairings_recovery_attempt: String\\n  fairings_reuse: String\\n
        \ fairings_reused: String\\n  fairings_ship: String\\n  gridfins: String\\n
        \ id: ID\\n  inclination_deg: Float\\n  land_success: String\\n  landing_intent:
        String\\n  landing_type: String\\n  landing_vehicle: String\\n  launch_date_local:
        Date\\n  launch_date_utc: Date\\n  launch_success: String\\n  launch_year:
        String\\n  legs: String\\n  lifespan_years: Float\\n  longitude: Float\\n
        \ manufacturer: String\\n  mean_motion: Float\\n  mission_id: String\\n  mission_name:
        String\\n  nationality: String\\n  norad_id: Int\\n  orbit: String\\n  payload_id:
        String\\n  payload_type: String\\n  periapsis_km: Float\\n  period_min: Float\\n
        \ raan: Float\\n  reference_system: String\\n  regime: String\\n  reused:
        String\\n  rocket_id: String\\n  rocket_name: String\\n  rocket_type: String\\n
        \ second_stage_block: String\\n  semi_major_axis_km: Float\\n  ship: String\\n
        \ side_core1_reuse: String\\n  side_core2_reuse: String\\n  site_id: String\\n
        \ site_name_long: String\\n  site_name: String\\n  start: Date\\n  tbd: String\\n
        \ tentative_max_precision: String\\n  tentative: String\\n}\\n\\ntype LaunchLinks
        {\\n  article_link: String\\n  flickr_images: [String]\\n  mission_patch_small:
        String\\n  mission_patch: String\\n  presskit: String\\n  reddit_campaign:
        String\\n  reddit_launch: String\\n  reddit_media: String\\n  reddit_recovery:
        String\\n  video_link: String\\n  wikipedia: String\\n}\\n\\ntype LaunchRocket
        {\\n  fairings: LaunchRocketFairings\\n  first_stage: LaunchRocketFirstStage\\n
        \ rocket_name: String\\n  rocket_type: String\\n  rocket: Rocket\\n  second_stage:
        LaunchRocketSecondStage\\n}\\n\\ntype LaunchRocketFairings {\\n  recovered:
        Boolean\\n  recovery_attempt: Boolean\\n  reused: Boolean\\n  ship: String\\n}\\n\\ntype
        LaunchRocketFirstStage {\\n  cores: [LaunchRocketFirstStageCore]\\n}\\n\\ntype
        LaunchRocketFirstStageCore {\\n  block: Int\\n  core: Core\\n  flight: Int\\n
        \ gridfins: Boolean\\n  land_success: Boolean\\n  landing_intent: Boolean\\n
        \ landing_type: String\\n  landing_vehicle: String\\n  legs: Boolean\\n  reused:
        Boolean\\n}\\n\\ntype LaunchRocketSecondStage {\\n  block: Int\\n  payloads:
        [Payload]\\n}\\n\\ntype LaunchSite {\\n  site_id: String\\n  site_name_long:
        String\\n  site_name: String\\n}\\n\\ntype LaunchTelemetry {\\n  flight_club:
        String\\n}\\n\\ntype LaunchesPastResult {\\n  result: Result\\n  data: [Launch]\\n}\\n\\ntype
        Launchpad {\\n  attempted_launches: Int\\n  details: String\\n  id: ID\\n
        \ location: Location\\n  name: String\\n  status: String\\n  successful_launches:
        Int\\n  vehicles_launched: [Rocket]\\n  wikipedia: String\\n}\\n\\ntype Link
        {\\n  article: String\\n  reddit: String\\n  wikipedia: String\\n}\\n\\ntype
        Location {\\n  latitude: Float\\n  longitude: Float\\n  name: String\\n  region:
        String\\n}\\n\\ntype Mass {\\n  kg: Int\\n  lb: Int\\n}\\n\\ntype Mission
        {\\n  description: String\\n  id: ID\\n  manufacturers: [String]\\n  name:
        String\\n  twitter: String\\n  website: String\\n  wikipedia: String\\n  payloads:
        [Payload]\\n}\\n\\ntype MissionResult {\\n  result: Result\\n  data: [Mission]\\n}\\n\\ninput
        MissionsFind {\\n  id: ID\\n  manufacturer: String\\n  name: String\\n  payload_id:
        String\\n}\\n\\ntype Mutation {\\n  # delete data from the table: \\\\\\\"users\\\\\\\"\\n
        \ delete_users(\\n    # filter the rows which have to be deleted\\n    where:
        users_bool_exp!\\n  ): users_mutation_response\\n  # insert data into the
        table: \\\\\\\"users\\\\\\\"\\n  insert_users(\\n    # the rows to be inserted\\n
        \   objects: [users_insert_input!]!\\n    # on conflict condition\\n    on_conflict:
        users_on_conflict\\n  ): users_mutation_response\\n  # update data of the
        table: \\\\\\\"users\\\\\\\"\\n  update_users(\\n    # sets the columns of
        the filtered rows to the given values\\n    _set: users_set_input\\n    #
        filter the rows which have to be updated\\n    where: users_bool_exp!\\n  ):
        users_mutation_response\\n}\\n\\nscalar ObjectID\\n\\ntype Payload {\\n  customers:
        [String]\\n  id: ID\\n  manufacturer: String\\n  nationality: String\\n  norad_id:
        [Int]\\n  orbit_params: PayloadOrbitParams\\n  orbit: String\\n  payload_mass_kg:
        Float\\n  payload_mass_lbs: Float\\n  payload_type: String\\n  reused: Boolean\\n}\\n\\ntype
        PayloadOrbitParams {\\n  apoapsis_km: Float\\n  arg_of_pericenter: Float\\n
        \ eccentricity: Float\\n  epoch: Date\\n  inclination_deg: Float\\n  lifespan_years:
        Float\\n  longitude: Float\\n  mean_anomaly: Float\\n  mean_motion: Float\\n
        \ periapsis_km: Float\\n  period_min: Float\\n  raan: Float\\n  reference_system:
        String\\n  regime: String\\n  semi_major_axis_km: Float\\n}\\n\\ninput PayloadsFind
        {\\n  apoapsis_km: Float\\n  customer: String\\n  eccentricity: Float\\n  epoch:
        Date\\n  inclination_deg: Float\\n  lifespan_years: Float\\n  longitude: Float\\n
        \ manufacturer: String\\n  mean_motion: Float\\n  nationality: String\\n  norad_id:
        Int\\n  orbit: String\\n  payload_id: ID\\n  payload_type: String\\n  periapsis_km:
        Float\\n  period_min: Float\\n  raan: Float\\n  reference_system: String\\n
        \ regime: String\\n  reused: Boolean\\n  semi_major_axis_km: Float\\n}\\n\\ntype
        Query {\\n  # fetch data from the table: \\\\\\\"users\\\\\\\"\\n  users(\\n
        \   # distinct select on columns\\n    distinct_on: [users_select_column!]\\n
        \   # limit the nuber of rows returned\\n    limit: Int\\n    # skip the first
        n rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by
        one or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): [users!]!\\n  # fetch aggregated
        fields from the table: \\\\\\\"users\\\\\\\"\\n  users_aggregate(\\n    #
        distinct select on columns\\n    distinct_on: [users_select_column!]\\n    #
        limit the nuber of rows returned\\n    limit: Int\\n    # skip the first n
        rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by one
        or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): users_aggregate!\\n  # fetch data
        from the table: \\\\\\\"users\\\\\\\" using primary key columns\\n  users_by_pk(\\n
        \   id: uuid!\\n  ): users\\n  capsules(\\n    find: CapsulesFind\\n    limit:
        Int\\n    offset: Int\\n    order: String\\n    sort: String\\n  ): [Capsule]\\n
        \ capsulesPast(\\n    find: CapsulesFind\\n    limit: Int\\n    offset: Int\\n
        \   order: String\\n    sort: String\\n  ): [Capsule]\\n  capsulesUpcoming(\\n
        \   find: CapsulesFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Capsule]\\n  capsule(\\n    id: ID!\\n  ): Capsule\\n
        \ company: Info\\n  cores(\\n    find: CoresFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): [Core]\\n  coresPast(\\n
        \   find: CoresFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Core]\\n  coresUpcoming(\\n    find: CoresFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Core]\\n  core(\\n    id: ID!\\n  ): Core\\n  dragons(\\n    limit:
        Int\\n    offset: Int\\n  ): [Dragon]\\n  dragon(\\n    id: ID!\\n  ): Dragon\\n
        \ histories(\\n    find: HistoryFind\\n    limit: Int\\n    offset: Int\\n
        \   order: String\\n    sort: String\\n  ): [History]\\n  historiesResult(\\n
        \   find: HistoryFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): HistoriesResult\\n  history(\\n    id: ID!\\n  ):
        History\\n  landpads(\\n    limit: Int\\n    offset: Int\\n  ): [Landpad]\\n
        \ landpad(\\n    id: ID!\\n  ): Landpad\\n  launches(\\n    find: LaunchFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Launch]\\n  launchesPast(\\n    find: LaunchFind\\n    limit: Int\\n
        \   offset: Int\\n    order: String\\n    sort: String\\n  ): [Launch]\\n
        \ launchesPastResult(\\n    find: LaunchFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): LaunchesPastResult\\n  launchesUpcoming(\\n
        \   find: LaunchFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Launch]\\n  launch(\\n    id: ID!\\n  ): Launch\\n
        \ launchLatest(\\n    offset: Int\\n  ): Launch\\n  launchNext(\\n    offset:
        Int\\n  ): Launch\\n  launchpads(\\n    limit: Int\\n    offset: Int\\n  ):
        [Launchpad]\\n  launchpad(\\n    id: ID!\\n  ): Launchpad\\n  missions(\\n
        \   find: MissionsFind\\n    limit: Int\\n    offset: Int\\n  ): [Mission]\\n
        \ missionsResult(\\n    find: MissionsFind\\n    limit: Int\\n    offset:
        Int\\n  ): MissionResult\\n  mission(\\n    id: ID!\\n  ): Mission\\n  payloads(\\n
        \   find: PayloadsFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Payload]\\n  payload(\\n    id: ID!\\n  ): Payload\\n
        \ roadster: Roadster\\n  rockets(\\n    limit: Int\\n    offset: Int\\n  ):
        [Rocket]\\n  rocketsResult(\\n    limit: Int\\n    offset: Int\\n  ): RocketsResult\\n
        \ rocket(\\n    id: ID!\\n  ): Rocket\\n  ships(\\n    find: ShipsFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Ship]\\n  shipsResult(\\n    find: ShipsFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): ShipsResult\\n  ship(\\n
        \   id: ID!\\n  ): Ship\\n}\\n\\ntype Result {\\n  totalCount: Int\\n}\\n\\ntype
        Roadster {\\n  apoapsis_au: Float\\n  details: String\\n  earth_distance_km:
        Float\\n  earth_distance_mi: Float\\n  eccentricity: Float\\n  epoch_jd: Float\\n
        \ inclination: Float\\n  launch_date_unix: Date\\n  launch_date_utc: Date\\n
        \ launch_mass_kg: Int\\n  launch_mass_lbs: Int\\n  longitude: Float\\n  mars_distance_km:
        Float\\n  mars_distance_mi: Float\\n  name: String\\n  norad_id: Int\\n  orbit_type:
        Float\\n  periapsis_arg: Float\\n  periapsis_au: Float\\n  period_days: Float\\n
        \ semi_major_axis_au: Float\\n  speed_kph: Float\\n  speed_mph: Float\\n  wikipedia:
        String\\n}\\n\\ntype Rocket {\\n  active: Boolean\\n  boosters: Int\\n  company:
        String\\n  cost_per_launch: Int\\n  country: String\\n  description: String\\n
        \ diameter: Distance\\n  engines: RocketEngines\\n  first_flight: Date\\n
        \ first_stage: RocketFirstStage\\n  height: Distance\\n  id: ID\\n  landing_legs:
        RocketLandingLegs\\n  mass: Mass\\n  name: String\\n  payload_weights: [RocketPayloadWeight]\\n
        \ second_stage: RocketSecondStage\\n  stages: Int\\n  success_rate_pct: Int\\n
        \ type: String\\n  wikipedia: String\\n}\\n\\ntype RocketEngines {\\n  number:
        Int\\n  type: String\\n  version: String\\n  layout: String\\n  engine_loss_max:
        String\\n  propellant_1: String\\n  propellant_2: String\\n  thrust_sea_level:
        Force\\n  thrust_vacuum: Force\\n  thrust_to_weight: Float\\n}\\n\\ntype RocketFirstStage
        {\\n  burn_time_sec: Int\\n  engines: Int\\n  fuel_amount_tons: Float\\n  reusable:
        Boolean\\n  thrust_sea_level: Force\\n  thrust_vacuum: Force\\n}\\n\\ntype
        RocketLandingLegs {\\n  number: Int\\n  material: String\\n}\\n\\ntype RocketPayloadWeight
        {\\n  id: String\\n  kg: Int\\n  lb: Int\\n  name: String\\n}\\n\\ntype RocketSecondStage
        {\\n  burn_time_sec: Int\\n  engines: Int\\n  fuel_amount_tons: Float\\n  payloads:
        RocketSecondStagePayloads\\n  thrust: Force\\n}\\n\\ntype RocketSecondStagePayloadCompositeFairing
        {\\n  height: Distance\\n  diameter: Distance\\n}\\n\\ntype RocketSecondStagePayloads
        {\\n  option_1: String\\n  composite_fairing: RocketSecondStagePayloadCompositeFairing\\n}\\n\\ntype
        RocketsResult {\\n  result: Result\\n  data: [Rocket]\\n}\\n\\ntype Ship {\\n
        \ abs: Int\\n  active: Boolean\\n  attempted_landings: Int\\n  class: Int\\n
        \ course_deg: Int\\n  home_port: String\\n  id: ID\\n  image: String\\n  imo:
        Int\\n  missions: [ShipMission]\\n  mmsi: Int\\n  model: String\\n  name:
        String\\n  position: ShipLocation\\n  roles: [String]\\n  speed_kn: Float\\n
        \ status: String\\n  successful_landings: Int\\n  type: String\\n  url: String\\n
        \ weight_kg: Int\\n  weight_lbs: Int\\n  year_built: Int\\n}\\n\\ntype ShipLocation
        {\\n  latitude: Float\\n  longitude: Float\\n}\\n\\ntype ShipMission {\\n
        \ flight: String\\n  name: String\\n}\\n\\ninput ShipsFind {\\n  id: ID\\n
        \ name: String\\n  model: String\\n  type: String\\n  role: String\\n  active:
        Boolean\\n  imo: Int\\n  mmsi: Int\\n  abs: Int\\n  class: Int\\n  weight_lbs:
        Int\\n  weight_kg: Int\\n  year_built: Int\\n  home_port: String\\n  status:
        String\\n  speed_kn: Int\\n  course_deg: Int\\n  latitude: Float\\n  longitude:
        Float\\n  successful_landings: Int\\n  attempted_landings: Int\\n  mission:
        String\\n}\\n\\ntype ShipsResult {\\n  result: Result\\n  data: [Ship]\\n}\\n\\n#
        expression to compare columns of type String. All fields are combined with
        logical 'AND'.\\ninput String_comparison_exp {\\n  _eq: String\\n  _gt: String\\n
        \ _gte: String\\n  _ilike: String\\n  _in: [String!]\\n  _is_null: Boolean\\n
        \ _like: String\\n  _lt: String\\n  _lte: String\\n  _neq: String\\n  _nilike:
        String\\n  _nin: [String!]\\n  _nlike: String\\n  _nsimilar: String\\n  _similar:
        String\\n}\\n\\ntype Subscription {\\n  # fetch data from the table: \\\\\\\"users\\\\\\\"\\n
        \ users(\\n    # distinct select on columns\\n    distinct_on: [users_select_column!]\\n
        \   # limit the nuber of rows returned\\n    limit: Int\\n    # skip the first
        n rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by
        one or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): [users!]!\\n  # fetch aggregated
        fields from the table: \\\\\\\"users\\\\\\\"\\n  users_aggregate(\\n    #
        distinct select on columns\\n    distinct_on: [users_select_column!]\\n    #
        limit the nuber of rows returned\\n    limit: Int\\n    # skip the first n
        rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by one
        or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): users_aggregate!\\n  # fetch data
        from the table: \\\\\\\"users\\\\\\\" using primary key columns\\n  users_by_pk(\\n
        \   id: uuid!\\n  ): users\\n}\\n\\ntype Volume {\\n  cubic_feet: Int\\n  cubic_meters:
        Int\\n}\\n\\n# conflict action\\nenum conflict_action {\\n  # ignore the insert
        on this row\\n  ignore\\n  # update the row with the given values\\n  update\\n}\\n\\n#
        column ordering options\\nenum order_by {\\n  # in the ascending order, nulls
        last\\n  asc\\n  # in the ascending order, nulls first\\n  asc_nulls_first\\n
        \ # in the ascending order, nulls last\\n  asc_nulls_last\\n  # in the descending
        order, nulls first\\n  desc\\n  # in the descending order, nulls first\\n
        \ desc_nulls_first\\n  # in the descending order, nulls last\\n  desc_nulls_last\\n}\\n\\nscalar
        timestamptz\\n\\n# expression to compare columns of type timestamptz. All
        fields are combined with logical 'AND'.\\ninput timestamptz_comparison_exp
        {\\n  _eq: timestamptz\\n  _gt: timestamptz\\n  _gte: timestamptz\\n  _in:
        [timestamptz!]\\n  _is_null: Boolean\\n  _lt: timestamptz\\n  _lte: timestamptz\\n
        \ _neq: timestamptz\\n  _nin: [timestamptz!]\\n}\\n\\n# columns and relationships
        of \\\\\\\"users\\\\\\\"\\ntype users {\\n  id: uuid!\\n  name: String\\n
        \ rocket: String\\n  timestamp: timestamptz!\\n  twitter: String\\n}\\n\\n#
        aggregated selection of \\\\\\\"users\\\\\\\"\\ntype users_aggregate {\\n
        \ aggregate: users_aggregate_fields\\n  nodes: [users!]!\\n}\\n\\n# aggregate
        fields of \\\\\\\"users\\\\\\\"\\ntype users_aggregate_fields {\\n  count(\\n
        \   columns: [users_select_column!]\\n    distinct: Boolean\\n  ): Int\\n
        \ max: users_max_fields\\n  min: users_min_fields\\n}\\n\\n# order by aggregate
        values of table \\\\\\\"users\\\\\\\"\\ninput users_aggregate_order_by {\\n
        \ count: order_by\\n  max: users_max_order_by\\n  min: users_min_order_by\\n}\\n\\n#
        input type for inserting array relation for remote table \\\\\\\"users\\\\\\\"\\ninput
        users_arr_rel_insert_input {\\n  data: [users_insert_input!]!\\n  on_conflict:
        users_on_conflict\\n}\\n\\n# Boolean expression to filter rows from the table
        \\\\\\\"users\\\\\\\". All fields are combined with a logical 'AND'.\\ninput
        users_bool_exp {\\n  _and: [users_bool_exp]\\n  _not: users_bool_exp\\n  _or:
        [users_bool_exp]\\n  id: uuid_comparison_exp\\n  name: String_comparison_exp\\n
        \ rocket: String_comparison_exp\\n  timestamp: timestamptz_comparison_exp\\n
        \ twitter: String_comparison_exp\\n}\\n\\n# unique or primary key constraints
        on table \\\\\\\"users\\\\\\\"\\nenum users_constraint {\\n  # unique or primary
        key constraint\\n  users_pkey\\n}\\n\\n# input type for inserting data into
        table \\\\\\\"users\\\\\\\"\\ninput users_insert_input {\\n  id: uuid\\n  name:
        String\\n  rocket: String\\n  timestamp: timestamptz\\n  twitter: String\\n}\\n\\n#
        aggregate max on columns\\ntype users_max_fields {\\n  name: String\\n  rocket:
        String\\n  timestamp: timestamptz\\n  twitter: String\\n}\\n\\n# order by
        max() on columns of table \\\\\\\"users\\\\\\\"\\ninput users_max_order_by
        {\\n  name: order_by\\n  rocket: order_by\\n  timestamp: order_by\\n  twitter:
        order_by\\n}\\n\\n# aggregate min on columns\\ntype users_min_fields {\\n
        \ name: String\\n  rocket: String\\n  timestamp: timestamptz\\n  twitter:
        String\\n}\\n\\n# order by min() on columns of table \\\\\\\"users\\\\\\\"\\ninput
        users_min_order_by {\\n  name: order_by\\n  rocket: order_by\\n  timestamp:
        order_by\\n  twitter: order_by\\n}\\n\\n# response of any mutation on the
        table \\\\\\\"users\\\\\\\"\\ntype users_mutation_response {\\n  # number
        of affected rows by the mutation\\n  affected_rows: Int!\\n  # data of the
        affected rows by the mutation\\n  returning: [users!]!\\n}\\n\\n# input type
        for inserting object relation for remote table \\\\\\\"users\\\\\\\"\\ninput
        users_obj_rel_insert_input {\\n  data: users_insert_input!\\n  on_conflict:
        users_on_conflict\\n}\\n\\n# on conflict condition type for table \\\\\\\"users\\\\\\\"\\ninput
        users_on_conflict {\\n  constraint: users_constraint!\\n  update_columns:
        [users_update_column!]!\\n}\\n\\n# ordering options when selecting data from
        \\\\\\\"users\\\\\\\"\\ninput users_order_by {\\n  id: order_by\\n  name:
        order_by\\n  rocket: order_by\\n  timestamp: order_by\\n  twitter: order_by\\n}\\n\\n#
        select columns of table \\\\\\\"users\\\\\\\"\\nenum users_select_column {\\n
        \ # column name\\n  id\\n  # column name\\n  name\\n  # column name\\n  rocket\\n
        \ # column name\\n  timestamp\\n  # column name\\n  twitter\\n}\\n\\n# input
        type for updating data in table \\\\\\\"users\\\\\\\"\\ninput users_set_input
        {\\n  id: uuid\\n  name: String\\n  rocket: String\\n  timestamp: timestamptz\\n
        \ twitter: String\\n}\\n\\n# update columns of table \\\\\\\"users\\\\\\\"\\nenum
        users_update_column {\\n  # column name\\n  id\\n  # column name\\n  name\\n
        \ # column name\\n  rocket\\n  # column name\\n  timestamp\\n  # column name\\n
        \ twitter\\n}\\n\\nscalar uuid\\n\\n# expression to compare columns of type
        uuid. All fields are combined with logical 'AND'.\\ninput uuid_comparison_exp
        {\\n  _eq: uuid\\n  _gt: uuid\\n  _gte: uuid\\n  _in: [uuid!]\\n  _is_null:
        Boolean\\n  _lt: uuid\\n  _lte: uuid\\n  _neq: uuid\\n  _nin: [uuid!]\\n}\\n\"\r\n
        \   }\r\n  }\r\n}"
    headers:
      cache-control:
      - no-cache
      content-length:
      - '22374'
      content-type:
      - application/json; charset=utf-8
      date:
      - Tue, 30 Aug 2022 20:58:19 GMT
      etag:
      - '"AAAAAADnozs="'
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      x-content-type-options:
      - nosniff
    status:
      code: 201
      message: Created
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api schema show
      Connection:
      - keep-alive
      ParameterSetName:
      - -g --service-name --api-id --schema-id --include-schema-value
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql?api-version=2021-08-01
  response:
    body:
      string: "{\r\n  \"id\": \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql\",\r\n
        \ \"type\": \"Microsoft.ApiManagement/service/apis/schemas\",\r\n  \"name\":
        \"graphql\",\r\n  \"properties\": {\r\n    \"contentType\": \"application/vnd.ms-azure-apim.graphql.schema\",\r\n
        \   \"document\": {\r\n      \"value\": \"schema {\\n  query: Query\\n  mutation:
        Mutation\\n  subscription: Subscription\\n}\\n\\ntype Address {\\n  address:
        String\\n  city: String\\n  state: String\\n}\\n\\ntype Capsule {\\n  id:
        ID\\n  landings: Int\\n  missions: [CapsuleMission]\\n  original_launch: Date\\n
        \ reuse_count: Int\\n  status: String\\n  type: String\\n  dragon: Dragon\\n}\\n\\ntype
        CapsuleMission {\\n  flight: Int\\n  name: String\\n}\\n\\ninput CapsulesFind
        {\\n  id: ID\\n  landings: Int\\n  mission: String\\n  original_launch: Date\\n
        \ reuse_count: Int\\n  status: String\\n  type: String\\n}\\n\\ntype Core
        {\\n  asds_attempts: Int\\n  asds_landings: Int\\n  block: Int\\n  id: ID\\n
        \ missions: [CapsuleMission]\\n  original_launch: Date\\n  reuse_count: Int\\n
        \ rtls_attempts: Int\\n  rtls_landings: Int\\n  status: String\\n  water_landing:
        Boolean\\n}\\n\\ntype CoreMission {\\n  name: String\\n  flight: Int\\n}\\n\\ninput
        CoresFind {\\n  asds_attempts: Int\\n  asds_landings: Int\\n  block: Int\\n
        \ id: String\\n  missions: String\\n  original_launch: Date\\n  reuse_count:
        Int\\n  rtls_attempts: Int\\n  rtls_landings: Int\\n  status: String\\n  water_landing:
        Boolean\\n}\\n\\nscalar Date\\n\\ntype Distance {\\n  feet: Float\\n  meters:
        Float\\n}\\n\\ntype Dragon {\\n  active: Boolean\\n  crew_capacity: Int\\n
        \ description: String\\n  diameter: Distance\\n  dry_mass_kg: Int\\n  dry_mass_lb:
        Int\\n  first_flight: String\\n  heat_shield: DragonHeatShield\\n  height_w_trunk:
        Distance\\n  id: ID\\n  launch_payload_mass: Mass\\n  launch_payload_vol:
        Volume\\n  name: String\\n  orbit_duration_yr: Int\\n  pressurized_capsule:
        DragonPressurizedCapsule\\n  return_payload_mass: Mass\\n  return_payload_vol:
        Volume\\n  sidewall_angle_deg: Float\\n  thrusters: [DragonThrust]\\n  trunk:
        DragonTrunk\\n  type: String\\n  wikipedia: String\\n}\\n\\ntype DragonHeatShield
        {\\n  dev_partner: String\\n  material: String\\n  size_meters: Float\\n  temp_degrees:
        Int\\n}\\n\\ntype DragonPressurizedCapsule {\\n  payload_volume: Volume\\n}\\n\\ntype
        DragonThrust {\\n  amount: Int\\n  fuel_1: String\\n  fuel_2: String\\n  pods:
        Int\\n  thrust: Force\\n  type: String\\n}\\n\\ntype DragonTrunk {\\n  cargo:
        DragonTrunkCargo\\n  trunk_volume: Volume\\n}\\n\\ntype DragonTrunkCargo {\\n
        \ solar_array: Int\\n  unpressurized_cargo: Boolean\\n}\\n\\ntype Force {\\n
        \ kN: Float\\n  lbf: Float\\n}\\n\\ntype HistoriesResult {\\n  result: Result\\n
        \ data: [History]\\n}\\n\\ntype History {\\n  details: String\\n  event_date_unix:
        Date\\n  event_date_utc: Date\\n  id: ID\\n  links: Link\\n  title: String\\n
        \ flight: Launch\\n}\\n\\ninput HistoryFind {\\n  end: Date\\n  flight_number:
        Int\\n  id: ID\\n  start: Date\\n}\\n\\ntype Info {\\n  ceo: String\\n  coo:
        String\\n  cto_propulsion: String\\n  cto: String\\n  employees: Int\\n  founded:
        Int\\n  founder: String\\n  headquarters: Address\\n  launch_sites: Int\\n
        \ links: InfoLinks\\n  name: String\\n  summary: String\\n  test_sites: Int\\n
        \ valuation: Float\\n  vehicles: Int\\n}\\n\\ntype InfoLinks {\\n  elon_twitter:
        String\\n  flickr: String\\n  twitter: String\\n  website: String\\n}\\n\\ntype
        Landpad {\\n  attempted_landings: String\\n  details: String\\n  full_name:
        String\\n  id: ID\\n  landing_type: String\\n  location: Location\\n  status:
        String\\n  successful_landings: String\\n  wikipedia: String\\n}\\n\\ntype
        Launch {\\n  details: String\\n  id: ID\\n  is_tentative: Boolean\\n  launch_date_local:
        Date\\n  launch_date_unix: Date\\n  launch_date_utc: Date\\n  launch_site:
        LaunchSite\\n  launch_success: Boolean\\n  launch_year: String\\n  links:
        LaunchLinks\\n  mission_id: [String]\\n  mission_name: String\\n  rocket:
        LaunchRocket\\n  static_fire_date_unix: Date\\n  static_fire_date_utc: Date\\n
        \ telemetry: LaunchTelemetry\\n  tentative_max_precision: String\\n  upcoming:
        Boolean\\n  ships: [Ship]\\n}\\n\\ninput LaunchFind {\\n  apoapsis_km: Float\\n
        \ block: Int\\n  cap_serial: String\\n  capsule_reuse: String\\n  core_flight:
        Int\\n  core_reuse: String\\n  core_serial: String\\n  customer: String\\n
        \ eccentricity: Float\\n  end: Date\\n  epoch: Date\\n  fairings_recovered:
        String\\n  fairings_recovery_attempt: String\\n  fairings_reuse: String\\n
        \ fairings_reused: String\\n  fairings_ship: String\\n  gridfins: String\\n
        \ id: ID\\n  inclination_deg: Float\\n  land_success: String\\n  landing_intent:
        String\\n  landing_type: String\\n  landing_vehicle: String\\n  launch_date_local:
        Date\\n  launch_date_utc: Date\\n  launch_success: String\\n  launch_year:
        String\\n  legs: String\\n  lifespan_years: Float\\n  longitude: Float\\n
        \ manufacturer: String\\n  mean_motion: Float\\n  mission_id: String\\n  mission_name:
        String\\n  nationality: String\\n  norad_id: Int\\n  orbit: String\\n  payload_id:
        String\\n  payload_type: String\\n  periapsis_km: Float\\n  period_min: Float\\n
        \ raan: Float\\n  reference_system: String\\n  regime: String\\n  reused:
        String\\n  rocket_id: String\\n  rocket_name: String\\n  rocket_type: String\\n
        \ second_stage_block: String\\n  semi_major_axis_km: Float\\n  ship: String\\n
        \ side_core1_reuse: String\\n  side_core2_reuse: String\\n  site_id: String\\n
        \ site_name_long: String\\n  site_name: String\\n  start: Date\\n  tbd: String\\n
        \ tentative_max_precision: String\\n  tentative: String\\n}\\n\\ntype LaunchLinks
        {\\n  article_link: String\\n  flickr_images: [String]\\n  mission_patch_small:
        String\\n  mission_patch: String\\n  presskit: String\\n  reddit_campaign:
        String\\n  reddit_launch: String\\n  reddit_media: String\\n  reddit_recovery:
        String\\n  video_link: String\\n  wikipedia: String\\n}\\n\\ntype LaunchRocket
        {\\n  fairings: LaunchRocketFairings\\n  first_stage: LaunchRocketFirstStage\\n
        \ rocket_name: String\\n  rocket_type: String\\n  rocket: Rocket\\n  second_stage:
        LaunchRocketSecondStage\\n}\\n\\ntype LaunchRocketFairings {\\n  recovered:
        Boolean\\n  recovery_attempt: Boolean\\n  reused: Boolean\\n  ship: String\\n}\\n\\ntype
        LaunchRocketFirstStage {\\n  cores: [LaunchRocketFirstStageCore]\\n}\\n\\ntype
        LaunchRocketFirstStageCore {\\n  block: Int\\n  core: Core\\n  flight: Int\\n
        \ gridfins: Boolean\\n  land_success: Boolean\\n  landing_intent: Boolean\\n
        \ landing_type: String\\n  landing_vehicle: String\\n  legs: Boolean\\n  reused:
        Boolean\\n}\\n\\ntype LaunchRocketSecondStage {\\n  block: Int\\n  payloads:
        [Payload]\\n}\\n\\ntype LaunchSite {\\n  site_id: String\\n  site_name_long:
        String\\n  site_name: String\\n}\\n\\ntype LaunchTelemetry {\\n  flight_club:
        String\\n}\\n\\ntype LaunchesPastResult {\\n  result: Result\\n  data: [Launch]\\n}\\n\\ntype
        Launchpad {\\n  attempted_launches: Int\\n  details: String\\n  id: ID\\n
        \ location: Location\\n  name: String\\n  status: String\\n  successful_launches:
        Int\\n  vehicles_launched: [Rocket]\\n  wikipedia: String\\n}\\n\\ntype Link
        {\\n  article: String\\n  reddit: String\\n  wikipedia: String\\n}\\n\\ntype
        Location {\\n  latitude: Float\\n  longitude: Float\\n  name: String\\n  region:
        String\\n}\\n\\ntype Mass {\\n  kg: Int\\n  lb: Int\\n}\\n\\ntype Mission
        {\\n  description: String\\n  id: ID\\n  manufacturers: [String]\\n  name:
        String\\n  twitter: String\\n  website: String\\n  wikipedia: String\\n  payloads:
        [Payload]\\n}\\n\\ntype MissionResult {\\n  result: Result\\n  data: [Mission]\\n}\\n\\ninput
        MissionsFind {\\n  id: ID\\n  manufacturer: String\\n  name: String\\n  payload_id:
        String\\n}\\n\\ntype Mutation {\\n  # delete data from the table: \\\\\\\"users\\\\\\\"\\n
        \ delete_users(\\n    # filter the rows which have to be deleted\\n    where:
        users_bool_exp!\\n  ): users_mutation_response\\n  # insert data into the
        table: \\\\\\\"users\\\\\\\"\\n  insert_users(\\n    # the rows to be inserted\\n
        \   objects: [users_insert_input!]!\\n    # on conflict condition\\n    on_conflict:
        users_on_conflict\\n  ): users_mutation_response\\n  # update data of the
        table: \\\\\\\"users\\\\\\\"\\n  update_users(\\n    # sets the columns of
        the filtered rows to the given values\\n    _set: users_set_input\\n    #
        filter the rows which have to be updated\\n    where: users_bool_exp!\\n  ):
        users_mutation_response\\n}\\n\\nscalar ObjectID\\n\\ntype Payload {\\n  customers:
        [String]\\n  id: ID\\n  manufacturer: String\\n  nationality: String\\n  norad_id:
        [Int]\\n  orbit_params: PayloadOrbitParams\\n  orbit: String\\n  payload_mass_kg:
        Float\\n  payload_mass_lbs: Float\\n  payload_type: String\\n  reused: Boolean\\n}\\n\\ntype
        PayloadOrbitParams {\\n  apoapsis_km: Float\\n  arg_of_pericenter: Float\\n
        \ eccentricity: Float\\n  epoch: Date\\n  inclination_deg: Float\\n  lifespan_years:
        Float\\n  longitude: Float\\n  mean_anomaly: Float\\n  mean_motion: Float\\n
        \ periapsis_km: Float\\n  period_min: Float\\n  raan: Float\\n  reference_system:
        String\\n  regime: String\\n  semi_major_axis_km: Float\\n}\\n\\ninput PayloadsFind
        {\\n  apoapsis_km: Float\\n  customer: String\\n  eccentricity: Float\\n  epoch:
        Date\\n  inclination_deg: Float\\n  lifespan_years: Float\\n  longitude: Float\\n
        \ manufacturer: String\\n  mean_motion: Float\\n  nationality: String\\n  norad_id:
        Int\\n  orbit: String\\n  payload_id: ID\\n  payload_type: String\\n  periapsis_km:
        Float\\n  period_min: Float\\n  raan: Float\\n  reference_system: String\\n
        \ regime: String\\n  reused: Boolean\\n  semi_major_axis_km: Float\\n}\\n\\ntype
        Query {\\n  # fetch data from the table: \\\\\\\"users\\\\\\\"\\n  users(\\n
        \   # distinct select on columns\\n    distinct_on: [users_select_column!]\\n
        \   # limit the nuber of rows returned\\n    limit: Int\\n    # skip the first
        n rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by
        one or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): [users!]!\\n  # fetch aggregated
        fields from the table: \\\\\\\"users\\\\\\\"\\n  users_aggregate(\\n    #
        distinct select on columns\\n    distinct_on: [users_select_column!]\\n    #
        limit the nuber of rows returned\\n    limit: Int\\n    # skip the first n
        rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by one
        or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): users_aggregate!\\n  # fetch data
        from the table: \\\\\\\"users\\\\\\\" using primary key columns\\n  users_by_pk(\\n
        \   id: uuid!\\n  ): users\\n  capsules(\\n    find: CapsulesFind\\n    limit:
        Int\\n    offset: Int\\n    order: String\\n    sort: String\\n  ): [Capsule]\\n
        \ capsulesPast(\\n    find: CapsulesFind\\n    limit: Int\\n    offset: Int\\n
        \   order: String\\n    sort: String\\n  ): [Capsule]\\n  capsulesUpcoming(\\n
        \   find: CapsulesFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Capsule]\\n  capsule(\\n    id: ID!\\n  ): Capsule\\n
        \ company: Info\\n  cores(\\n    find: CoresFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): [Core]\\n  coresPast(\\n
        \   find: CoresFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Core]\\n  coresUpcoming(\\n    find: CoresFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Core]\\n  core(\\n    id: ID!\\n  ): Core\\n  dragons(\\n    limit:
        Int\\n    offset: Int\\n  ): [Dragon]\\n  dragon(\\n    id: ID!\\n  ): Dragon\\n
        \ histories(\\n    find: HistoryFind\\n    limit: Int\\n    offset: Int\\n
        \   order: String\\n    sort: String\\n  ): [History]\\n  historiesResult(\\n
        \   find: HistoryFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): HistoriesResult\\n  history(\\n    id: ID!\\n  ):
        History\\n  landpads(\\n    limit: Int\\n    offset: Int\\n  ): [Landpad]\\n
        \ landpad(\\n    id: ID!\\n  ): Landpad\\n  launches(\\n    find: LaunchFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Launch]\\n  launchesPast(\\n    find: LaunchFind\\n    limit: Int\\n
        \   offset: Int\\n    order: String\\n    sort: String\\n  ): [Launch]\\n
        \ launchesPastResult(\\n    find: LaunchFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): LaunchesPastResult\\n  launchesUpcoming(\\n
        \   find: LaunchFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Launch]\\n  launch(\\n    id: ID!\\n  ): Launch\\n
        \ launchLatest(\\n    offset: Int\\n  ): Launch\\n  launchNext(\\n    offset:
        Int\\n  ): Launch\\n  launchpads(\\n    limit: Int\\n    offset: Int\\n  ):
        [Launchpad]\\n  launchpad(\\n    id: ID!\\n  ): Launchpad\\n  missions(\\n
        \   find: MissionsFind\\n    limit: Int\\n    offset: Int\\n  ): [Mission]\\n
        \ missionsResult(\\n    find: MissionsFind\\n    limit: Int\\n    offset:
        Int\\n  ): MissionResult\\n  mission(\\n    id: ID!\\n  ): Mission\\n  payloads(\\n
        \   find: PayloadsFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Payload]\\n  payload(\\n    id: ID!\\n  ): Payload\\n
        \ roadster: Roadster\\n  rockets(\\n    limit: Int\\n    offset: Int\\n  ):
        [Rocket]\\n  rocketsResult(\\n    limit: Int\\n    offset: Int\\n  ): RocketsResult\\n
        \ rocket(\\n    id: ID!\\n  ): Rocket\\n  ships(\\n    find: ShipsFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Ship]\\n  shipsResult(\\n    find: ShipsFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): ShipsResult\\n  ship(\\n
        \   id: ID!\\n  ): Ship\\n}\\n\\ntype Result {\\n  totalCount: Int\\n}\\n\\ntype
        Roadster {\\n  apoapsis_au: Float\\n  details: String\\n  earth_distance_km:
        Float\\n  earth_distance_mi: Float\\n  eccentricity: Float\\n  epoch_jd: Float\\n
        \ inclination: Float\\n  launch_date_unix: Date\\n  launch_date_utc: Date\\n
        \ launch_mass_kg: Int\\n  launch_mass_lbs: Int\\n  longitude: Float\\n  mars_distance_km:
        Float\\n  mars_distance_mi: Float\\n  name: String\\n  norad_id: Int\\n  orbit_type:
        Float\\n  periapsis_arg: Float\\n  periapsis_au: Float\\n  period_days: Float\\n
        \ semi_major_axis_au: Float\\n  speed_kph: Float\\n  speed_mph: Float\\n  wikipedia:
        String\\n}\\n\\ntype Rocket {\\n  active: Boolean\\n  boosters: Int\\n  company:
        String\\n  cost_per_launch: Int\\n  country: String\\n  description: String\\n
        \ diameter: Distance\\n  engines: RocketEngines\\n  first_flight: Date\\n
        \ first_stage: RocketFirstStage\\n  height: Distance\\n  id: ID\\n  landing_legs:
        RocketLandingLegs\\n  mass: Mass\\n  name: String\\n  payload_weights: [RocketPayloadWeight]\\n
        \ second_stage: RocketSecondStage\\n  stages: Int\\n  success_rate_pct: Int\\n
        \ type: String\\n  wikipedia: String\\n}\\n\\ntype RocketEngines {\\n  number:
        Int\\n  type: String\\n  version: String\\n  layout: String\\n  engine_loss_max:
        String\\n  propellant_1: String\\n  propellant_2: String\\n  thrust_sea_level:
        Force\\n  thrust_vacuum: Force\\n  thrust_to_weight: Float\\n}\\n\\ntype RocketFirstStage
        {\\n  burn_time_sec: Int\\n  engines: Int\\n  fuel_amount_tons: Float\\n  reusable:
        Boolean\\n  thrust_sea_level: Force\\n  thrust_vacuum: Force\\n}\\n\\ntype
        RocketLandingLegs {\\n  number: Int\\n  material: String\\n}\\n\\ntype RocketPayloadWeight
        {\\n  id: String\\n  kg: Int\\n  lb: Int\\n  name: String\\n}\\n\\ntype RocketSecondStage
        {\\n  burn_time_sec: Int\\n  engines: Int\\n  fuel_amount_tons: Float\\n  payloads:
        RocketSecondStagePayloads\\n  thrust: Force\\n}\\n\\ntype RocketSecondStagePayloadCompositeFairing
        {\\n  height: Distance\\n  diameter: Distance\\n}\\n\\ntype RocketSecondStagePayloads
        {\\n  option_1: String\\n  composite_fairing: RocketSecondStagePayloadCompositeFairing\\n}\\n\\ntype
        RocketsResult {\\n  result: Result\\n  data: [Rocket]\\n}\\n\\ntype Ship {\\n
        \ abs: Int\\n  active: Boolean\\n  attempted_landings: Int\\n  class: Int\\n
        \ course_deg: Int\\n  home_port: String\\n  id: ID\\n  image: String\\n  imo:
        Int\\n  missions: [ShipMission]\\n  mmsi: Int\\n  model: String\\n  name:
        String\\n  position: ShipLocation\\n  roles: [String]\\n  speed_kn: Float\\n
        \ status: String\\n  successful_landings: Int\\n  type: String\\n  url: String\\n
        \ weight_kg: Int\\n  weight_lbs: Int\\n  year_built: Int\\n}\\n\\ntype ShipLocation
        {\\n  latitude: Float\\n  longitude: Float\\n}\\n\\ntype ShipMission {\\n
        \ flight: String\\n  name: String\\n}\\n\\ninput ShipsFind {\\n  id: ID\\n
        \ name: String\\n  model: String\\n  type: String\\n  role: String\\n  active:
        Boolean\\n  imo: Int\\n  mmsi: Int\\n  abs: Int\\n  class: Int\\n  weight_lbs:
        Int\\n  weight_kg: Int\\n  year_built: Int\\n  home_port: String\\n  status:
        String\\n  speed_kn: Int\\n  course_deg: Int\\n  latitude: Float\\n  longitude:
        Float\\n  successful_landings: Int\\n  attempted_landings: Int\\n  mission:
        String\\n}\\n\\ntype ShipsResult {\\n  result: Result\\n  data: [Ship]\\n}\\n\\n#
        expression to compare columns of type String. All fields are combined with
        logical 'AND'.\\ninput String_comparison_exp {\\n  _eq: String\\n  _gt: String\\n
        \ _gte: String\\n  _ilike: String\\n  _in: [String!]\\n  _is_null: Boolean\\n
        \ _like: String\\n  _lt: String\\n  _lte: String\\n  _neq: String\\n  _nilike:
        String\\n  _nin: [String!]\\n  _nlike: String\\n  _nsimilar: String\\n  _similar:
        String\\n}\\n\\ntype Subscription {\\n  # fetch data from the table: \\\\\\\"users\\\\\\\"\\n
        \ users(\\n    # distinct select on columns\\n    distinct_on: [users_select_column!]\\n
        \   # limit the nuber of rows returned\\n    limit: Int\\n    # skip the first
        n rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by
        one or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): [users!]!\\n  # fetch aggregated
        fields from the table: \\\\\\\"users\\\\\\\"\\n  users_aggregate(\\n    #
        distinct select on columns\\n    distinct_on: [users_select_column!]\\n    #
        limit the nuber of rows returned\\n    limit: Int\\n    # skip the first n
        rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by one
        or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): users_aggregate!\\n  # fetch data
        from the table: \\\\\\\"users\\\\\\\" using primary key columns\\n  users_by_pk(\\n
        \   id: uuid!\\n  ): users\\n}\\n\\ntype Volume {\\n  cubic_feet: Int\\n  cubic_meters:
        Int\\n}\\n\\n# conflict action\\nenum conflict_action {\\n  # ignore the insert
        on this row\\n  ignore\\n  # update the row with the given values\\n  update\\n}\\n\\n#
        column ordering options\\nenum order_by {\\n  # in the ascending order, nulls
        last\\n  asc\\n  # in the ascending order, nulls first\\n  asc_nulls_first\\n
        \ # in the ascending order, nulls last\\n  asc_nulls_last\\n  # in the descending
        order, nulls first\\n  desc\\n  # in the descending order, nulls first\\n
        \ desc_nulls_first\\n  # in the descending order, nulls last\\n  desc_nulls_last\\n}\\n\\nscalar
        timestamptz\\n\\n# expression to compare columns of type timestamptz. All
        fields are combined with logical 'AND'.\\ninput timestamptz_comparison_exp
        {\\n  _eq: timestamptz\\n  _gt: timestamptz\\n  _gte: timestamptz\\n  _in:
        [timestamptz!]\\n  _is_null: Boolean\\n  _lt: timestamptz\\n  _lte: timestamptz\\n
        \ _neq: timestamptz\\n  _nin: [timestamptz!]\\n}\\n\\n# columns and relationships
        of \\\\\\\"users\\\\\\\"\\ntype users {\\n  id: uuid!\\n  name: String\\n
        \ rocket: String\\n  timestamp: timestamptz!\\n  twitter: String\\n}\\n\\n#
        aggregated selection of \\\\\\\"users\\\\\\\"\\ntype users_aggregate {\\n
        \ aggregate: users_aggregate_fields\\n  nodes: [users!]!\\n}\\n\\n# aggregate
        fields of \\\\\\\"users\\\\\\\"\\ntype users_aggregate_fields {\\n  count(\\n
        \   columns: [users_select_column!]\\n    distinct: Boolean\\n  ): Int\\n
        \ max: users_max_fields\\n  min: users_min_fields\\n}\\n\\n# order by aggregate
        values of table \\\\\\\"users\\\\\\\"\\ninput users_aggregate_order_by {\\n
        \ count: order_by\\n  max: users_max_order_by\\n  min: users_min_order_by\\n}\\n\\n#
        input type for inserting array relation for remote table \\\\\\\"users\\\\\\\"\\ninput
        users_arr_rel_insert_input {\\n  data: [users_insert_input!]!\\n  on_conflict:
        users_on_conflict\\n}\\n\\n# Boolean expression to filter rows from the table
        \\\\\\\"users\\\\\\\". All fields are combined with a logical 'AND'.\\ninput
        users_bool_exp {\\n  _and: [users_bool_exp]\\n  _not: users_bool_exp\\n  _or:
        [users_bool_exp]\\n  id: uuid_comparison_exp\\n  name: String_comparison_exp\\n
        \ rocket: String_comparison_exp\\n  timestamp: timestamptz_comparison_exp\\n
        \ twitter: String_comparison_exp\\n}\\n\\n# unique or primary key constraints
        on table \\\\\\\"users\\\\\\\"\\nenum users_constraint {\\n  # unique or primary
        key constraint\\n  users_pkey\\n}\\n\\n# input type for inserting data into
        table \\\\\\\"users\\\\\\\"\\ninput users_insert_input {\\n  id: uuid\\n  name:
        String\\n  rocket: String\\n  timestamp: timestamptz\\n  twitter: String\\n}\\n\\n#
        aggregate max on columns\\ntype users_max_fields {\\n  name: String\\n  rocket:
        String\\n  timestamp: timestamptz\\n  twitter: String\\n}\\n\\n# order by
        max() on columns of table \\\\\\\"users\\\\\\\"\\ninput users_max_order_by
        {\\n  name: order_by\\n  rocket: order_by\\n  timestamp: order_by\\n  twitter:
        order_by\\n}\\n\\n# aggregate min on columns\\ntype users_min_fields {\\n
        \ name: String\\n  rocket: String\\n  timestamp: timestamptz\\n  twitter:
        String\\n}\\n\\n# order by min() on columns of table \\\\\\\"users\\\\\\\"\\ninput
        users_min_order_by {\\n  name: order_by\\n  rocket: order_by\\n  timestamp:
        order_by\\n  twitter: order_by\\n}\\n\\n# response of any mutation on the
        table \\\\\\\"users\\\\\\\"\\ntype users_mutation_response {\\n  # number
        of affected rows by the mutation\\n  affected_rows: Int!\\n  # data of the
        affected rows by the mutation\\n  returning: [users!]!\\n}\\n\\n# input type
        for inserting object relation for remote table \\\\\\\"users\\\\\\\"\\ninput
        users_obj_rel_insert_input {\\n  data: users_insert_input!\\n  on_conflict:
        users_on_conflict\\n}\\n\\n# on conflict condition type for table \\\\\\\"users\\\\\\\"\\ninput
        users_on_conflict {\\n  constraint: users_constraint!\\n  update_columns:
        [users_update_column!]!\\n}\\n\\n# ordering options when selecting data from
        \\\\\\\"users\\\\\\\"\\ninput users_order_by {\\n  id: order_by\\n  name:
        order_by\\n  rocket: order_by\\n  timestamp: order_by\\n  twitter: order_by\\n}\\n\\n#
        select columns of table \\\\\\\"users\\\\\\\"\\nenum users_select_column {\\n
        \ # column name\\n  id\\n  # column name\\n  name\\n  # column name\\n  rocket\\n
        \ # column name\\n  timestamp\\n  # column name\\n  twitter\\n}\\n\\n# input
        type for updating data in table \\\\\\\"users\\\\\\\"\\ninput users_set_input
        {\\n  id: uuid\\n  name: String\\n  rocket: String\\n  timestamp: timestamptz\\n
        \ twitter: String\\n}\\n\\n# update columns of table \\\\\\\"users\\\\\\\"\\nenum
        users_update_column {\\n  # column name\\n  id\\n  # column name\\n  name\\n
        \ # column name\\n  rocket\\n  # column name\\n  timestamp\\n  # column name\\n
        \ twitter\\n}\\n\\nscalar uuid\\n\\n# expression to compare columns of type
        uuid. All fields are combined with logical 'AND'.\\ninput uuid_comparison_exp
        {\\n  _eq: uuid\\n  _gt: uuid\\n  _gte: uuid\\n  _in: [uuid!]\\n  _is_null:
        Boolean\\n  _lt: uuid\\n  _lte: uuid\\n  _neq: uuid\\n  _nin: [uuid!]\\n}\\n\"\r\n
        \   }\r\n  }\r\n}"
    headers:
      cache-control:
      - no-cache
      content-length:
      - '22374'
      content-type:
      - application/json; charset=utf-8
      date:
      - Tue, 30 Aug 2022 20:58:20 GMT
      etag:
      - '"AAAAAADnozs="'
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      transfer-encoding:
      - chunked
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api schema list
      Connection:
      - keep-alive
      ParameterSetName:
      - -g -n --api-id
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas?api-version=2021-08-01
  response:
    body:
      string: "{\r\n  \"value\": [\r\n    {\r\n      \"id\": \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql\",\r\n
        \     \"type\": \"Microsoft.ApiManagement/service/apis/schemas\",\r\n      \"name\":
        \"graphql\",\r\n      \"properties\": {\r\n        \"contentType\": \"application/vnd.ms-azure-apim.graphql.schema\",\r\n
        \       \"document\": {\r\n          \"value\": \"schema {\\n  query: Query\\n
        \ mutation: Mutation\\n  subscription: Subscription\\n}\\n\\ntype Address
        {\\n  address: String\\n  city: String\\n  state: String\\n}\\n\\ntype Capsule
        {\\n  id: ID\\n  landings: Int\\n  missions: [CapsuleMission]\\n  original_launch:
        Date\\n  reuse_count: Int\\n  status: String\\n  type: String\\n  dragon:
        Dragon\\n}\\n\\ntype CapsuleMission {\\n  flight: Int\\n  name: String\\n}\\n\\ninput
        CapsulesFind {\\n  id: ID\\n  landings: Int\\n  mission: String\\n  original_launch:
        Date\\n  reuse_count: Int\\n  status: String\\n  type: String\\n}\\n\\ntype
        Core {\\n  asds_attempts: Int\\n  asds_landings: Int\\n  block: Int\\n  id:
        ID\\n  missions: [CapsuleMission]\\n  original_launch: Date\\n  reuse_count:
        Int\\n  rtls_attempts: Int\\n  rtls_landings: Int\\n  status: String\\n  water_landing:
        Boolean\\n}\\n\\ntype CoreMission {\\n  name: String\\n  flight: Int\\n}\\n\\ninput
        CoresFind {\\n  asds_attempts: Int\\n  asds_landings: Int\\n  block: Int\\n
        \ id: String\\n  missions: String\\n  original_launch: Date\\n  reuse_count:
        Int\\n  rtls_attempts: Int\\n  rtls_landings: Int\\n  status: String\\n  water_landing:
        Boolean\\n}\\n\\nscalar Date\\n\\ntype Distance {\\n  feet: Float\\n  meters:
        Float\\n}\\n\\ntype Dragon {\\n  active: Boolean\\n  crew_capacity: Int\\n
        \ description: String\\n  diameter: Distance\\n  dry_mass_kg: Int\\n  dry_mass_lb:
        Int\\n  first_flight: String\\n  heat_shield: DragonHeatShield\\n  height_w_trunk:
        Distance\\n  id: ID\\n  launch_payload_mass: Mass\\n  launch_payload_vol:
        Volume\\n  name: String\\n  orbit_duration_yr: Int\\n  pressurized_capsule:
        DragonPressurizedCapsule\\n  return_payload_mass: Mass\\n  return_payload_vol:
        Volume\\n  sidewall_angle_deg: Float\\n  thrusters: [DragonThrust]\\n  trunk:
        DragonTrunk\\n  type: String\\n  wikipedia: String\\n}\\n\\ntype DragonHeatShield
        {\\n  dev_partner: String\\n  material: String\\n  size_meters: Float\\n  temp_degrees:
        Int\\n}\\n\\ntype DragonPressurizedCapsule {\\n  payload_volume: Volume\\n}\\n\\ntype
        DragonThrust {\\n  amount: Int\\n  fuel_1: String\\n  fuel_2: String\\n  pods:
        Int\\n  thrust: Force\\n  type: String\\n}\\n\\ntype DragonTrunk {\\n  cargo:
        DragonTrunkCargo\\n  trunk_volume: Volume\\n}\\n\\ntype DragonTrunkCargo {\\n
        \ solar_array: Int\\n  unpressurized_cargo: Boolean\\n}\\n\\ntype Force {\\n
        \ kN: Float\\n  lbf: Float\\n}\\n\\ntype HistoriesResult {\\n  result: Result\\n
        \ data: [History]\\n}\\n\\ntype History {\\n  details: String\\n  event_date_unix:
        Date\\n  event_date_utc: Date\\n  id: ID\\n  links: Link\\n  title: String\\n
        \ flight: Launch\\n}\\n\\ninput HistoryFind {\\n  end: Date\\n  flight_number:
        Int\\n  id: ID\\n  start: Date\\n}\\n\\ntype Info {\\n  ceo: String\\n  coo:
        String\\n  cto_propulsion: String\\n  cto: String\\n  employees: Int\\n  founded:
        Int\\n  founder: String\\n  headquarters: Address\\n  launch_sites: Int\\n
        \ links: InfoLinks\\n  name: String\\n  summary: String\\n  test_sites: Int\\n
        \ valuation: Float\\n  vehicles: Int\\n}\\n\\ntype InfoLinks {\\n  elon_twitter:
        String\\n  flickr: String\\n  twitter: String\\n  website: String\\n}\\n\\ntype
        Landpad {\\n  attempted_landings: String\\n  details: String\\n  full_name:
        String\\n  id: ID\\n  landing_type: String\\n  location: Location\\n  status:
        String\\n  successful_landings: String\\n  wikipedia: String\\n}\\n\\ntype
        Launch {\\n  details: String\\n  id: ID\\n  is_tentative: Boolean\\n  launch_date_local:
        Date\\n  launch_date_unix: Date\\n  launch_date_utc: Date\\n  launch_site:
        LaunchSite\\n  launch_success: Boolean\\n  launch_year: String\\n  links:
        LaunchLinks\\n  mission_id: [String]\\n  mission_name: String\\n  rocket:
        LaunchRocket\\n  static_fire_date_unix: Date\\n  static_fire_date_utc: Date\\n
        \ telemetry: LaunchTelemetry\\n  tentative_max_precision: String\\n  upcoming:
        Boolean\\n  ships: [Ship]\\n}\\n\\ninput LaunchFind {\\n  apoapsis_km: Float\\n
        \ block: Int\\n  cap_serial: String\\n  capsule_reuse: String\\n  core_flight:
        Int\\n  core_reuse: String\\n  core_serial: String\\n  customer: String\\n
        \ eccentricity: Float\\n  end: Date\\n  epoch: Date\\n  fairings_recovered:
        String\\n  fairings_recovery_attempt: String\\n  fairings_reuse: String\\n
        \ fairings_reused: String\\n  fairings_ship: String\\n  gridfins: String\\n
        \ id: ID\\n  inclination_deg: Float\\n  land_success: String\\n  landing_intent:
        String\\n  landing_type: String\\n  landing_vehicle: String\\n  launch_date_local:
        Date\\n  launch_date_utc: Date\\n  launch_success: String\\n  launch_year:
        String\\n  legs: String\\n  lifespan_years: Float\\n  longitude: Float\\n
        \ manufacturer: String\\n  mean_motion: Float\\n  mission_id: String\\n  mission_name:
        String\\n  nationality: String\\n  norad_id: Int\\n  orbit: String\\n  payload_id:
        String\\n  payload_type: String\\n  periapsis_km: Float\\n  period_min: Float\\n
        \ raan: Float\\n  reference_system: String\\n  regime: String\\n  reused:
        String\\n  rocket_id: String\\n  rocket_name: String\\n  rocket_type: String\\n
        \ second_stage_block: String\\n  semi_major_axis_km: Float\\n  ship: String\\n
        \ side_core1_reuse: String\\n  side_core2_reuse: String\\n  site_id: String\\n
        \ site_name_long: String\\n  site_name: String\\n  start: Date\\n  tbd: String\\n
        \ tentative_max_precision: String\\n  tentative: String\\n}\\n\\ntype LaunchLinks
        {\\n  article_link: String\\n  flickr_images: [String]\\n  mission_patch_small:
        String\\n  mission_patch: String\\n  presskit: String\\n  reddit_campaign:
        String\\n  reddit_launch: String\\n  reddit_media: String\\n  reddit_recovery:
        String\\n  video_link: String\\n  wikipedia: String\\n}\\n\\ntype LaunchRocket
        {\\n  fairings: LaunchRocketFairings\\n  first_stage: LaunchRocketFirstStage\\n
        \ rocket_name: String\\n  rocket_type: String\\n  rocket: Rocket\\n  second_stage:
        LaunchRocketSecondStage\\n}\\n\\ntype LaunchRocketFairings {\\n  recovered:
        Boolean\\n  recovery_attempt: Boolean\\n  reused: Boolean\\n  ship: String\\n}\\n\\ntype
        LaunchRocketFirstStage {\\n  cores: [LaunchRocketFirstStageCore]\\n}\\n\\ntype
        LaunchRocketFirstStageCore {\\n  block: Int\\n  core: Core\\n  flight: Int\\n
        \ gridfins: Boolean\\n  land_success: Boolean\\n  landing_intent: Boolean\\n
        \ landing_type: String\\n  landing_vehicle: String\\n  legs: Boolean\\n  reused:
        Boolean\\n}\\n\\ntype LaunchRocketSecondStage {\\n  block: Int\\n  payloads:
        [Payload]\\n}\\n\\ntype LaunchSite {\\n  site_id: String\\n  site_name_long:
        String\\n  site_name: String\\n}\\n\\ntype LaunchTelemetry {\\n  flight_club:
        String\\n}\\n\\ntype LaunchesPastResult {\\n  result: Result\\n  data: [Launch]\\n}\\n\\ntype
        Launchpad {\\n  attempted_launches: Int\\n  details: String\\n  id: ID\\n
        \ location: Location\\n  name: String\\n  status: String\\n  successful_launches:
        Int\\n  vehicles_launched: [Rocket]\\n  wikipedia: String\\n}\\n\\ntype Link
        {\\n  article: String\\n  reddit: String\\n  wikipedia: String\\n}\\n\\ntype
        Location {\\n  latitude: Float\\n  longitude: Float\\n  name: String\\n  region:
        String\\n}\\n\\ntype Mass {\\n  kg: Int\\n  lb: Int\\n}\\n\\ntype Mission
        {\\n  description: String\\n  id: ID\\n  manufacturers: [String]\\n  name:
        String\\n  twitter: String\\n  website: String\\n  wikipedia: String\\n  payloads:
        [Payload]\\n}\\n\\ntype MissionResult {\\n  result: Result\\n  data: [Mission]\\n}\\n\\ninput
        MissionsFind {\\n  id: ID\\n  manufacturer: String\\n  name: String\\n  payload_id:
        String\\n}\\n\\ntype Mutation {\\n  # delete data from the table: \\\\\\\"users\\\\\\\"\\n
        \ delete_users(\\n    # filter the rows which have to be deleted\\n    where:
        users_bool_exp!\\n  ): users_mutation_response\\n  # insert data into the
        table: \\\\\\\"users\\\\\\\"\\n  insert_users(\\n    # the rows to be inserted\\n
        \   objects: [users_insert_input!]!\\n    # on conflict condition\\n    on_conflict:
        users_on_conflict\\n  ): users_mutation_response\\n  # update data of the
        table: \\\\\\\"users\\\\\\\"\\n  update_users(\\n    # sets the columns of
        the filtered rows to the given values\\n    _set: users_set_input\\n    #
        filter the rows which have to be updated\\n    where: users_bool_exp!\\n  ):
        users_mutation_response\\n}\\n\\nscalar ObjectID\\n\\ntype Payload {\\n  customers:
        [String]\\n  id: ID\\n  manufacturer: String\\n  nationality: String\\n  norad_id:
        [Int]\\n  orbit_params: PayloadOrbitParams\\n  orbit: String\\n  payload_mass_kg:
        Float\\n  payload_mass_lbs: Float\\n  payload_type: String\\n  reused: Boolean\\n}\\n\\ntype
        PayloadOrbitParams {\\n  apoapsis_km: Float\\n  arg_of_pericenter: Float\\n
        \ eccentricity: Float\\n  epoch: Date\\n  inclination_deg: Float\\n  lifespan_years:
        Float\\n  longitude: Float\\n  mean_anomaly: Float\\n  mean_motion: Float\\n
        \ periapsis_km: Float\\n  period_min: Float\\n  raan: Float\\n  reference_system:
        String\\n  regime: String\\n  semi_major_axis_km: Float\\n}\\n\\ninput PayloadsFind
        {\\n  apoapsis_km: Float\\n  customer: String\\n  eccentricity: Float\\n  epoch:
        Date\\n  inclination_deg: Float\\n  lifespan_years: Float\\n  longitude: Float\\n
        \ manufacturer: String\\n  mean_motion: Float\\n  nationality: String\\n  norad_id:
        Int\\n  orbit: String\\n  payload_id: ID\\n  payload_type: String\\n  periapsis_km:
        Float\\n  period_min: Float\\n  raan: Float\\n  reference_system: String\\n
        \ regime: String\\n  reused: Boolean\\n  semi_major_axis_km: Float\\n}\\n\\ntype
        Query {\\n  # fetch data from the table: \\\\\\\"users\\\\\\\"\\n  users(\\n
        \   # distinct select on columns\\n    distinct_on: [users_select_column!]\\n
        \   # limit the nuber of rows returned\\n    limit: Int\\n    # skip the first
        n rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by
        one or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): [users!]!\\n  # fetch aggregated
        fields from the table: \\\\\\\"users\\\\\\\"\\n  users_aggregate(\\n    #
        distinct select on columns\\n    distinct_on: [users_select_column!]\\n    #
        limit the nuber of rows returned\\n    limit: Int\\n    # skip the first n
        rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by one
        or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): users_aggregate!\\n  # fetch data
        from the table: \\\\\\\"users\\\\\\\" using primary key columns\\n  users_by_pk(\\n
        \   id: uuid!\\n  ): users\\n  capsules(\\n    find: CapsulesFind\\n    limit:
        Int\\n    offset: Int\\n    order: String\\n    sort: String\\n  ): [Capsule]\\n
        \ capsulesPast(\\n    find: CapsulesFind\\n    limit: Int\\n    offset: Int\\n
        \   order: String\\n    sort: String\\n  ): [Capsule]\\n  capsulesUpcoming(\\n
        \   find: CapsulesFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Capsule]\\n  capsule(\\n    id: ID!\\n  ): Capsule\\n
        \ company: Info\\n  cores(\\n    find: CoresFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): [Core]\\n  coresPast(\\n
        \   find: CoresFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Core]\\n  coresUpcoming(\\n    find: CoresFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Core]\\n  core(\\n    id: ID!\\n  ): Core\\n  dragons(\\n    limit:
        Int\\n    offset: Int\\n  ): [Dragon]\\n  dragon(\\n    id: ID!\\n  ): Dragon\\n
        \ histories(\\n    find: HistoryFind\\n    limit: Int\\n    offset: Int\\n
        \   order: String\\n    sort: String\\n  ): [History]\\n  historiesResult(\\n
        \   find: HistoryFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): HistoriesResult\\n  history(\\n    id: ID!\\n  ):
        History\\n  landpads(\\n    limit: Int\\n    offset: Int\\n  ): [Landpad]\\n
        \ landpad(\\n    id: ID!\\n  ): Landpad\\n  launches(\\n    find: LaunchFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Launch]\\n  launchesPast(\\n    find: LaunchFind\\n    limit: Int\\n
        \   offset: Int\\n    order: String\\n    sort: String\\n  ): [Launch]\\n
        \ launchesPastResult(\\n    find: LaunchFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): LaunchesPastResult\\n  launchesUpcoming(\\n
        \   find: LaunchFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Launch]\\n  launch(\\n    id: ID!\\n  ): Launch\\n
        \ launchLatest(\\n    offset: Int\\n  ): Launch\\n  launchNext(\\n    offset:
        Int\\n  ): Launch\\n  launchpads(\\n    limit: Int\\n    offset: Int\\n  ):
        [Launchpad]\\n  launchpad(\\n    id: ID!\\n  ): Launchpad\\n  missions(\\n
        \   find: MissionsFind\\n    limit: Int\\n    offset: Int\\n  ): [Mission]\\n
        \ missionsResult(\\n    find: MissionsFind\\n    limit: Int\\n    offset:
        Int\\n  ): MissionResult\\n  mission(\\n    id: ID!\\n  ): Mission\\n  payloads(\\n
        \   find: PayloadsFind\\n    limit: Int\\n    offset: Int\\n    order: String\\n
        \   sort: String\\n  ): [Payload]\\n  payload(\\n    id: ID!\\n  ): Payload\\n
        \ roadster: Roadster\\n  rockets(\\n    limit: Int\\n    offset: Int\\n  ):
        [Rocket]\\n  rocketsResult(\\n    limit: Int\\n    offset: Int\\n  ): RocketsResult\\n
        \ rocket(\\n    id: ID!\\n  ): Rocket\\n  ships(\\n    find: ShipsFind\\n
        \   limit: Int\\n    offset: Int\\n    order: String\\n    sort: String\\n
        \ ): [Ship]\\n  shipsResult(\\n    find: ShipsFind\\n    limit: Int\\n    offset:
        Int\\n    order: String\\n    sort: String\\n  ): ShipsResult\\n  ship(\\n
        \   id: ID!\\n  ): Ship\\n}\\n\\ntype Result {\\n  totalCount: Int\\n}\\n\\ntype
        Roadster {\\n  apoapsis_au: Float\\n  details: String\\n  earth_distance_km:
        Float\\n  earth_distance_mi: Float\\n  eccentricity: Float\\n  epoch_jd: Float\\n
        \ inclination: Float\\n  launch_date_unix: Date\\n  launch_date_utc: Date\\n
        \ launch_mass_kg: Int\\n  launch_mass_lbs: Int\\n  longitude: Float\\n  mars_distance_km:
        Float\\n  mars_distance_mi: Float\\n  name: String\\n  norad_id: Int\\n  orbit_type:
        Float\\n  periapsis_arg: Float\\n  periapsis_au: Float\\n  period_days: Float\\n
        \ semi_major_axis_au: Float\\n  speed_kph: Float\\n  speed_mph: Float\\n  wikipedia:
        String\\n}\\n\\ntype Rocket {\\n  active: Boolean\\n  boosters: Int\\n  company:
        String\\n  cost_per_launch: Int\\n  country: String\\n  description: String\\n
        \ diameter: Distance\\n  engines: RocketEngines\\n  first_flight: Date\\n
        \ first_stage: RocketFirstStage\\n  height: Distance\\n  id: ID\\n  landing_legs:
        RocketLandingLegs\\n  mass: Mass\\n  name: String\\n  payload_weights: [RocketPayloadWeight]\\n
        \ second_stage: RocketSecondStage\\n  stages: Int\\n  success_rate_pct: Int\\n
        \ type: String\\n  wikipedia: String\\n}\\n\\ntype RocketEngines {\\n  number:
        Int\\n  type: String\\n  version: String\\n  layout: String\\n  engine_loss_max:
        String\\n  propellant_1: String\\n  propellant_2: String\\n  thrust_sea_level:
        Force\\n  thrust_vacuum: Force\\n  thrust_to_weight: Float\\n}\\n\\ntype RocketFirstStage
        {\\n  burn_time_sec: Int\\n  engines: Int\\n  fuel_amount_tons: Float\\n  reusable:
        Boolean\\n  thrust_sea_level: Force\\n  thrust_vacuum: Force\\n}\\n\\ntype
        RocketLandingLegs {\\n  number: Int\\n  material: String\\n}\\n\\ntype RocketPayloadWeight
        {\\n  id: String\\n  kg: Int\\n  lb: Int\\n  name: String\\n}\\n\\ntype RocketSecondStage
        {\\n  burn_time_sec: Int\\n  engines: Int\\n  fuel_amount_tons: Float\\n  payloads:
        RocketSecondStagePayloads\\n  thrust: Force\\n}\\n\\ntype RocketSecondStagePayloadCompositeFairing
        {\\n  height: Distance\\n  diameter: Distance\\n}\\n\\ntype RocketSecondStagePayloads
        {\\n  option_1: String\\n  composite_fairing: RocketSecondStagePayloadCompositeFairing\\n}\\n\\ntype
        RocketsResult {\\n  result: Result\\n  data: [Rocket]\\n}\\n\\ntype Ship {\\n
        \ abs: Int\\n  active: Boolean\\n  attempted_landings: Int\\n  class: Int\\n
        \ course_deg: Int\\n  home_port: String\\n  id: ID\\n  image: String\\n  imo:
        Int\\n  missions: [ShipMission]\\n  mmsi: Int\\n  model: String\\n  name:
        String\\n  position: ShipLocation\\n  roles: [String]\\n  speed_kn: Float\\n
        \ status: String\\n  successful_landings: Int\\n  type: String\\n  url: String\\n
        \ weight_kg: Int\\n  weight_lbs: Int\\n  year_built: Int\\n}\\n\\ntype ShipLocation
        {\\n  latitude: Float\\n  longitude: Float\\n}\\n\\ntype ShipMission {\\n
        \ flight: String\\n  name: String\\n}\\n\\ninput ShipsFind {\\n  id: ID\\n
        \ name: String\\n  model: String\\n  type: String\\n  role: String\\n  active:
        Boolean\\n  imo: Int\\n  mmsi: Int\\n  abs: Int\\n  class: Int\\n  weight_lbs:
        Int\\n  weight_kg: Int\\n  year_built: Int\\n  home_port: String\\n  status:
        String\\n  speed_kn: Int\\n  course_deg: Int\\n  latitude: Float\\n  longitude:
        Float\\n  successful_landings: Int\\n  attempted_landings: Int\\n  mission:
        String\\n}\\n\\ntype ShipsResult {\\n  result: Result\\n  data: [Ship]\\n}\\n\\n#
        expression to compare columns of type String. All fields are combined with
        logical 'AND'.\\ninput String_comparison_exp {\\n  _eq: String\\n  _gt: String\\n
        \ _gte: String\\n  _ilike: String\\n  _in: [String!]\\n  _is_null: Boolean\\n
        \ _like: String\\n  _lt: String\\n  _lte: String\\n  _neq: String\\n  _nilike:
        String\\n  _nin: [String!]\\n  _nlike: String\\n  _nsimilar: String\\n  _similar:
        String\\n}\\n\\ntype Subscription {\\n  # fetch data from the table: \\\\\\\"users\\\\\\\"\\n
        \ users(\\n    # distinct select on columns\\n    distinct_on: [users_select_column!]\\n
        \   # limit the nuber of rows returned\\n    limit: Int\\n    # skip the first
        n rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by
        one or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): [users!]!\\n  # fetch aggregated
        fields from the table: \\\\\\\"users\\\\\\\"\\n  users_aggregate(\\n    #
        distinct select on columns\\n    distinct_on: [users_select_column!]\\n    #
        limit the nuber of rows returned\\n    limit: Int\\n    # skip the first n
        rows. Use only with order_by\\n    offset: Int\\n    # sort the rows by one
        or more columns\\n    order_by: [users_order_by!]\\n    # filter the rows
        returned\\n    where: users_bool_exp\\n  ): users_aggregate!\\n  # fetch data
        from the table: \\\\\\\"users\\\\\\\" using primary key columns\\n  users_by_pk(\\n
        \   id: uuid!\\n  ): users\\n}\\n\\ntype Volume {\\n  cubic_feet: Int\\n  cubic_meters:
        Int\\n}\\n\\n# conflict action\\nenum conflict_action {\\n  # ignore the insert
        on this row\\n  ignore\\n  # update the row with the given values\\n  update\\n}\\n\\n#
        column ordering options\\nenum order_by {\\n  # in the ascending order, nulls
        last\\n  asc\\n  # in the ascending order, nulls first\\n  asc_nulls_first\\n
        \ # in the ascending order, nulls last\\n  asc_nulls_last\\n  # in the descending
        order, nulls first\\n  desc\\n  # in the descending order, nulls first\\n
        \ desc_nulls_first\\n  # in the descending order, nulls last\\n  desc_nulls_last\\n}\\n\\nscalar
        timestamptz\\n\\n# expression to compare columns of type timestamptz. All
        fields are combined with logical 'AND'.\\ninput timestamptz_comparison_exp
        {\\n  _eq: timestamptz\\n  _gt: timestamptz\\n  _gte: timestamptz\\n  _in:
        [timestamptz!]\\n  _is_null: Boolean\\n  _lt: timestamptz\\n  _lte: timestamptz\\n
        \ _neq: timestamptz\\n  _nin: [timestamptz!]\\n}\\n\\n# columns and relationships
        of \\\\\\\"users\\\\\\\"\\ntype users {\\n  id: uuid!\\n  name: String\\n
        \ rocket: String\\n  timestamp: timestamptz!\\n  twitter: String\\n}\\n\\n#
        aggregated selection of \\\\\\\"users\\\\\\\"\\ntype users_aggregate {\\n
        \ aggregate: users_aggregate_fields\\n  nodes: [users!]!\\n}\\n\\n# aggregate
        fields of \\\\\\\"users\\\\\\\"\\ntype users_aggregate_fields {\\n  count(\\n
        \   columns: [users_select_column!]\\n    distinct: Boolean\\n  ): Int\\n
        \ max: users_max_fields\\n  min: users_min_fields\\n}\\n\\n# order by aggregate
        values of table \\\\\\\"users\\\\\\\"\\ninput users_aggregate_order_by {\\n
        \ count: order_by\\n  max: users_max_order_by\\n  min: users_min_order_by\\n}\\n\\n#
        input type for inserting array relation for remote table \\\\\\\"users\\\\\\\"\\ninput
        users_arr_rel_insert_input {\\n  data: [users_insert_input!]!\\n  on_conflict:
        users_on_conflict\\n}\\n\\n# Boolean expression to filter rows from the table
        \\\\\\\"users\\\\\\\". All fields are combined with a logical 'AND'.\\ninput
        users_bool_exp {\\n  _and: [users_bool_exp]\\n  _not: users_bool_exp\\n  _or:
        [users_bool_exp]\\n  id: uuid_comparison_exp\\n  name: String_comparison_exp\\n
        \ rocket: String_comparison_exp\\n  timestamp: timestamptz_comparison_exp\\n
        \ twitter: String_comparison_exp\\n}\\n\\n# unique or primary key constraints
        on table \\\\\\\"users\\\\\\\"\\nenum users_constraint {\\n  # unique or primary
        key constraint\\n  users_pkey\\n}\\n\\n# input type for inserting data into
        table \\\\\\\"users\\\\\\\"\\ninput users_insert_input {\\n  id: uuid\\n  name:
        String\\n  rocket: String\\n  timestamp: timestamptz\\n  twitter: String\\n}\\n\\n#
        aggregate max on columns\\ntype users_max_fields {\\n  name: String\\n  rocket:
        String\\n  timestamp: timestamptz\\n  twitter: String\\n}\\n\\n# order by
        max() on columns of table \\\\\\\"users\\\\\\\"\\ninput users_max_order_by
        {\\n  name: order_by\\n  rocket: order_by\\n  timestamp: order_by\\n  twitter:
        order_by\\n}\\n\\n# aggregate min on columns\\ntype users_min_fields {\\n
        \ name: String\\n  rocket: String\\n  timestamp: timestamptz\\n  twitter:
        String\\n}\\n\\n# order by min() on columns of table \\\\\\\"users\\\\\\\"\\ninput
        users_min_order_by {\\n  name: order_by\\n  rocket: order_by\\n  timestamp:
        order_by\\n  twitter: order_by\\n}\\n\\n# response of any mutation on the
        table \\\\\\\"users\\\\\\\"\\ntype users_mutation_response {\\n  # number
        of affected rows by the mutation\\n  affected_rows: Int!\\n  # data of the
        affected rows by the mutation\\n  returning: [users!]!\\n}\\n\\n# input type
        for inserting object relation for remote table \\\\\\\"users\\\\\\\"\\ninput
        users_obj_rel_insert_input {\\n  data: users_insert_input!\\n  on_conflict:
        users_on_conflict\\n}\\n\\n# on conflict condition type for table \\\\\\\"users\\\\\\\"\\ninput
        users_on_conflict {\\n  constraint: users_constraint!\\n  update_columns:
        [users_update_column!]!\\n}\\n\\n# ordering options when selecting data from
        \\\\\\\"users\\\\\\\"\\ninput users_order_by {\\n  id: order_by\\n  name:
        order_by\\n  rocket: order_by\\n  timestamp: order_by\\n  twitter: order_by\\n}\\n\\n#
        select columns of table \\\\\\\"users\\\\\\\"\\nenum users_select_column {\\n
        \ # column name\\n  id\\n  # column name\\n  name\\n  # column name\\n  rocket\\n
        \ # column name\\n  timestamp\\n  # column name\\n  twitter\\n}\\n\\n# input
        type for updating data in table \\\\\\\"users\\\\\\\"\\ninput users_set_input
        {\\n  id: uuid\\n  name: String\\n  rocket: String\\n  timestamp: timestamptz\\n
        \ twitter: String\\n}\\n\\n# update columns of table \\\\\\\"users\\\\\\\"\\nenum
        users_update_column {\\n  # column name\\n  id\\n  # column name\\n  name\\n
        \ # column name\\n  rocket\\n  # column name\\n  timestamp\\n  # column name\\n
        \ twitter\\n}\\n\\nscalar uuid\\n\\n# expression to compare columns of type
        uuid. All fields are combined with logical 'AND'.\\ninput uuid_comparison_exp
        {\\n  _eq: uuid\\n  _gt: uuid\\n  _gte: uuid\\n  _in: [uuid!]\\n  _is_null:
        Boolean\\n  _lt: uuid\\n  _lte: uuid\\n  _neq: uuid\\n  _nin: [uuid!]\\n}\\n\"\r\n
        \       }\r\n      }\r\n    }\r\n  ],\r\n  \"count\": 1\r\n}"
    headers:
      cache-control:
      - no-cache
      content-length:
      - '22458'
      content-type:
      - application/json; charset=utf-8
      date:
      - Tue, 30 Aug 2022 20:58:21 GMT
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      transfer-encoding:
      - chunked
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api schema delete
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      If-Match:
      - '*'
      ParameterSetName:
      - -g --service-name --api-id --schema-id --yes
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: DELETE
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas/graphql?api-version=2021-08-01
  response:
    body:
      string: ''
    headers:
      cache-control:
      - no-cache
      content-length:
      - '0'
      date:
      - Tue, 30 Aug 2022 20:58:22 GMT
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      x-content-type-options:
      - nosniff
      x-ms-ratelimit-remaining-subscription-deletes:
      - '14999'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - apim api schema list
      Connection:
      - keep-alive
      ParameterSetName:
      - -g -n --api-id
      User-Agent:
      - AZURECLI/2.39.0 azsdk-python-mgmt-apimanagement/3.0.0 Python/3.10.5 (macOS-12.5.1-x86_64-i386-64bit)
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cli_test_apim_api_schema-000002/providers/Microsoft.ApiManagement/service/clitest000003/apis/gr-api000001/schemas?api-version=2021-08-01
  response:
    body:
      string: "{\r\n  \"value\": [],\r\n  \"count\": 0\r\n}"
    headers:
      cache-control:
      - no-cache
      content-length:
      - '34'
      content-type:
      - application/json; charset=utf-8
      date:
      - Tue, 30 Aug 2022 20:58:23 GMT
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-HTTPAPI/2.0
      - Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      transfer-encoding:
      - chunked
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
    status:
      code: 200
      message: OK
version: 1
