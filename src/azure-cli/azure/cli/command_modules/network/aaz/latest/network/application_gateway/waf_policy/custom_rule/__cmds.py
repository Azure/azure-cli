# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network application-gateway waf-policy custom-rule",
)
class __CMDGroup(AAZCommandGroup):
    """Manage application gateway web application firewall (WAF) policy custom rules.
    """
    pass


@register_command(
    "network application-gateway waf-policy custom-rule create",
)
class Create(AAZCommand):
    """Create an application gateway WAF policy custom rule.

    :example: Create an application gateway WAF policy custom rule.
        az network application-gateway waf-policy custom-rule create --action Allow --name MyWafPolicyRule --policy-name MyPolicy --priority 500 --resource-group MyResourceGroup --rule-type MatchRule
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.action = AAZStrArg(
            options=["--action"],
            help="Action to take.",
            required=True,
            enum={"Allow": "Allow", "Block": "Block", "Log": "Log"},
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.priority = AAZIntArg(
            options=["--priority"],
            help="Rule priority. Lower values are evaluated prior to higher values.",
            required=True,
        )
        _args_schema.rule_type = AAZStrArg(
            options=["--rule-type"],
            help="Type of rule.",
            required=True,
            enum={"Invalid": "Invalid", "MatchRule": "MatchRule"},
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.match_conditions = AAZListArg(
            options=["--match-conditions"],
            arg_group="Properties",
            help="List of match conditions.",
            required=True,
            default=[],
        )

        match_conditions = cls._args_schema.match_conditions
        match_conditions.Element = AAZObjectArg()

        _element = cls._args_schema.match_conditions.Element
        _element.values = AAZListArg(
            options=["values"],
            help="Space-separated list of values to match.",
        )
        _element.variables = AAZListArg(
            options=["variables"],
            help="Space-separated list of variables to use when matching. Variable values: RemoteAddr, RequestMethod, QueryString, PostArgs, RequestUri, RequestHeaders, RequestBody, RequestCookies.",
            required=True,
        )
        _element.negate = AAZBoolArg(
            options=["negate"],
            help="Match the negative of the condition.",
        )
        _element.operator = AAZStrArg(
            options=["operator"],
            help="Operator for matching.",
            required=True,
            enum={"Any": "Any", "BeginsWith": "BeginsWith", "Contains": "Contains", "EndsWith": "EndsWith", "Equal": "Equal", "GeoMatch": "GeoMatch", "GreaterThan": "GreaterThan", "GreaterThanOrEqual": "GreaterThanOrEqual", "IPMatch": "IPMatch", "LessThan": "LessThan", "LessThanOrEqual": "LessThanOrEqual", "Regex": "Regex"},
        )
        _element.transforms = AAZListArg(
            options=["transforms"],
            help="Space-separated list of transforms to apply when matching. Allowed values: HtmlEntityDecode, Uppercase, Lowercase, RemoveNulls, Trim, UrlDecode, UrlEncode.",
        )

        values = cls._args_schema.match_conditions.Element.values
        values.Element = AAZStrArg()

        variables = cls._args_schema.match_conditions.Element.variables
        variables.Element = AAZObjectArg()

        _element = cls._args_schema.match_conditions.Element.variables.Element
        _element.selector = AAZStrArg(
            options=["selector"],
            help="The selector of match variable.",
        )
        _element.variable_name = AAZStrArg(
            options=["variable-name"],
            help="Match Variable.",
            required=True,
            enum={"PostArgs": "PostArgs", "QueryString": "QueryString", "RemoteAddr": "RemoteAddr", "RequestBody": "RequestBody", "RequestCookies": "RequestCookies", "RequestHeaders": "RequestHeaders", "RequestMethod": "RequestMethod", "RequestUri": "RequestUri"},
        )

        transforms = cls._args_schema.match_conditions.Element.transforms
        transforms.Element = AAZStrArg(
            enum={"HtmlEntityDecode": "HtmlEntityDecode", "Lowercase": "Lowercase", "RemoveNulls": "RemoveNulls", "Trim": "Trim", "Uppercase": "Uppercase", "UrlDecode": "UrlDecode", "UrlEncode": "UrlEncode"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        self.WebApplicationFirewallPoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _CreateHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class WebApplicationFirewallPoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _CreateHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("matchConditions", AAZListType, ".match_conditions", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("priority", AAZIntType, ".priority", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("ruleType", AAZStrType, ".rule_type", typ_kwargs={"flags": {"required": True}})

            match_conditions = _builder.get(".matchConditions")
            if match_conditions is not None:
                match_conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".matchConditions[]")
            if _elements is not None:
                _elements.set_prop("matchValues", AAZListType, ".values")
                _elements.set_prop("matchVariables", AAZListType, ".variables", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("negationConditon", AAZBoolType, ".negate")
                _elements.set_prop("operator", AAZStrType, ".operator", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("transforms", AAZListType, ".transforms")

            match_values = _builder.get(".matchConditions[].matchValues")
            if match_values is not None:
                match_values.set_elements(AAZStrType, ".")

            match_variables = _builder.get(".matchConditions[].matchVariables")
            if match_variables is not None:
                match_variables.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".matchConditions[].matchVariables[]")
            if _elements is not None:
                _elements.set_prop("selector", AAZStrType, ".selector")
                _elements.set_prop("variableName", AAZStrType, ".variable_name", typ_kwargs={"flags": {"required": True}})

            transforms = _builder.get(".matchConditions[].transforms")
            if transforms is not None:
                transforms.set_elements(AAZStrType, ".")

            return _instance_value


@register_command(
    "network application-gateway waf-policy custom-rule delete",
)
class Delete(AAZCommand):
    """Delete an application gateway WAF policy custom rule.

    :example: Delete an application gateway WAF policy custom rule.
        az network application-gateway waf-policy custom-rule delete --name MyWafPolicyRule --policy-name MyPolicy --resource-group MyResourceGroup --subscription MySubscription
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        self.WebApplicationFirewallPoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _DeleteHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class WebApplicationFirewallPoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _DeleteHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


@register_command(
    "network application-gateway waf-policy custom-rule list",
)
class List(AAZCommand):
    """List application gateway WAF policy custom rules.

    :example: List application gateway WAF policy custom rules.
        az network application-gateway waf-policy custom-rule list --policy-name MyPolicy --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.properties.customRules

        def _set(self, value):
            result = self.ctx.vars.instance
            result.properties.customRules = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ListHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway waf-policy custom-rule show",
)
class Show(AAZCommand):
    """Get the details of an application gateway WAF policy custom rule.

    :example: Get the details of an application gateway WAF policy custom rule.
        az network application-gateway waf-policy custom-rule show --name MyWAFPolicyRule --policy-name MyPolicy --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway waf-policy custom-rule update",
)
class Update(AAZCommand):
    """Update an application gateway WAF policy custom rule.

    :example: Update an application gateway WAF policy custom rule.
        az network application-gateway waf-policy custom-rule update --action Allow --name MyWAFPolicyRule --policy-name MyPolicy --priority 500 --resource-group MyResourceGroup --rule-type MatchRule
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[]"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.action = AAZStrArg(
            options=["--action"],
            help="Action to take.",
            enum={"Allow": "Allow", "Block": "Block", "Log": "Log"},
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.priority = AAZIntArg(
            options=["--priority"],
            help="Rule priority. Lower values are evaluated prior to higher values.",
        )
        _args_schema.rule_type = AAZStrArg(
            options=["--rule-type"],
            help="Type of rule.",
            enum={"Invalid": "Invalid", "MatchRule": "MatchRule"},
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.match_conditions = AAZListArg(
            options=["--match-conditions"],
            arg_group="Properties",
            help="List of match conditions.",
        )

        match_conditions = cls._args_schema.match_conditions
        match_conditions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.match_conditions.Element
        _element.values = AAZListArg(
            options=["values"],
            help="Space-separated list of values to match.",
            nullable=True,
        )
        _element.variables = AAZListArg(
            options=["variables"],
            help="Space-separated list of variables to use when matching. Variable values: RemoteAddr, RequestMethod, QueryString, PostArgs, RequestUri, RequestHeaders, RequestBody, RequestCookies.",
        )
        _element.negate = AAZBoolArg(
            options=["negate"],
            help="Match the negative of the condition.",
            nullable=True,
        )
        _element.operator = AAZStrArg(
            options=["operator"],
            help="Operator for matching.",
            enum={"Any": "Any", "BeginsWith": "BeginsWith", "Contains": "Contains", "EndsWith": "EndsWith", "Equal": "Equal", "GeoMatch": "GeoMatch", "GreaterThan": "GreaterThan", "GreaterThanOrEqual": "GreaterThanOrEqual", "IPMatch": "IPMatch", "LessThan": "LessThan", "LessThanOrEqual": "LessThanOrEqual", "Regex": "Regex"},
        )
        _element.transforms = AAZListArg(
            options=["transforms"],
            help="Space-separated list of transforms to apply when matching. Allowed values: HtmlEntityDecode, Uppercase, Lowercase, RemoveNulls, Trim, UrlDecode, UrlEncode.",
            nullable=True,
        )

        values = cls._args_schema.match_conditions.Element.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        variables = cls._args_schema.match_conditions.Element.variables
        variables.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.match_conditions.Element.variables.Element
        _element.selector = AAZStrArg(
            options=["selector"],
            help="The selector of match variable.",
            nullable=True,
        )
        _element.variable_name = AAZStrArg(
            options=["variable-name"],
            help="Match Variable.",
            enum={"PostArgs": "PostArgs", "QueryString": "QueryString", "RemoteAddr": "RemoteAddr", "RequestBody": "RequestBody", "RequestCookies": "RequestCookies", "RequestHeaders": "RequestHeaders", "RequestMethod": "RequestMethod", "RequestUri": "RequestUri"},
        )

        transforms = cls._args_schema.match_conditions.Element.transforms
        transforms.Element = AAZStrArg(
            nullable=True,
            enum={"HtmlEntityDecode": "HtmlEntityDecode", "Lowercase": "Lowercase", "RemoveNulls": "RemoveNulls", "Trim": "Trim", "Uppercase": "Uppercase", "UrlDecode": "UrlDecode", "UrlEncode": "UrlEncode"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.selectors.subresource.required())
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.selectors.subresource.required())
        self.WebApplicationFirewallPoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class WebApplicationFirewallPoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.selectors.subresource.required())

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("matchConditions", AAZListType, ".match_conditions", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("priority", AAZIntType, ".priority", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("ruleType", AAZStrType, ".rule_type", typ_kwargs={"flags": {"required": True}})

            match_conditions = _builder.get(".matchConditions")
            if match_conditions is not None:
                match_conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".matchConditions[]")
            if _elements is not None:
                _elements.set_prop("matchValues", AAZListType, ".values")
                _elements.set_prop("matchVariables", AAZListType, ".variables", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("negationConditon", AAZBoolType, ".negate")
                _elements.set_prop("operator", AAZStrType, ".operator", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("transforms", AAZListType, ".transforms")

            match_values = _builder.get(".matchConditions[].matchValues")
            if match_values is not None:
                match_values.set_elements(AAZStrType, ".")

            match_variables = _builder.get(".matchConditions[].matchVariables")
            if match_variables is not None:
                match_variables.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".matchConditions[].matchVariables[]")
            if _elements is not None:
                _elements.set_prop("selector", AAZStrType, ".selector")
                _elements.set_prop("variableName", AAZStrType, ".variable_name", typ_kwargs={"flags": {"required": True}})

            transforms = _builder.get(".matchConditions[].transforms")
            if transforms is not None:
                transforms.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.selectors.subresource.required(),
                self.ctx.generic_update_args
            )


class _Helper:

    @staticmethod
    def _build_schema_web_application_firewall_policy_read(cls, _schema):
        if cls._schema_web_application_firewall_policy_read is not None:
            _schema.etag = cls._schema_web_application_firewall_policy_read.etag
            _schema.id = cls._schema_web_application_firewall_policy_read.id
            _schema.location = cls._schema_web_application_firewall_policy_read.location
            _schema.name = cls._schema_web_application_firewall_policy_read.name
            _schema.properties = cls._schema_web_application_firewall_policy_read.properties
            _schema.tags = cls._schema_web_application_firewall_policy_read.tags
            _schema.type = cls._schema_web_application_firewall_policy_read.type
            return

        cls._schema_web_application_firewall_policy_read = _schema_web_application_firewall_policy_read = AAZObjectType()

        web_application_firewall_policy_read = _schema_web_application_firewall_policy_read
        web_application_firewall_policy_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        web_application_firewall_policy_read.id = AAZStrType()
        web_application_firewall_policy_read.location = AAZStrType()
        web_application_firewall_policy_read.name = AAZStrType(
            flags={"read_only": True},
        )
        web_application_firewall_policy_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        web_application_firewall_policy_read.tags = AAZDictType()
        web_application_firewall_policy_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties
        properties.application_gateways = AAZListType(
            serialized_name="applicationGateways",
            flags={"read_only": True},
        )
        properties.custom_rules = AAZListType(
            serialized_name="customRules",
        )
        properties.http_listeners = AAZListType(
            serialized_name="httpListeners",
            flags={"read_only": True},
        )
        properties.managed_rules = AAZObjectType(
            serialized_name="managedRules",
            flags={"required": True},
        )
        properties.path_based_rules = AAZListType(
            serialized_name="pathBasedRules",
            flags={"read_only": True},
        )
        properties.policy_settings = AAZObjectType(
            serialized_name="policySettings",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.resource_state = AAZStrType(
            serialized_name="resourceState",
            flags={"read_only": True},
        )

        application_gateways = _schema_web_application_firewall_policy_read.properties.application_gateways
        application_gateways.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.identity = AAZObjectType()
        _element.location = AAZStrType()
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.tags = AAZDictType()
        _element.type = AAZStrType(
            flags={"read_only": True},
        )
        _element.zones = AAZListType()

        identity = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType()
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties
        properties.authentication_certificates = AAZListType(
            serialized_name="authenticationCertificates",
        )
        properties.autoscale_configuration = AAZObjectType(
            serialized_name="autoscaleConfiguration",
        )
        properties.backend_address_pools = AAZListType(
            serialized_name="backendAddressPools",
        )
        properties.backend_http_settings_collection = AAZListType(
            serialized_name="backendHttpSettingsCollection",
        )
        properties.backend_settings_collection = AAZListType(
            serialized_name="backendSettingsCollection",
        )
        properties.custom_error_configurations = AAZListType(
            serialized_name="customErrorConfigurations",
        )
        properties.enable_fips = AAZBoolType(
            serialized_name="enableFips",
        )
        properties.enable_http2 = AAZBoolType(
            serialized_name="enableHttp2",
        )
        properties.firewall_policy = AAZObjectType(
            serialized_name="firewallPolicy",
        )
        cls._build_schema_sub_resource_read(properties.firewall_policy)
        properties.force_firewall_policy_association = AAZBoolType(
            serialized_name="forceFirewallPolicyAssociation",
        )
        properties.frontend_ip_configurations = AAZListType(
            serialized_name="frontendIPConfigurations",
        )
        properties.frontend_ports = AAZListType(
            serialized_name="frontendPorts",
        )
        properties.gateway_ip_configurations = AAZListType(
            serialized_name="gatewayIPConfigurations",
        )
        properties.global_configuration = AAZObjectType(
            serialized_name="globalConfiguration",
        )
        properties.http_listeners = AAZListType(
            serialized_name="httpListeners",
        )
        properties.listeners = AAZListType()
        properties.load_distribution_policies = AAZListType(
            serialized_name="loadDistributionPolicies",
        )
        properties.operational_state = AAZStrType(
            serialized_name="operationalState",
            flags={"read_only": True},
        )
        properties.private_endpoint_connections = AAZListType(
            serialized_name="privateEndpointConnections",
            flags={"read_only": True},
        )
        properties.private_link_configurations = AAZListType(
            serialized_name="privateLinkConfigurations",
        )
        properties.probes = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.redirect_configurations = AAZListType(
            serialized_name="redirectConfigurations",
        )
        properties.request_routing_rules = AAZListType(
            serialized_name="requestRoutingRules",
        )
        properties.resource_guid = AAZStrType(
            serialized_name="resourceGuid",
            flags={"read_only": True},
        )
        properties.rewrite_rule_sets = AAZListType(
            serialized_name="rewriteRuleSets",
        )
        properties.routing_rules = AAZListType(
            serialized_name="routingRules",
        )
        properties.sku = AAZObjectType()
        properties.ssl_certificates = AAZListType(
            serialized_name="sslCertificates",
        )
        properties.ssl_policy = AAZObjectType(
            serialized_name="sslPolicy",
        )
        cls._build_schema_application_gateway_ssl_policy_read(properties.ssl_policy)
        properties.ssl_profiles = AAZListType(
            serialized_name="sslProfiles",
        )
        properties.trusted_client_certificates = AAZListType(
            serialized_name="trustedClientCertificates",
        )
        properties.trusted_root_certificates = AAZListType(
            serialized_name="trustedRootCertificates",
        )
        properties.url_path_maps = AAZListType(
            serialized_name="urlPathMaps",
        )
        properties.web_application_firewall_configuration = AAZObjectType(
            serialized_name="webApplicationFirewallConfiguration",
        )

        authentication_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.authentication_certificates
        authentication_certificates.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.authentication_certificates.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.authentication_certificates.Element.properties
        properties.data = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        autoscale_configuration = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.autoscale_configuration
        autoscale_configuration.max_capacity = AAZIntType(
            serialized_name="maxCapacity",
        )
        autoscale_configuration.min_capacity = AAZIntType(
            serialized_name="minCapacity",
            flags={"required": True},
        )

        backend_address_pools = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_address_pools
        backend_address_pools.Element = AAZObjectType()
        cls._build_schema_application_gateway_backend_address_pool_read(backend_address_pools.Element)

        backend_http_settings_collection = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_http_settings_collection
        backend_http_settings_collection.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_http_settings_collection.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_http_settings_collection.Element.properties
        properties.affinity_cookie_name = AAZStrType(
            serialized_name="affinityCookieName",
        )
        properties.authentication_certificates = AAZListType(
            serialized_name="authenticationCertificates",
        )
        properties.connection_draining = AAZObjectType(
            serialized_name="connectionDraining",
        )
        properties.cookie_based_affinity = AAZStrType(
            serialized_name="cookieBasedAffinity",
        )
        properties.host_name = AAZStrType(
            serialized_name="hostName",
        )
        properties.path = AAZStrType()
        properties.pick_host_name_from_backend_address = AAZBoolType(
            serialized_name="pickHostNameFromBackendAddress",
        )
        properties.port = AAZIntType()
        properties.probe = AAZObjectType()
        cls._build_schema_sub_resource_read(properties.probe)
        properties.probe_enabled = AAZBoolType(
            serialized_name="probeEnabled",
        )
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.request_timeout = AAZIntType(
            serialized_name="requestTimeout",
        )
        properties.trusted_root_certificates = AAZListType(
            serialized_name="trustedRootCertificates",
        )

        authentication_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_http_settings_collection.Element.properties.authentication_certificates
        authentication_certificates.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(authentication_certificates.Element)

        connection_draining = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_http_settings_collection.Element.properties.connection_draining
        connection_draining.drain_timeout_in_sec = AAZIntType(
            serialized_name="drainTimeoutInSec",
            flags={"required": True},
        )
        connection_draining.enabled = AAZBoolType(
            flags={"required": True},
        )

        trusted_root_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_http_settings_collection.Element.properties.trusted_root_certificates
        trusted_root_certificates.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(trusted_root_certificates.Element)

        backend_settings_collection = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_settings_collection
        backend_settings_collection.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_settings_collection.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_settings_collection.Element.properties
        properties.host_name = AAZStrType(
            serialized_name="hostName",
        )
        properties.pick_host_name_from_backend_address = AAZBoolType(
            serialized_name="pickHostNameFromBackendAddress",
        )
        properties.port = AAZIntType()
        properties.probe = AAZObjectType()
        cls._build_schema_sub_resource_read(properties.probe)
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.timeout = AAZIntType()
        properties.trusted_root_certificates = AAZListType(
            serialized_name="trustedRootCertificates",
        )

        trusted_root_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.backend_settings_collection.Element.properties.trusted_root_certificates
        trusted_root_certificates.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(trusted_root_certificates.Element)

        custom_error_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.custom_error_configurations
        custom_error_configurations.Element = AAZObjectType()
        cls._build_schema_application_gateway_custom_error_read(custom_error_configurations.Element)

        frontend_ip_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.frontend_ip_configurations
        frontend_ip_configurations.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.frontend_ip_configurations.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.frontend_ip_configurations.Element.properties
        properties.private_ip_address = AAZStrType(
            serialized_name="privateIPAddress",
        )
        properties.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIPAllocationMethod",
        )
        properties.private_link_configuration = AAZObjectType(
            serialized_name="privateLinkConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.private_link_configuration)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_ip_address = AAZObjectType(
            serialized_name="publicIPAddress",
        )
        cls._build_schema_sub_resource_read(properties.public_ip_address)
        properties.subnet = AAZObjectType()
        cls._build_schema_sub_resource_read(properties.subnet)

        frontend_ports = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.frontend_ports
        frontend_ports.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.frontend_ports.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.frontend_ports.Element.properties
        properties.port = AAZIntType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        gateway_ip_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.gateway_ip_configurations
        gateway_ip_configurations.Element = AAZObjectType()
        cls._build_schema_application_gateway_ip_configuration_read(gateway_ip_configurations.Element)

        global_configuration = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.global_configuration
        global_configuration.enable_request_buffering = AAZBoolType(
            serialized_name="enableRequestBuffering",
        )
        global_configuration.enable_response_buffering = AAZBoolType(
            serialized_name="enableResponseBuffering",
        )

        http_listeners = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.http_listeners
        http_listeners.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.http_listeners.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.http_listeners.Element.properties
        properties.custom_error_configurations = AAZListType(
            serialized_name="customErrorConfigurations",
        )
        properties.firewall_policy = AAZObjectType(
            serialized_name="firewallPolicy",
        )
        cls._build_schema_sub_resource_read(properties.firewall_policy)
        properties.frontend_ip_configuration = AAZObjectType(
            serialized_name="frontendIPConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.frontend_ip_configuration)
        properties.frontend_port = AAZObjectType(
            serialized_name="frontendPort",
        )
        cls._build_schema_sub_resource_read(properties.frontend_port)
        properties.host_name = AAZStrType(
            serialized_name="hostName",
        )
        properties.host_names = AAZListType(
            serialized_name="hostNames",
        )
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.require_server_name_indication = AAZBoolType(
            serialized_name="requireServerNameIndication",
        )
        properties.ssl_certificate = AAZObjectType(
            serialized_name="sslCertificate",
        )
        cls._build_schema_sub_resource_read(properties.ssl_certificate)
        properties.ssl_profile = AAZObjectType(
            serialized_name="sslProfile",
        )
        cls._build_schema_sub_resource_read(properties.ssl_profile)

        custom_error_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.http_listeners.Element.properties.custom_error_configurations
        custom_error_configurations.Element = AAZObjectType()
        cls._build_schema_application_gateway_custom_error_read(custom_error_configurations.Element)

        host_names = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.http_listeners.Element.properties.host_names
        host_names.Element = AAZStrType()

        listeners = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.listeners
        listeners.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.listeners.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.listeners.Element.properties
        properties.frontend_ip_configuration = AAZObjectType(
            serialized_name="frontendIPConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.frontend_ip_configuration)
        properties.frontend_port = AAZObjectType(
            serialized_name="frontendPort",
        )
        cls._build_schema_sub_resource_read(properties.frontend_port)
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.ssl_certificate = AAZObjectType(
            serialized_name="sslCertificate",
        )
        cls._build_schema_sub_resource_read(properties.ssl_certificate)
        properties.ssl_profile = AAZObjectType(
            serialized_name="sslProfile",
        )
        cls._build_schema_sub_resource_read(properties.ssl_profile)

        load_distribution_policies = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.load_distribution_policies
        load_distribution_policies.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.load_distribution_policies.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.load_distribution_policies.Element.properties
        properties.load_distribution_algorithm = AAZStrType(
            serialized_name="loadDistributionAlgorithm",
        )
        properties.load_distribution_targets = AAZListType(
            serialized_name="loadDistributionTargets",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        load_distribution_targets = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.load_distribution_policies.Element.properties.load_distribution_targets
        load_distribution_targets.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.load_distribution_policies.Element.properties.load_distribution_targets.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.load_distribution_policies.Element.properties.load_distribution_targets.Element.properties
        properties.backend_address_pool = AAZObjectType(
            serialized_name="backendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.backend_address_pool)
        properties.weight_per_server = AAZIntType(
            serialized_name="weightPerServer",
        )

        private_endpoint_connections = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_endpoint_connections
        private_endpoint_connections.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_endpoint_connections.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_endpoint_connections.Element.properties
        properties.link_identifier = AAZStrType(
            serialized_name="linkIdentifier",
            flags={"read_only": True},
        )
        properties.private_endpoint = AAZObjectType(
            serialized_name="privateEndpoint",
        )
        cls._build_schema_private_endpoint_read(properties.private_endpoint)
        properties.private_link_service_connection_state = AAZObjectType(
            serialized_name="privateLinkServiceConnectionState",
        )
        cls._build_schema_private_link_service_connection_state_read(properties.private_link_service_connection_state)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        private_link_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_link_configurations
        private_link_configurations.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_link_configurations.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_link_configurations.Element.properties
        properties.ip_configurations = AAZListType(
            serialized_name="ipConfigurations",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        ip_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_link_configurations.Element.properties.ip_configurations
        ip_configurations.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_link_configurations.Element.properties.ip_configurations.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.private_link_configurations.Element.properties.ip_configurations.Element.properties
        properties.primary = AAZBoolType()
        properties.private_ip_address = AAZStrType(
            serialized_name="privateIPAddress",
        )
        properties.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIPAllocationMethod",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.subnet = AAZObjectType()
        cls._build_schema_sub_resource_read(properties.subnet)

        probes = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.probes
        probes.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.probes.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.probes.Element.properties
        properties.host = AAZStrType()
        properties.interval = AAZIntType()
        properties.match = AAZObjectType()
        properties.min_servers = AAZIntType(
            serialized_name="minServers",
        )
        properties.path = AAZStrType()
        properties.pick_host_name_from_backend_http_settings = AAZBoolType(
            serialized_name="pickHostNameFromBackendHttpSettings",
        )
        properties.pick_host_name_from_backend_settings = AAZBoolType(
            serialized_name="pickHostNameFromBackendSettings",
        )
        properties.port = AAZIntType()
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.timeout = AAZIntType()
        properties.unhealthy_threshold = AAZIntType(
            serialized_name="unhealthyThreshold",
        )

        match = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.probes.Element.properties.match
        match.body = AAZStrType()
        match.status_codes = AAZListType(
            serialized_name="statusCodes",
        )

        status_codes = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.probes.Element.properties.match.status_codes
        status_codes.Element = AAZStrType()

        redirect_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.redirect_configurations
        redirect_configurations.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.redirect_configurations.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.redirect_configurations.Element.properties
        properties.include_path = AAZBoolType(
            serialized_name="includePath",
        )
        properties.include_query_string = AAZBoolType(
            serialized_name="includeQueryString",
        )
        properties.path_rules = AAZListType(
            serialized_name="pathRules",
        )
        properties.redirect_type = AAZStrType(
            serialized_name="redirectType",
        )
        properties.request_routing_rules = AAZListType(
            serialized_name="requestRoutingRules",
        )
        properties.target_listener = AAZObjectType(
            serialized_name="targetListener",
        )
        cls._build_schema_sub_resource_read(properties.target_listener)
        properties.target_url = AAZStrType(
            serialized_name="targetUrl",
        )
        properties.url_path_maps = AAZListType(
            serialized_name="urlPathMaps",
        )

        path_rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.redirect_configurations.Element.properties.path_rules
        path_rules.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(path_rules.Element)

        request_routing_rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.redirect_configurations.Element.properties.request_routing_rules
        request_routing_rules.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(request_routing_rules.Element)

        url_path_maps = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.redirect_configurations.Element.properties.url_path_maps
        url_path_maps.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(url_path_maps.Element)

        request_routing_rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.request_routing_rules
        request_routing_rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.request_routing_rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.request_routing_rules.Element.properties
        properties.backend_address_pool = AAZObjectType(
            serialized_name="backendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.backend_address_pool)
        properties.backend_http_settings = AAZObjectType(
            serialized_name="backendHttpSettings",
        )
        cls._build_schema_sub_resource_read(properties.backend_http_settings)
        properties.http_listener = AAZObjectType(
            serialized_name="httpListener",
        )
        cls._build_schema_sub_resource_read(properties.http_listener)
        properties.load_distribution_policy = AAZObjectType(
            serialized_name="loadDistributionPolicy",
        )
        cls._build_schema_sub_resource_read(properties.load_distribution_policy)
        properties.priority = AAZIntType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.redirect_configuration = AAZObjectType(
            serialized_name="redirectConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.redirect_configuration)
        properties.rewrite_rule_set = AAZObjectType(
            serialized_name="rewriteRuleSet",
        )
        cls._build_schema_sub_resource_read(properties.rewrite_rule_set)
        properties.rule_type = AAZStrType(
            serialized_name="ruleType",
        )
        properties.url_path_map = AAZObjectType(
            serialized_name="urlPathMap",
        )
        cls._build_schema_sub_resource_read(properties.url_path_map)

        rewrite_rule_sets = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets
        rewrite_rule_sets.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rewrite_rules = AAZListType(
            serialized_name="rewriteRules",
        )

        rewrite_rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules
        rewrite_rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element
        _element.action_set = AAZObjectType(
            serialized_name="actionSet",
        )
        _element.conditions = AAZListType()
        _element.name = AAZStrType()
        _element.rule_sequence = AAZIntType(
            serialized_name="ruleSequence",
        )

        action_set = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element.action_set
        action_set.request_header_configurations = AAZListType(
            serialized_name="requestHeaderConfigurations",
        )
        action_set.response_header_configurations = AAZListType(
            serialized_name="responseHeaderConfigurations",
        )
        action_set.url_configuration = AAZObjectType(
            serialized_name="urlConfiguration",
        )

        request_header_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element.action_set.request_header_configurations
        request_header_configurations.Element = AAZObjectType()
        cls._build_schema_application_gateway_header_configuration_read(request_header_configurations.Element)

        response_header_configurations = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element.action_set.response_header_configurations
        response_header_configurations.Element = AAZObjectType()
        cls._build_schema_application_gateway_header_configuration_read(response_header_configurations.Element)

        url_configuration = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element.action_set.url_configuration
        url_configuration.modified_path = AAZStrType(
            serialized_name="modifiedPath",
        )
        url_configuration.modified_query_string = AAZStrType(
            serialized_name="modifiedQueryString",
        )
        url_configuration.reroute = AAZBoolType()

        conditions = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element.conditions
        conditions.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.rewrite_rule_sets.Element.properties.rewrite_rules.Element.conditions.Element
        _element.ignore_case = AAZBoolType(
            serialized_name="ignoreCase",
        )
        _element.negate = AAZBoolType()
        _element.pattern = AAZStrType()
        _element.variable = AAZStrType()

        routing_rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.routing_rules
        routing_rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.routing_rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.routing_rules.Element.properties
        properties.backend_address_pool = AAZObjectType(
            serialized_name="backendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.backend_address_pool)
        properties.backend_settings = AAZObjectType(
            serialized_name="backendSettings",
        )
        cls._build_schema_sub_resource_read(properties.backend_settings)
        properties.listener = AAZObjectType()
        cls._build_schema_sub_resource_read(properties.listener)
        properties.priority = AAZIntType(
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rule_type = AAZStrType(
            serialized_name="ruleType",
        )

        sku = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.sku
        sku.capacity = AAZIntType()
        sku.name = AAZStrType()
        sku.tier = AAZStrType()

        ssl_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_certificates
        ssl_certificates.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_certificates.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_certificates.Element.properties
        properties.data = AAZStrType()
        properties.key_vault_secret_id = AAZStrType(
            serialized_name="keyVaultSecretId",
        )
        properties.password = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_cert_data = AAZStrType(
            serialized_name="publicCertData",
            flags={"read_only": True},
        )

        ssl_profiles = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_profiles
        ssl_profiles.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_profiles.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_profiles.Element.properties
        properties.client_auth_configuration = AAZObjectType(
            serialized_name="clientAuthConfiguration",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.ssl_policy = AAZObjectType(
            serialized_name="sslPolicy",
        )
        cls._build_schema_application_gateway_ssl_policy_read(properties.ssl_policy)
        properties.trusted_client_certificates = AAZListType(
            serialized_name="trustedClientCertificates",
        )

        client_auth_configuration = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_profiles.Element.properties.client_auth_configuration
        client_auth_configuration.verify_client_cert_issuer_dn = AAZBoolType(
            serialized_name="verifyClientCertIssuerDN",
        )
        client_auth_configuration.verify_client_revocation = AAZStrType(
            serialized_name="verifyClientRevocation",
        )

        trusted_client_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.ssl_profiles.Element.properties.trusted_client_certificates
        trusted_client_certificates.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(trusted_client_certificates.Element)

        trusted_client_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.trusted_client_certificates
        trusted_client_certificates.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.trusted_client_certificates.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.trusted_client_certificates.Element.properties
        properties.client_cert_issuer_dn = AAZStrType(
            serialized_name="clientCertIssuerDN",
            flags={"read_only": True},
        )
        properties.data = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.validated_cert_data = AAZStrType(
            serialized_name="validatedCertData",
            flags={"read_only": True},
        )

        trusted_root_certificates = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.trusted_root_certificates
        trusted_root_certificates.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.trusted_root_certificates.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.trusted_root_certificates.Element.properties
        properties.data = AAZStrType()
        properties.key_vault_secret_id = AAZStrType(
            serialized_name="keyVaultSecretId",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        url_path_maps = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps
        url_path_maps.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps.Element.properties
        properties.default_backend_address_pool = AAZObjectType(
            serialized_name="defaultBackendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.default_backend_address_pool)
        properties.default_backend_http_settings = AAZObjectType(
            serialized_name="defaultBackendHttpSettings",
        )
        cls._build_schema_sub_resource_read(properties.default_backend_http_settings)
        properties.default_load_distribution_policy = AAZObjectType(
            serialized_name="defaultLoadDistributionPolicy",
        )
        cls._build_schema_sub_resource_read(properties.default_load_distribution_policy)
        properties.default_redirect_configuration = AAZObjectType(
            serialized_name="defaultRedirectConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.default_redirect_configuration)
        properties.default_rewrite_rule_set = AAZObjectType(
            serialized_name="defaultRewriteRuleSet",
        )
        cls._build_schema_sub_resource_read(properties.default_rewrite_rule_set)
        properties.path_rules = AAZListType(
            serialized_name="pathRules",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        path_rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps.Element.properties.path_rules
        path_rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps.Element.properties.path_rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps.Element.properties.path_rules.Element.properties
        properties.backend_address_pool = AAZObjectType(
            serialized_name="backendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.backend_address_pool)
        properties.backend_http_settings = AAZObjectType(
            serialized_name="backendHttpSettings",
        )
        cls._build_schema_sub_resource_read(properties.backend_http_settings)
        properties.firewall_policy = AAZObjectType(
            serialized_name="firewallPolicy",
        )
        cls._build_schema_sub_resource_read(properties.firewall_policy)
        properties.load_distribution_policy = AAZObjectType(
            serialized_name="loadDistributionPolicy",
        )
        cls._build_schema_sub_resource_read(properties.load_distribution_policy)
        properties.paths = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.redirect_configuration = AAZObjectType(
            serialized_name="redirectConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.redirect_configuration)
        properties.rewrite_rule_set = AAZObjectType(
            serialized_name="rewriteRuleSet",
        )
        cls._build_schema_sub_resource_read(properties.rewrite_rule_set)

        paths = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.url_path_maps.Element.properties.path_rules.Element.properties.paths
        paths.Element = AAZStrType()

        web_application_firewall_configuration = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.web_application_firewall_configuration
        web_application_firewall_configuration.disabled_rule_groups = AAZListType(
            serialized_name="disabledRuleGroups",
        )
        web_application_firewall_configuration.enabled = AAZBoolType(
            flags={"required": True},
        )
        web_application_firewall_configuration.exclusions = AAZListType()
        web_application_firewall_configuration.file_upload_limit_in_mb = AAZIntType(
            serialized_name="fileUploadLimitInMb",
        )
        web_application_firewall_configuration.firewall_mode = AAZStrType(
            serialized_name="firewallMode",
            flags={"required": True},
        )
        web_application_firewall_configuration.max_request_body_size = AAZIntType(
            serialized_name="maxRequestBodySize",
        )
        web_application_firewall_configuration.max_request_body_size_in_kb = AAZIntType(
            serialized_name="maxRequestBodySizeInKb",
        )
        web_application_firewall_configuration.request_body_check = AAZBoolType(
            serialized_name="requestBodyCheck",
        )
        web_application_firewall_configuration.rule_set_type = AAZStrType(
            serialized_name="ruleSetType",
            flags={"required": True},
        )
        web_application_firewall_configuration.rule_set_version = AAZStrType(
            serialized_name="ruleSetVersion",
            flags={"required": True},
        )

        disabled_rule_groups = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.web_application_firewall_configuration.disabled_rule_groups
        disabled_rule_groups.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.web_application_firewall_configuration.disabled_rule_groups.Element
        _element.rule_group_name = AAZStrType(
            serialized_name="ruleGroupName",
            flags={"required": True},
        )
        _element.rules = AAZListType()

        rules = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.web_application_firewall_configuration.disabled_rule_groups.Element.rules
        rules.Element = AAZIntType()

        exclusions = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.web_application_firewall_configuration.exclusions
        exclusions.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.properties.web_application_firewall_configuration.exclusions.Element
        _element.match_variable = AAZStrType(
            serialized_name="matchVariable",
            flags={"required": True},
        )
        _element.selector = AAZStrType(
            flags={"required": True},
        )
        _element.selector_match_operator = AAZStrType(
            serialized_name="selectorMatchOperator",
            flags={"required": True},
        )

        tags = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.tags
        tags.Element = AAZStrType()

        zones = _schema_web_application_firewall_policy_read.properties.application_gateways.Element.zones
        zones.Element = AAZStrType()

        custom_rules = _schema_web_application_firewall_policy_read.properties.custom_rules
        custom_rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.custom_rules.Element
        _element.action = AAZStrType(
            flags={"required": True},
        )
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.match_conditions = AAZListType(
            serialized_name="matchConditions",
            flags={"required": True},
        )
        _element.name = AAZStrType()
        _element.priority = AAZIntType(
            flags={"required": True},
        )
        _element.rule_type = AAZStrType(
            serialized_name="ruleType",
            flags={"required": True},
        )

        match_conditions = _schema_web_application_firewall_policy_read.properties.custom_rules.Element.match_conditions
        match_conditions.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.custom_rules.Element.match_conditions.Element
        _element.match_values = AAZListType(
            serialized_name="matchValues",
        )
        _element.match_variables = AAZListType(
            serialized_name="matchVariables",
            flags={"required": True},
        )
        _element.negation_conditon = AAZBoolType(
            serialized_name="negationConditon",
        )
        _element.operator = AAZStrType(
            flags={"required": True},
        )
        _element.transforms = AAZListType()

        match_values = _schema_web_application_firewall_policy_read.properties.custom_rules.Element.match_conditions.Element.match_values
        match_values.Element = AAZStrType()

        match_variables = _schema_web_application_firewall_policy_read.properties.custom_rules.Element.match_conditions.Element.match_variables
        match_variables.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.custom_rules.Element.match_conditions.Element.match_variables.Element
        _element.selector = AAZStrType()
        _element.variable_name = AAZStrType(
            serialized_name="variableName",
            flags={"required": True},
        )

        transforms = _schema_web_application_firewall_policy_read.properties.custom_rules.Element.match_conditions.Element.transforms
        transforms.Element = AAZStrType()

        http_listeners = _schema_web_application_firewall_policy_read.properties.http_listeners
        http_listeners.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(http_listeners.Element)

        managed_rules = _schema_web_application_firewall_policy_read.properties.managed_rules
        managed_rules.exclusions = AAZListType()
        managed_rules.managed_rule_sets = AAZListType(
            serialized_name="managedRuleSets",
            flags={"required": True},
        )

        exclusions = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions
        exclusions.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element
        _element.exclusion_managed_rule_sets = AAZListType(
            serialized_name="exclusionManagedRuleSets",
        )
        _element.match_variable = AAZStrType(
            serialized_name="matchVariable",
            flags={"required": True},
        )
        _element.selector = AAZStrType(
            flags={"required": True},
        )
        _element.selector_match_operator = AAZStrType(
            serialized_name="selectorMatchOperator",
            flags={"required": True},
        )

        exclusion_managed_rule_sets = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element.exclusion_managed_rule_sets
        exclusion_managed_rule_sets.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element.exclusion_managed_rule_sets.Element
        _element.rule_groups = AAZListType(
            serialized_name="ruleGroups",
        )
        _element.rule_set_type = AAZStrType(
            serialized_name="ruleSetType",
            flags={"required": True},
        )
        _element.rule_set_version = AAZStrType(
            serialized_name="ruleSetVersion",
            flags={"required": True},
        )

        rule_groups = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element.exclusion_managed_rule_sets.Element.rule_groups
        rule_groups.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element.exclusion_managed_rule_sets.Element.rule_groups.Element
        _element.rule_group_name = AAZStrType(
            serialized_name="ruleGroupName",
            flags={"required": True},
        )
        _element.rules = AAZListType()

        rules = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element.exclusion_managed_rule_sets.Element.rule_groups.Element.rules
        rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.exclusions.Element.exclusion_managed_rule_sets.Element.rule_groups.Element.rules.Element
        _element.rule_id = AAZStrType(
            serialized_name="ruleId",
            flags={"required": True},
        )

        managed_rule_sets = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets
        managed_rule_sets.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element
        _element.rule_group_overrides = AAZListType(
            serialized_name="ruleGroupOverrides",
        )
        _element.rule_set_type = AAZStrType(
            serialized_name="ruleSetType",
            flags={"required": True},
        )
        _element.rule_set_version = AAZStrType(
            serialized_name="ruleSetVersion",
            flags={"required": True},
        )

        rule_group_overrides = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides
        rule_group_overrides.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element
        _element.rule_group_name = AAZStrType(
            serialized_name="ruleGroupName",
            flags={"required": True},
        )
        _element.rules = AAZListType()

        rules = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules
        rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element
        _element.action = AAZStrType()
        _element.rule_id = AAZStrType(
            serialized_name="ruleId",
            flags={"required": True},
        )
        _element.state = AAZStrType()

        path_based_rules = _schema_web_application_firewall_policy_read.properties.path_based_rules
        path_based_rules.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(path_based_rules.Element)

        policy_settings = _schema_web_application_firewall_policy_read.properties.policy_settings
        policy_settings.file_upload_limit_in_mb = AAZIntType(
            serialized_name="fileUploadLimitInMb",
        )
        policy_settings.max_request_body_size_in_kb = AAZIntType(
            serialized_name="maxRequestBodySizeInKb",
        )
        policy_settings.mode = AAZStrType()
        policy_settings.request_body_check = AAZBoolType(
            serialized_name="requestBodyCheck",
        )
        policy_settings.state = AAZStrType()

        tags = _schema_web_application_firewall_policy_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_web_application_firewall_policy_read.etag
        _schema.id = cls._schema_web_application_firewall_policy_read.id
        _schema.location = cls._schema_web_application_firewall_policy_read.location
        _schema.name = cls._schema_web_application_firewall_policy_read.name
        _schema.properties = cls._schema_web_application_firewall_policy_read.properties
        _schema.tags = cls._schema_web_application_firewall_policy_read.tags
        _schema.type = cls._schema_web_application_firewall_policy_read.type


@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
    ("_build_schema_web_application_firewall_policy_read", _Helper),
)
class _CreateHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
    ("_build_schema_web_application_firewall_policy_read", _Helper),
)
class _DeleteHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
    ("_build_schema_web_application_firewall_policy_read", _Helper),
)
class _ListHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
    ("_build_schema_web_application_firewall_policy_read", _Helper),
)
class _ShowHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
    ("_build_schema_web_application_firewall_policy_read", _Helper),
)
class _UpdateHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



__all__ = ["Create","Delete","List","Show","Update","__CMDGroup"]
