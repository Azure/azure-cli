# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def network_application_gateway_backend_health_on_demand(client,
                                                         resource_group_name,
                                                         application_gateway_name,
                                                         expand=None,
                                                         protocol=None,
                                                         host=None,
                                                         path=None,
                                                         timeout=None,
                                                         pick_host_name_from_backend_http_settings=None,
                                                         match=None,
                                                         id_=None,
                                                         sub_resource_id=None,
                                                         no_wait=False):
    probe_request = {}
    probe_request['protocol'] = protocol
    probe_request['host'] = host
    probe_request['path'] = path
    probe_request['timeout'] = timeout
    probe_request['pick_host_name_from_backend_http_settings'] = pick_host_name_from_backend_http_settings
    probe_request['match'] = match
    probe_request['backend_http_settings'] = {}
    probe_request['backend_http_settings']['id'] = id_
    probe_request['backend_address_pool'] = {}
    probe_request['backend_address_pool']['id'] = sub_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_backend_health_on_demand,
                       resource_group_name=resource_group_name,
                       application_gateway_name=application_gateway_name,
                       expand=expand,
                       probe_request=probe_request)


def network_application_gateway_private_endpoint_connection_show(client,
                                                                 resource_group_name,
                                                                 application_gateway_name,
                                                                 connection_name):
    return client.get(resource_group_name=resource_group_name,
                      application_gateway_name=application_gateway_name,
                      connection_name=connection_name)


def network_application_security_group_list(client,
                                            resource_group_name):
    return client.list(resource_group_name=resource_group_name)


def network_web_category_list(client):
    return client.list_by_subscription()


def network_generatevirtualwanvpnserverconfigurationvpnprofile(client,
                                                               resource_group_name,
                                                               virtual_wan_name,
                                                               vpn_server_configuration_resource_id=None,
                                                               authentication_method=None):
    vpn_client_params = {}
    vpn_client_params['vpn_server_configuration_resource_id'] = vpn_server_configuration_resource_id
    vpn_client_params['authentication_method'] = authentication_method
    return client.begin_generatevirtualwanvpnserverconfigurationvpnprofile(resource_group_name=resource_group_name,
                                                                           virtual_wan_name=virtual_wan_name,
                                                                           vpn_client_params=vpn_client_params)


def network_get_active_session(client,
                               resource_group_name,
                               bastion_host_name):
    return client.begin_get_active_sessions(resource_group_name=resource_group_name,
                                            bastion_host_name=bastion_host_name)


def network_supported_security_provider(client,
                                        resource_group_name,
                                        virtual_wan_name):
    return client.supported_security_providers(resource_group_name=resource_group_name,
                                               virtual_wan_name=virtual_wan_name)


def network_network_interface_show_virtual_machine_scale_set_ip_configuration(client,
                                                                              resource_group_name,
                                                                              virtual_machine_scale_set_name,
                                                                              virtualmachine_index,
                                                                              network_interface_name,
                                                                              ip_configuration_name,
                                                                              expand=None):
    return client.get_virtual_machine_scale_set_ip_configuration(resource_group_name=resource_group_name,
                                                                 virtual_machine_scale_set_name=virtual_machine_scale_set_name,
                                                                 virtualmachine_index=virtualmachine_index,
                                                                 network_interface_name=network_interface_name,
                                                                 ip_configuration_name=ip_configuration_name,
                                                                 expand=expand)


def network_public_ip_address_list_virtual_machine_scale_set_vm_public_ip_address(client,
                                                                                  resource_group_name,
                                                                                  virtual_machine_scale_set_name,
                                                                                  virtualmachine_index,
                                                                                  network_interface_name,
                                                                                  ip_configuration_name):
    return client.list_virtual_machine_scale_set_vm_public_ip_addresses(resource_group_name=resource_group_name,
                                                                        virtual_machine_scale_set_name=virtual_machine_scale_set_name,
                                                                        virtualmachine_index=virtualmachine_index,
                                                                        network_interface_name=network_interface_name,
                                                                        ip_configuration_name=ip_configuration_name)


def network_public_ip_address_show_virtual_machine_scale_set_public_ip_address(client,
                                                                               resource_group_name,
                                                                               virtual_machine_scale_set_name,
                                                                               virtualmachine_index,
                                                                               network_interface_name,
                                                                               ip_configuration_name,
                                                                               public_ip_address_name,
                                                                               expand=None):
    return client.get_virtual_machine_scale_set_public_ip_address(resource_group_name=resource_group_name,
                                                                  virtual_machine_scale_set_name=virtual_machine_scale_set_name,
                                                                  virtualmachine_index=virtualmachine_index,
                                                                  network_interface_name=network_interface_name,
                                                                  ip_configuration_name=ip_configuration_name,
                                                                  public_ip_address_name=public_ip_address_name,
                                                                  expand=expand)


def network_custom_ip_prefix_list(client,
                                  resource_group_name):
    return client.list(resource_group_name=resource_group_name)


def network_custom_ip_prefix_show(client,
                                  resource_group_name,
                                  custom_ip_prefix_name,
                                  expand=None):
    return client.get(resource_group_name=resource_group_name,
                      custom_ip_prefix_name=custom_ip_prefix_name,
                      expand=expand)


def network_custom_ip_prefix_list_all(client):
    return client.list_all()


def network_express_route_circuit_connection_list(client,
                                                  resource_group_name,
                                                  circuit_name,
                                                  peering_name):
    return client.list(resource_group_name=resource_group_name,
                       circuit_name=circuit_name,
                       peering_name=peering_name)


def network_express_route_circuit_list_route_table_summary(client,
                                                           resource_group_name,
                                                           circuit_name,
                                                           peering_name,
                                                           device_path,
                                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_list_routes_table_summary,
                       resource_group_name=resource_group_name,
                       circuit_name=circuit_name,
                       peering_name=peering_name,
                       device_path=device_path)


def network_express_route_circuit_show_peering_stat(client,
                                                    resource_group_name,
                                                    circuit_name,
                                                    peering_name):
    return client.get_peering_stats(resource_group_name=resource_group_name,
                                    circuit_name=circuit_name,
                                    peering_name=peering_name)


def network_express_route_cross_connection_peering_show(client,
                                                        resource_group_name,
                                                        cross_connection_name,
                                                        peering_name):
    return client.get(resource_group_name=resource_group_name,
                      cross_connection_name=cross_connection_name,
                      peering_name=peering_name)


def network_express_route_cross_connection_peering_create(client,
                                                          resource_group_name,
                                                          cross_connection_name,
                                                          peering_name,
                                                          id_=None,
                                                          name=None,
                                                          peering_type=None,
                                                          state=None,
                                                          peer_asn=None,
                                                          primary_peer_address_prefix=None,
                                                          secondary_peer_address_prefix=None,
                                                          shared_key=None,
                                                          vlan_id=None,
                                                          microsoft_peering_config=None,
                                                          gateway_manager_etag=None,
                                                          ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix=None,
                                                          ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_prefix=None,
                                                          express_route_circuit_peering_config_microsoft_peering_config=None,
                                                          express_route_circuit_peering_state=None,
                                                          sub_resource_id=None,
                                                          no_wait=False):
    peering_parameters = {}
    peering_parameters['id'] = id_
    peering_parameters['name'] = name
    peering_parameters['peering_type'] = peering_type
    peering_parameters['state'] = state
    peering_parameters['peer_asn'] = peer_asn
    peering_parameters['primary_peer_address_prefix'] = primary_peer_address_prefix
    peering_parameters['secondary_peer_address_prefix'] = secondary_peer_address_prefix
    peering_parameters['shared_key'] = shared_key
    peering_parameters['vlan_id'] = vlan_id
    peering_parameters['microsoft_peering_config'] = microsoft_peering_config
    peering_parameters['gateway_manager_etag'] = gateway_manager_etag
    peering_parameters['ipv6_peering_config'] = {}
    peering_parameters['ipv6_peering_config']['primary_peer_address_prefix'] = ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix
    peering_parameters['ipv6_peering_config']['secondary_peer_address_prefix'] = ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_prefix
    peering_parameters['ipv6_peering_config']['microsoft_peering_config'] = express_route_circuit_peering_config_microsoft_peering_config
    peering_parameters['ipv6_peering_config']['state'] = express_route_circuit_peering_state
    peering_parameters['ipv6_peering_config']['route_filter'] = {}
    peering_parameters['ipv6_peering_config']['route_filter']['id'] = sub_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cross_connection_name=cross_connection_name,
                       peering_name=peering_name,
                       peering_parameters=peering_parameters)


def network_express_route_cross_connection_peering_update(instance,
                                                          resource_group_name,
                                                          cross_connection_name,
                                                          peering_name,
                                                          id_=None,
                                                          name=None,
                                                          peering_type=None,
                                                          state=None,
                                                          peer_asn=None,
                                                          primary_peer_address_prefix=None,
                                                          secondary_peer_address_prefix=None,
                                                          shared_key=None,
                                                          vlan_id=None,
                                                          microsoft_peering_config=None,
                                                          gateway_manager_etag=None,
                                                          ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix=None,
                                                          ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_prefix=None,
                                                          express_route_circuit_peering_config_microsoft_peering_config=None,
                                                          express_route_circuit_peering_state=None,
                                                          sub_resource_id=None,
                                                          no_wait=False):
    if id_ is not None:
        instance.id = id_
    if name is not None:
        instance.name = name
    if peering_type is not None:
        instance.peering_type = peering_type
    if state is not None:
        instance.state = state
    if peer_asn is not None:
        instance.peer_asn = peer_asn
    if primary_peer_address_prefix is not None:
        instance.primary_peer_address_prefix = primary_peer_address_prefix
    if secondary_peer_address_prefix is not None:
        instance.secondary_peer_address_prefix = secondary_peer_address_prefix
    if shared_key is not None:
        instance.shared_key = shared_key
    if vlan_id is not None:
        instance.vlan_id = vlan_id
    if microsoft_peering_config is not None:
        instance.microsoft_peering_config = microsoft_peering_config
    if gateway_manager_etag is not None:
        instance.gateway_manager_etag = gateway_manager_etag
    if ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix is not None:
        instance.ipv6_peering_config.primary_peer_address_prefix = ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix
    if ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_prefix is not None:
        instance.ipv6_peering_config.secondary_peer_address_prefix = ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_prefix
    if express_route_circuit_peering_config_microsoft_peering_config is not None:
        instance.ipv6_peering_config.microsoft_peering_config = express_route_circuit_peering_config_microsoft_peering_config
    if express_route_circuit_peering_state is not None:
        instance.ipv6_peering_config.state = express_route_circuit_peering_state
    if sub_resource_id is not None:
        instance.ipv6_peering_config.route_filter.id = sub_resource_id
    return instance


def network_express_route_cross_connection_peering_delete(client,
                                                          resource_group_name,
                                                          cross_connection_name,
                                                          peering_name,
                                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cross_connection_name=cross_connection_name,
                       peering_name=peering_name)


def network_load_balancer_frontend_ip_configuration_list(client,
                                                         resource_group_name,
                                                         load_balancer_name):
    return client.list(resource_group_name=resource_group_name,
                       load_balancer_name=load_balancer_name)


def network_inbound_nat_rule_show(client,
                                  resource_group_name,
                                  load_balancer_name,
                                  inbound_nat_rule_name,
                                  expand=None):
    return client.get(resource_group_name=resource_group_name,
                      load_balancer_name=load_balancer_name,
                      inbound_nat_rule_name=inbound_nat_rule_name,
                      expand=expand)


def network_inbound_nat_rule_create(client,
                                    resource_group_name,
                                    load_balancer_name,
                                    inbound_nat_rule_name,
                                    id_=None,
                                    name=None,
                                    protocol=None,
                                    frontend_port=None,
                                    backend_port=None,
                                    idle_timeout_in_minutes=None,
                                    enable_floating_ip=None,
                                    enable_tcp_reset=None,
                                    sub_resource_id=None,
                                    no_wait=False):
    inbound_nat_rule_parameters = {}
    inbound_nat_rule_parameters['id'] = id_
    inbound_nat_rule_parameters['name'] = name
    inbound_nat_rule_parameters['protocol'] = protocol
    inbound_nat_rule_parameters['frontend_port'] = frontend_port
    inbound_nat_rule_parameters['backend_port'] = backend_port
    inbound_nat_rule_parameters['idle_timeout_in_minutes'] = idle_timeout_in_minutes
    inbound_nat_rule_parameters['enable_floating_ip'] = enable_floating_ip
    inbound_nat_rule_parameters['enable_tcp_reset'] = enable_tcp_reset
    inbound_nat_rule_parameters['frontend_ip_configuration'] = {}
    inbound_nat_rule_parameters['frontend_ip_configuration']['id'] = sub_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       load_balancer_name=load_balancer_name,
                       inbound_nat_rule_name=inbound_nat_rule_name,
                       inbound_nat_rule_parameters=inbound_nat_rule_parameters)


def network_inbound_nat_rule_update(instance,
                                    resource_group_name,
                                    load_balancer_name,
                                    inbound_nat_rule_name,
                                    id_=None,
                                    name=None,
                                    protocol=None,
                                    frontend_port=None,
                                    backend_port=None,
                                    idle_timeout_in_minutes=None,
                                    enable_floating_ip=None,
                                    enable_tcp_reset=None,
                                    sub_resource_id=None,
                                    no_wait=False):
    if id_ is not None:
        instance.id = id_
    if name is not None:
        instance.name = name
    if protocol is not None:
        instance.protocol = protocol
    if frontend_port is not None:
        instance.frontend_port = frontend_port
    if backend_port is not None:
        instance.backend_port = backend_port
    if idle_timeout_in_minutes is not None:
        instance.idle_timeout_in_minutes = idle_timeout_in_minutes
    if enable_floating_ip is not None:
        instance.enable_floating_ip = enable_floating_ip
    if enable_tcp_reset is not None:
        instance.enable_tcp_reset = enable_tcp_reset
    if sub_resource_id is not None:
        instance.frontend_ip_configuration.id = sub_resource_id
    return instance


def network_inbound_nat_rule_delete(client,
                                    resource_group_name,
                                    load_balancer_name,
                                    inbound_nat_rule_name,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       load_balancer_name=load_balancer_name,
                       inbound_nat_rule_name=inbound_nat_rule_name)


def network_load_balancer_network_interface_list(client,
                                                 resource_group_name,
                                                 load_balancer_name):
    return client.list(resource_group_name=resource_group_name,
                       load_balancer_name=load_balancer_name)


def network_network_interface_ip_configuration_list(client,
                                                    resource_group_name,
                                                    network_interface_name):
    return client.list(resource_group_name=resource_group_name,
                       network_interface_name=network_interface_name)


def network_network_interface_ip_configuration_show(client,
                                                    resource_group_name,
                                                    network_interface_name,
                                                    ip_configuration_name):
    return client.get(resource_group_name=resource_group_name,
                      network_interface_name=network_interface_name,
                      ip_configuration_name=ip_configuration_name)


def network_network_interface_load_balancer_list(client,
                                                 resource_group_name,
                                                 network_interface_name):
    return client.list(resource_group_name=resource_group_name,
                       network_interface_name=network_interface_name)


def network_network_interface_tap_configuration_list(client,
                                                     resource_group_name,
                                                     network_interface_name):
    return client.list(resource_group_name=resource_group_name,
                       network_interface_name=network_interface_name)


def network_network_interface_tap_configuration_delete(client,
                                                       resource_group_name,
                                                       network_interface_name,
                                                       tap_configuration_name,
                                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       network_interface_name=network_interface_name,
                       tap_configuration_name=tap_configuration_name)


def network_default_security_rule_list(client,
                                       resource_group_name,
                                       network_security_group_name):
    return client.list(resource_group_name=resource_group_name,
                       network_security_group_name=network_security_group_name)


def network_default_security_rule_show(client,
                                       resource_group_name,
                                       network_security_group_name,
                                       default_security_rule_name):
    return client.get(resource_group_name=resource_group_name,
                      network_security_group_name=network_security_group_name,
                      default_security_rule_name=default_security_rule_name)


def network_network_watcher_get_azure_reachability_report(client,
                                                          resource_group_name,
                                                          network_watcher_name,
                                                          provider_location,
                                                          start_time,
                                                          end_time,
                                                          providers=None,
                                                          azure_locations=None,
                                                          no_wait=False):
    parameters = {}
    parameters['provider_location'] = provider_location
    parameters['providers'] = providers
    parameters['azure_locations'] = azure_locations
    parameters['start_time'] = start_time
    parameters['end_time'] = end_time
    return sdk_no_wait(no_wait,
                       client.begin_get_azure_reachability_report,
                       resource_group_name=resource_group_name,
                       network_watcher_name=network_watcher_name,
                       parameters=parameters)


def network_network_watcher_list_available_provider(client,
                                                    resource_group_name,
                                                    network_watcher_name,
                                                    azure_locations=None,
                                                    country=None,
                                                    state=None,
                                                    city=None,
                                                    no_wait=False):
    parameters = {}
    parameters['azure_locations'] = azure_locations
    parameters['country'] = country
    parameters['state'] = state
    parameters['city'] = city
    return sdk_no_wait(no_wait,
                       client.begin_list_available_providers,
                       resource_group_name=resource_group_name,
                       network_watcher_name=network_watcher_name,
                       parameters=parameters)


def network_private_link_service_list_private_endpoint_connection(client,
                                                                  resource_group_name,
                                                                  service_name):
    return client.list_private_endpoint_connections(resource_group_name=resource_group_name,
                                                    service_name=service_name)


def network_private_link_service_show_private_endpoint_connection(client,
                                                                  resource_group_name,
                                                                  service_name,
                                                                  pe_connection_name,
                                                                  expand=None):
    return client.get_private_endpoint_connection(resource_group_name=resource_group_name,
                                                  service_name=service_name,
                                                  pe_connection_name=pe_connection_name,
                                                  expand=expand)


def network_virtual_network_list_usage(client,
                                       resource_group_name,
                                       virtual_network_name):
    return client.list_usage(resource_group_name=resource_group_name,
                             virtual_network_name=virtual_network_name)


def network_subnet_prepare_network_policy(client,
                                          resource_group_name,
                                          virtual_network_name,
                                          subnet_name,
                                          service_name=None,
                                          network_intent_policy_configurations=None,
                                          no_wait=False):
    prepare_network_policies_request_parameters = {}
    prepare_network_policies_request_parameters['service_name'] = service_name
    prepare_network_policies_request_parameters['network_intent_policy_configurations'] = network_intent_policy_configurations
    return sdk_no_wait(no_wait,
                       client.begin_prepare_network_policies,
                       resource_group_name=resource_group_name,
                       virtual_network_name=virtual_network_name,
                       subnet_name=subnet_name,
                       prepare_network_policies_request_parameters=prepare_network_policies_request_parameters)


def network_subnet_unprepare_network_policy(client,
                                            resource_group_name,
                                            virtual_network_name,
                                            subnet_name,
                                            service_name=None,
                                            no_wait=False):
    unprepare_network_policies_request_parameters = {}
    unprepare_network_policies_request_parameters['service_name'] = service_name
    return sdk_no_wait(no_wait,
                       client.begin_unprepare_network_policies,
                       resource_group_name=resource_group_name,
                       virtual_network_name=virtual_network_name,
                       subnet_name=subnet_name,
                       unprepare_network_policies_request_parameters=unprepare_network_policies_request_parameters)


def network_resource_navigation_link_list(client,
                                          resource_group_name,
                                          virtual_network_name,
                                          subnet_name):
    return client.list(resource_group_name=resource_group_name,
                       virtual_network_name=virtual_network_name,
                       subnet_name=subnet_name)


def network_service_association_link_list(client,
                                          resource_group_name,
                                          virtual_network_name,
                                          subnet_name):
    return client.list(resource_group_name=resource_group_name,
                       virtual_network_name=virtual_network_name,
                       subnet_name=subnet_name)


def network_virtual_network_gateway_disconnect_virtual_network_gateway_vpn_connection(client,
                                                                                      resource_group_name,
                                                                                      virtual_network_gateway_name,
                                                                                      vpn_connection_ids=None,
                                                                                      no_wait=False):
    request = {}
    request['vpn_connection_ids'] = vpn_connection_ids
    return sdk_no_wait(no_wait,
                       client.begin_disconnect_virtual_network_gateway_vpn_connections,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_name=virtual_network_gateway_name,
                       request=request)


def network_virtual_network_gateway_get_vpnclient_connection_health(client,
                                                                    resource_group_name,
                                                                    virtual_network_gateway_name,
                                                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_get_vpnclient_connection_health,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_name=virtual_network_gateway_name)


def network_virtual_network_gateway_get_vpnclient_ipsec_parameter(client,
                                                                  resource_group_name,
                                                                  virtual_network_gateway_name,
                                                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_get_vpnclient_ipsec_parameters,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_name=virtual_network_gateway_name)


def network_virtual_network_gateway_list_connection(client,
                                                    resource_group_name,
                                                    virtual_network_gateway_name):
    return client.list_connections(resource_group_name=resource_group_name,
                                   virtual_network_gateway_name=virtual_network_gateway_name)


def network_virtual_network_gateway_set_vpnclient_ipsec_parameter(client,
                                                                  resource_group_name,
                                                                  virtual_network_gateway_name,
                                                                  sa_life_time_seconds,
                                                                  sa_data_size_kilobytes,
                                                                  ipsec_encryption,
                                                                  ipsec_integrity,
                                                                  ike_encryption,
                                                                  ike_integrity,
                                                                  dh_group,
                                                                  pfs_group,
                                                                  no_wait=False):
    vpnclient_ipsec_params = {}
    vpnclient_ipsec_params['sa_life_time_seconds'] = sa_life_time_seconds
    vpnclient_ipsec_params['sa_data_size_kilobytes'] = sa_data_size_kilobytes
    vpnclient_ipsec_params['ipsec_encryption'] = ipsec_encryption
    vpnclient_ipsec_params['ipsec_integrity'] = ipsec_integrity
    vpnclient_ipsec_params['ike_encryption'] = ike_encryption
    vpnclient_ipsec_params['ike_integrity'] = ike_integrity
    vpnclient_ipsec_params['dh_group'] = dh_group
    vpnclient_ipsec_params['pfs_group'] = pfs_group
    return sdk_no_wait(no_wait,
                       client.begin_set_vpnclient_ipsec_parameters,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_name=virtual_network_gateway_name,
                       vpnclient_ipsec_params=vpnclient_ipsec_params)


def network_virtual_network_gateway_start_packet_capture(client,
                                                         resource_group_name,
                                                         virtual_network_gateway_name,
                                                         filter_data=None,
                                                         no_wait=False):
    parameters = {}
    parameters['filter_data'] = filter_data
    return sdk_no_wait(no_wait,
                       client.begin_start_packet_capture,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_name=virtual_network_gateway_name,
                       parameters=parameters)


def network_virtual_network_gateway_stop_packet_capture(client,
                                                        resource_group_name,
                                                        virtual_network_gateway_name,
                                                        sas_url=None,
                                                        no_wait=False):
    parameters = {}
    parameters['sas_url'] = sas_url
    return sdk_no_wait(no_wait,
                       client.begin_stop_packet_capture,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_name=virtual_network_gateway_name,
                       parameters=parameters)


def network_virtual_network_gateway_supported_vpn_device(client,
                                                         resource_group_name,
                                                         virtual_network_gateway_name):
    return client.supported_vpn_devices(resource_group_name=resource_group_name,
                                        virtual_network_gateway_name=virtual_network_gateway_name)


def network_virtual_network_gateway_vpn_device_configuration_script(client,
                                                                    resource_group_name,
                                                                    virtual_network_gateway_connection_name,
                                                                    vendor=None,
                                                                    device_family=None,
                                                                    firmware_version=None):
    parameters = {}
    parameters['vendor'] = vendor
    parameters['device_family'] = device_family
    parameters['firmware_version'] = firmware_version
    return client.vpn_device_configuration_script(resource_group_name=resource_group_name,
                                                  virtual_network_gateway_connection_name=virtual_network_gateway_connection_name,
                                                  parameters=parameters)


def network_virtual_network_gateway_connection_get_ike_sas(client,
                                                           resource_group_name,
                                                           virtual_network_gateway_connection_name,
                                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_get_ike_sas,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_connection_name=virtual_network_gateway_connection_name)


def network_virtual_network_gateway_connection_start_packet_capture(client,
                                                                    resource_group_name,
                                                                    virtual_network_gateway_connection_name,
                                                                    filter_data=None,
                                                                    no_wait=False):
    parameters = {}
    parameters['filter_data'] = filter_data
    return sdk_no_wait(no_wait,
                       client.begin_start_packet_capture,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_connection_name=virtual_network_gateway_connection_name,
                       parameters=parameters)


def network_virtual_network_gateway_connection_stop_packet_capture(client,
                                                                   resource_group_name,
                                                                   virtual_network_gateway_connection_name,
                                                                   sas_url=None,
                                                                   no_wait=False):
    parameters = {}
    parameters['sas_url'] = sas_url
    return sdk_no_wait(no_wait,
                       client.begin_stop_packet_capture,
                       resource_group_name=resource_group_name,
                       virtual_network_gateway_connection_name=virtual_network_gateway_connection_name,
                       parameters=parameters)


def network_virtual_network_tap_list(client,
                                     resource_group_name):
    return client.list_by_resource_group(resource_group_name=resource_group_name)


def network_virtual_network_tap_show(client,
                                     resource_group_name,
                                     tap_name):
    return client.get(resource_group_name=resource_group_name,
                      tap_name=tap_name)


def network_virtual_network_tap_delete(client,
                                       resource_group_name,
                                       tap_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       tap_name=tap_name)


def network_vpn_site_link_list(client,
                               resource_group_name,
                               vpn_site_name):
    return client.list_by_vpn_site(resource_group_name=resource_group_name,
                                   vpn_site_name=vpn_site_name)


def network_vpn_site_link_show(client,
                               resource_group_name,
                               vpn_site_name,
                               vpn_site_link_name):
    return client.get(resource_group_name=resource_group_name,
                      vpn_site_name=vpn_site_name,
                      vpn_site_link_name=vpn_site_link_name)


def network_vpn_gateway_reset(client,
                              resource_group_name,
                              gateway_name,
                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_reset,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name)


def network_vpn_gateway_start_packet_capture(client,
                                             resource_group_name,
                                             gateway_name,
                                             filter_data=None,
                                             no_wait=False):
    parameters = {}
    parameters['filter_data'] = filter_data
    return sdk_no_wait(no_wait,
                       client.begin_start_packet_capture,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name,
                       parameters=parameters)


def network_vpn_gateway_stop_packet_capture(client,
                                            resource_group_name,
                                            gateway_name,
                                            sas_url=None,
                                            no_wait=False):
    parameters = {}
    parameters['sas_url'] = sas_url
    return sdk_no_wait(no_wait,
                       client.begin_stop_packet_capture,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name,
                       parameters=parameters)


def network_vpn_connection_start_packet_capture(client,
                                                resource_group_name,
                                                gateway_name,
                                                vpn_connection_name,
                                                filter_data=None,
                                                link_connection_names=None,
                                                no_wait=False):
    parameters = {}
    parameters['filter_data'] = filter_data
    parameters['link_connection_names'] = link_connection_names
    return sdk_no_wait(no_wait,
                       client.begin_start_packet_capture,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name,
                       vpn_connection_name=vpn_connection_name,
                       parameters=parameters)


def network_vpn_connection_stop_packet_capture(client,
                                               resource_group_name,
                                               gateway_name,
                                               vpn_connection_name,
                                               sas_url=None,
                                               link_connection_names=None,
                                               no_wait=False):
    parameters = {}
    parameters['sas_url'] = sas_url
    parameters['link_connection_names'] = link_connection_names
    return sdk_no_wait(no_wait,
                       client.begin_stop_packet_capture,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name,
                       vpn_connection_name=vpn_connection_name,
                       parameters=parameters)


def network_vpn_site_link_connection_show(client,
                                          resource_group_name,
                                          gateway_name,
                                          connection_name,
                                          link_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      gateway_name=gateway_name,
                      connection_name=connection_name,
                      link_connection_name=link_connection_name)


def network_nat_rule_list(client,
                          resource_group_name,
                          gateway_name):
    return client.list_by_vpn_gateway(resource_group_name=resource_group_name,
                                      gateway_name=gateway_name)


def network_p2_s_vpn_gateway_disconnect_p2_s_vpn_connection(client,
                                                            resource_group_name,
                                                            p2_s_vpn_gateway_name,
                                                            vpn_connection_ids=None,
                                                            no_wait=False):
    request = {}
    request['vpn_connection_ids'] = vpn_connection_ids
    return sdk_no_wait(no_wait,
                       client.begin_disconnect_p2_s_vpn_connections,
                       resource_group_name=resource_group_name,
                       p2_s_vpn_gateway_name=p2_s_vpn_gateway_name,
                       request=request)


def network_p2_s_vpn_gateway_get_p2_s_vpn_connection_health(client,
                                                            resource_group_name,
                                                            gateway_name,
                                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_get_p2_s_vpn_connection_health,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name)


def network_p2_s_vpn_gateway_get_p2_s_vpn_connection_health_detailed(client,
                                                                     resource_group_name,
                                                                     gateway_name,
                                                                     vpn_user_names_filter=None,
                                                                     output_blob_sas_url=None,
                                                                     no_wait=False):
    request = {}
    request['vpn_user_names_filter'] = vpn_user_names_filter
    request['output_blob_sas_url'] = output_blob_sas_url
    return sdk_no_wait(no_wait,
                       client.begin_get_p2_s_vpn_connection_health_detailed,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name,
                       request=request)


def network_p2_s_vpn_gateway_reset(client,
                                   resource_group_name,
                                   gateway_name,
                                   no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_reset,
                       resource_group_name=resource_group_name,
                       gateway_name=gateway_name)


def network_vpn_server_configuration_associated_with_virtual_wan_list(client,
                                                                      resource_group_name,
                                                                      virtual_wan_name):
    return client.begin_list(resource_group_name=resource_group_name,
                             virtual_wan_name=virtual_wan_name)


def network_virtual_hub_bgp_connection_delete(client,
                                              resource_group_name,
                                              virtual_hub_name,
                                              connection_name,
                                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       virtual_hub_name=virtual_hub_name,
                       connection_name=connection_name)


def network_virtual_hub_bgp_connection_list_advertised_route(client,
                                                             resource_group_name,
                                                             hub_name,
                                                             connection_name):
    return client.begin_list_advertised_routes(resource_group_name=resource_group_name,
                                               hub_name=hub_name,
                                               connection_name=connection_name)


def network_virtual_hub_bgp_connection_list_learned_route(client,
                                                          resource_group_name,
                                                          hub_name,
                                                          connection_name):
    return client.begin_list_learned_routes(resource_group_name=resource_group_name,
                                            hub_name=hub_name,
                                            connection_name=connection_name)


def network_virtual_hub_ip_configuration_list(client,
                                              resource_group_name,
                                              virtual_hub_name):
    return client.list(resource_group_name=resource_group_name,
                       virtual_hub_name=virtual_hub_name)
