# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
from .testUtil import authorization_info_version11
from azure.cli.testsdk import ScenarioTest

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class HdinsightonaksClusterScenario(ScenarioTest):
    location = 'eastus2'
    resourceGroup = "hilocli-test"
    clusterPoolName = "hilopool"

    def test_available_cluster_version_list(self):
        self.kwargs.update({
            'loc': self.location
        })

        # List a list of available cluster versions.
        cluster_version_list = self.cmd(
            'az hdinsight-on-aks list-available-cluster-version -l {loc}').get_output_in_json()
        assert len(cluster_version_list) > 0

    def test_check_name_availability(self):
        self.kwargs.update({
            'loc': self.location,
            'poolName': self.create_random_name(prefix='hilopool-', length=18),
            'clusterName': self.create_random_name(prefix='hilo-', length=12),
            'clusterType': "Microsoft.HDInsight/clusterPools/clusters"
        })

        # 
        self.cmd('az hdinsight-on-aks check-name-availability -l {loc} --name {poolName}/{clusterName} --type {clusterType}', checks=[
            self.check("nameAvailable", True)
        ])
        

    def test_create_cluster(self):
        self.kwargs.update({
            "loc": self.location,
            "rg": self.resourceGroup,
            "poolName": self.clusterPoolName,
            "clusterPoolVersion": "1.1",
            "clusterName": self.create_random_name(prefix='hilo-', length=18),
            "clusterType": "Spark",
            # Create a cluster node-profile object.
            "computeNodeProfile": self.cmd('az hdinsight-on-aks cluster node-profile create --count 3 --node-type Worker --vm-size Standard_D16d_v5').get_output_in_json(),
            "targetWorkerNodeCount": 4
        })

        self.cmd('az hdinsight-on-aks clusterpool create -g {rg} -n {poolName} -l {loc} --version {clusterPoolVersion} --workernode-size Standard_E4s_v3')

        # Get spark cluster version and ossVersion.
        spark_versions = self.cmd(
            'az hdinsight-on-aks list-available-cluster-version -l {loc} --query "[?clusterType==\'Spark\']"').get_output_in_json()

        # Create a Spark cluster.
        create_command = 'az hdinsight-on-aks cluster create -n {clusterName} --cluster-pool-name {poolName} -g {rg} -l {loc} --cluster-type {clusterType} --spark-storage-url abfs://testspzrk@hilostorage.dfs.core.windows.net/ --cluster-version ' + \
            spark_versions[0]["clusterVersion"] + ' --oss-version ' + spark_versions[0]["ossVersion"] + \
            ' --nodes ' + '{computeNodeProfile}' + ' ' + authorization_info_version11()
        self.cmd(create_command, checks=[
            self.check("name", '{clusterName}'),
            self.check("location", '{loc}'),
            self.check("computeProfile.nodes[1].count", 3)

        ])

        # Get a cluster with cluster name.
        self.cmd('az hdinsight-on-aks cluster show -n {clusterName} --cluster-pool-name {poolName} -g {rg}', checks=[
            self.check("name", '{clusterName}'),
            self.check("clusterType", '{clusterType}'),
            self.check("status", 'Running')
        ])

        # List all cluster in a cluster pool.
        cluster_list = self.cmd(
            'az hdinsight-on-aks cluster list --cluster-pool-name {poolName} -g {rg}').get_output_in_json()
        assert len(cluster_list) > 0

        # Resize a cluster.
        self.cmd(
            'az hdinsight-on-aks cluster resize --cluster-name {clusterName} --cluster-pool-name {poolName} -g {rg} -l {loc} --target-worker-node-count {targetWorkerNodeCount}')
        self.cmd('az hdinsight-on-aks cluster show -n {clusterName} --cluster-pool-name {poolName} -g {rg}', checks=[
            self.check("computeProfile.nodes[1].count", '{targetWorkerNodeCount}')
        ])

        # Get cluster instance view.
        self.cmd('az hdinsight-on-aks cluster instance-view show --cluster-name {clusterName} --cluster-pool-name {poolName} -g {rg}', checks=[
            self.check("status.ready", True)
        ])
