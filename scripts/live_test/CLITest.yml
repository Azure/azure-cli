# Some content of this file is generated.

name: CLI TEST RUN $(USER_TARGET) $(USER_LIVE) $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    exclude:
    - '*'

#schedules:
#- cron: "0 18 * * 5"
#  displayName: Weekly Friday test
#  branches:
#    include:
#    - CLITest
#  always: true

jobs:
- job: LiveTestPython38
  displayName: Live Test Python 3.8
  timeoutInMinutes: 9999
  strategy:
    maxParallel: 20
    matrix:
      acr:
        Target: acr
      acs:
        Target: acs
      advisor:
        Target: advisor
      ams:
        Target: ams
      apim:
        Target: apim
      appconfig:
        Target: appconfig
      appservice:
        Target: appservice
      aro:
        Target: aro
      backup:
        Target: backup
      batch:
        Target: batch
      batchai:
        Target: batchai
      billing:
        Target: billing
      botservice:
        Target: botservice
      cdn:
        Target: cdn
      cloud:
        Target: cloud
      cognitiveservices:
        Target: cognitiveservices
      config:
        Target: config
      configure:
        Target: configure
      consumption:
        Target: consumption
      container:
        Target: container
      cosmosdb:
        Target: cosmosdb
      deploymentmanager:
        Target: deploymentmanager
      dla:
        Target: dla
      dls:
        Target: dls
      dms:
        Target: dms
      eventgrid:
        Target: eventgrid
      eventhubs:
        Target: eventhubs
      extension:
        Target: extension
      feedback:
        Target: feedback
      find:
        Target: find
      hdinsight:
        Target: hdinsight
      iot:
        Target: iot
      iotcentral:
        Target: iotcentral
      keyvault:
        Target: keyvault
      kusto:
        Target: kusto
      lab:
        Target: lab
      managedservices:
        Target: managedservices
      maps:
        Target: maps
      monitor:
        Target: monitor
      natgateway:
        Target: natgateway
      netappfiles:
        Target: netappfiles
      network:
        Target: network
      policyinsights:
        Target: policyinsights
      privatedns:
        Target: privatedns
      profile:
        Target: profile
      rdbms:
        Target: rdbms
      redis:
        Target: redis
      relay:
        Target: relay
      reservations:
        Target: reservations
      resource:
        Target: resource
      role:
        Target: role
      search:
        Target: search
      security:
        Target: security
      servicebus:
        Target: servicebus
      servicefabric:
        Target: servicefabric
      signalr:
        Target: signalr
      sql:
        Target: sql
      sqlvm:
        Target: sqlvm
      storage:
        Target: storage
      util:
        Target: util
      vm:
        Target: vm
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
    - bash: |
        if [[ "$(USER_TARGET)" =~ "$(Target)" || "$(USER_TARGET)" == "" ]]; then
          echo "Match!"
          echo "##vso[task.setvariable variable=Match]1"
        else
          echo "Not match!"
          echo "##vso[task.setvariable variable=Match]0"
        fi
    - task: UsePythonVersion@0
      condition: eq(variables.Match, '1')
      inputs:
        versionSpec: '3.8'
        addToPath: true
        architecture: 'x64'
    - bash: |
        cd ..
        pwd
        ls
        # ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
        git clone -b $(USER_BRANCH) $(USER_REPO)
        #git clone https://github.com/Azure/azure-cli-extensions.git
        python -m venv env
        source env/bin/activate
        # pip install azdev
        git clone https://github.com/Azure/azure-cli-dev-tools.git
        pip install -e azure-cli-dev-tools
        pip install pytest-json-report
        pip install pytest-html
        pip install pytest-rerunfailures
        azdev setup -c azure-cli
        # az login --service-principal --username $(APP_ID) --password $(PASSWORD) --tenant $(TENANT_ID)
        az login -u azureclitest@azuresdkteam.onmicrosoft.com -p $(AZURECLITESTPASSWORD)
        az account set -s 0b1f6471-1bf0-4dda-aec3-cb9272f09590
        # Sequential
        azdev test $(Target) $(USER_LIVE) --mark serial --xml-path test_results.sequential.xml --no-exitfirst -a "--json-report --json-report-summary --json-report-file=$(Target).report.sequential.json --html=$(Target).report.sequential.html --self-contained-html --reruns 3 -s"
        # Parallel
        azdev test $(Target) $(USER_LIVE) --mark "not serial" --xml-path test_results.parallel.xml --no-exitfirst -a "-n $(USER_PARALLELISM) --json-report --json-report-summary --json-report-file=$(Target).report.parallel.json --html=$(Target).report.parallel.html --self-contained-html --reruns 3 -s"
        pwd
        ls
      condition: eq(variables.Match, '1')
    - task: PublishTestResults@2
      condition: eq(variables.Match, '1')
      inputs:
        testResultsFiles: '/home/vsts/work/1/test_results.*.xml'
        testRunTitle: 'Azure CLI live test results of $(Target)'
        mergeTestResults: true
        # testResultsFormat: 'JUnit'
    - task: PublishBuildArtifacts@1
      condition: eq(variables.Match, '1')
      inputs:
        PathtoPublish: '/home/vsts/work/1/$(Target).report.sequential.json'
        ArtifactName: '$(Target).report.sequential.json'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      condition: eq(variables.Match, '1')
      inputs:
        PathtoPublish: '/home/vsts/work/1/$(Target).report.sequential.html'
        ArtifactName: '$(Target).report.sequential.html'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      condition: eq(variables.Match, '1')
      inputs:
        PathtoPublish: '/home/vsts/work/1/$(Target).report.parallel.json'
        ArtifactName: '$(Target).report.parallel.json'
        publishLocation: 'Container'
    - task: PublishBuildArtifacts@1
      condition: eq(variables.Match, '1')
      inputs:
        PathtoPublish: '/home/vsts/work/1/$(Target).report.parallel.html'
        ArtifactName: '$(Target).report.parallel.html'
        publishLocation: 'Container'

- job: SendEmail
  displayName: Send email
  timeoutInMinutes: 180
  dependsOn: LiveTestPython38
  condition: succeededOrFailed()
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
        architecture: 'x64'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.ArtifactsDirectory)'
    - bash: |
        echo $(System.ArtifactsDirectory)
        ls $(System.ArtifactsDirectory)
        pwd
        commit_id=`git ls-remote https://github.com/Azure/azure-cli.git HEAD`
        pip install sendgrid
        # Send notification
        az -v
        az login -u azureclitest@azuresdkteam.onmicrosoft.com -p $(AZURECLITESTPASSWORD)
        python /home/vsts/work/1/s/scripts/live_test/sendemail.py "$(SENDGRID_KEY)" "$(Build.BuildId)" "$(USER_REPO)" "$(USER_BRANCH)" "$(USER_TARGET)" "$(USER_LIVE)" "$(System.ArtifactsDirectory)" "$(Build.RequestedForEmail)" "$(ACCOUNT_KEY)"
        # python /home/vsts/work/1/s/scripts/live_test/upload.py "$(System.ArtifactsDirectory)" "$(ACCOUNT_KEY)" "$(USER_LIVE)"
        # Clean resources
        if [[ "$(USER_LIVE)" == "--live" && "$(USER_TARGET)" == "" ]]; then
          python /home/vsts/work/1/s/scripts/live_test/clean.py
        fi
#    - task: AzureCLI@2
#      inputs:
#        azureSubscription: 'AzureSDKTest(0b1f6471-1bf0-4dda-aec3-cb9272f09590)'
#        scriptType: 'bash'
#        scriptLocation: 'inlineScript'
#        inlineScript: |
#          az storage container create -n `date +%Y%m%d%H%M%S` --account-name clitestresultstac --account-key $(ACCOUNT_KEY)
#          #az storage blob upload -f -c -n