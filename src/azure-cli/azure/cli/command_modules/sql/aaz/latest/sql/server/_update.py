# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sql server update",
)
class Update(AAZCommand):
    """Update a server.
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.sql/servers/{}", "2024-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.server_name = AAZStrArg(
            options=["-n", "--name", "--server-name"],
            help="The name of the server.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Identity"

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.administrator_login_password = AAZStrArg(
            options=["--administrator-login-password"],
            arg_group="Properties",
            help="The administrator login password (required for server creation).",
            nullable=True,
        )
        _args_schema.federated_client_id = AAZUuidArg(
            options=["--federated-client-id"],
            arg_group="Properties",
            help="The Client id used for cross tenant CMK scenario",
            nullable=True,
        )
        _args_schema.is_i_pv6_enabled = AAZStrArg(
            options=["--is-i-pv6-enabled"],
            arg_group="Properties",
            help="Whether or not to enable IPv6 support for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.key_id = AAZStrArg(
            options=["--key-id"],
            arg_group="Properties",
            help="A CMK URI of the key to use for encryption.",
            nullable=True,
        )
        _args_schema.minimal_tls_version = AAZStrArg(
            options=["--minimal-tls-version"],
            arg_group="Properties",
            help="Minimal TLS version. Allowed values: 'None', 1.0', '1.1', '1.2', '1.3'",
            nullable=True,
            enum={"1.0": "1.0", "1.1": "1.1", "1.2": "1.2", "1.3": "1.3", "None": "None"},
        )
        _args_schema.primary_user_assigned_identity_id = AAZStrArg(
            options=["--primary-user-assigned-identity-id"],
            arg_group="Properties",
            help="The resource id of a user assigned identity to be used by default.",
            nullable=True,
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled' or 'SecuredByPerimeter'",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled", "SecuredByPerimeter": "SecuredByPerimeter"},
        )
        _args_schema.restrict_outbound_network_access = AAZStrArg(
            options=["--restrict-outbound-network-access"],
            arg_group="Properties",
            help="Whether or not to restrict outbound network access for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.retention_days = AAZIntArg(
            options=["--retention-days"],
            arg_group="Properties",
            help="Number of days this server will stay soft-deleted.",
            nullable=True,
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="The version of the server.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ServersGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ServersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ServersGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serverName", self.ctx.args.server_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_server_read(cls._schema_on_200)

            return cls._schema_on_200

    class ServersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serverName", self.ctx.args.server_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_server_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("administratorLoginPassword", AAZStrType, ".administrator_login_password", typ_kwargs={"flags": {"secret": True}})
                properties.set_prop("federatedClientId", AAZStrType, ".federated_client_id")
                properties.set_prop("isIPv6Enabled", AAZStrType, ".is_i_pv6_enabled")
                properties.set_prop("keyId", AAZStrType, ".key_id")
                properties.set_prop("minimalTlsVersion", AAZStrType, ".minimal_tls_version")
                properties.set_prop("primaryUserAssignedIdentityId", AAZStrType, ".primary_user_assigned_identity_id")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("restrictOutboundNetworkAccess", AAZStrType, ".restrict_outbound_network_access")
                properties.set_prop("retentionDays", AAZIntType, ".retention_days")
                properties.set_prop("version", AAZStrType, ".version")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_server_read = None

    @classmethod
    def _build_schema_server_read(cls, _schema):
        if cls._schema_server_read is not None:
            _schema.id = cls._schema_server_read.id
            _schema.identity = cls._schema_server_read.identity
            _schema.kind = cls._schema_server_read.kind
            _schema.location = cls._schema_server_read.location
            _schema.name = cls._schema_server_read.name
            _schema.properties = cls._schema_server_read.properties
            _schema.tags = cls._schema_server_read.tags
            _schema.type = cls._schema_server_read.type
            return

        cls._schema_server_read = _schema_server_read = AAZObjectType()

        server_read = _schema_server_read
        server_read.id = AAZStrType(
            flags={"read_only": True},
        )
        server_read.identity = AAZIdentityObjectType()
        server_read.kind = AAZStrType(
            flags={"read_only": True},
        )
        server_read.location = AAZStrType(
            flags={"required": True},
        )
        server_read.name = AAZStrType(
            flags={"read_only": True},
        )
        server_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        server_read.tags = AAZDictType()
        server_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_server_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType()
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_server_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_server_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_server_read.properties
        properties.administrator_login = AAZStrType(
            serialized_name="administratorLogin",
        )
        properties.administrators = AAZObjectType()
        properties.create_mode = AAZStrType(
            serialized_name="createMode",
        )
        properties.external_governance_status = AAZStrType(
            serialized_name="externalGovernanceStatus",
            flags={"read_only": True},
        )
        properties.federated_client_id = AAZStrType(
            serialized_name="federatedClientId",
        )
        properties.fully_qualified_domain_name = AAZStrType(
            serialized_name="fullyQualifiedDomainName",
            flags={"read_only": True},
        )
        properties.is_i_pv6_enabled = AAZStrType(
            serialized_name="isIPv6Enabled",
        )
        properties.key_id = AAZStrType(
            serialized_name="keyId",
        )
        properties.minimal_tls_version = AAZStrType(
            serialized_name="minimalTlsVersion",
        )
        properties.primary_user_assigned_identity_id = AAZStrType(
            serialized_name="primaryUserAssignedIdentityId",
        )
        properties.private_endpoint_connections = AAZListType(
            serialized_name="privateEndpointConnections",
            flags={"read_only": True},
        )
        properties.public_network_access = AAZStrType(
            serialized_name="publicNetworkAccess",
        )
        properties.restrict_outbound_network_access = AAZStrType(
            serialized_name="restrictOutboundNetworkAccess",
        )
        properties.retention_days = AAZIntType(
            serialized_name="retentionDays",
        )
        properties.state = AAZStrType(
            flags={"read_only": True},
        )
        properties.version = AAZStrType()
        properties.workspace_feature = AAZStrType(
            serialized_name="workspaceFeature",
            flags={"read_only": True},
        )

        administrators = _schema_server_read.properties.administrators
        administrators.administrator_type = AAZStrType(
            serialized_name="administratorType",
        )
        administrators.azure_ad_only_authentication = AAZBoolType(
            serialized_name="azureADOnlyAuthentication",
        )
        administrators.login = AAZStrType()
        administrators.principal_type = AAZStrType(
            serialized_name="principalType",
        )
        administrators.sid = AAZStrType()
        administrators.tenant_id = AAZStrType(
            serialized_name="tenantId",
        )

        private_endpoint_connections = _schema_server_read.properties.private_endpoint_connections
        private_endpoint_connections.Element = AAZObjectType()

        _element = _schema_server_read.properties.private_endpoint_connections.Element
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.properties = AAZObjectType(
            flags={"read_only": True},
        )

        properties = _schema_server_read.properties.private_endpoint_connections.Element.properties
        properties.group_ids = AAZListType(
            serialized_name="groupIds",
            flags={"read_only": True},
        )
        properties.private_endpoint = AAZObjectType(
            serialized_name="privateEndpoint",
        )
        properties.private_link_service_connection_state = AAZObjectType(
            serialized_name="privateLinkServiceConnectionState",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        group_ids = _schema_server_read.properties.private_endpoint_connections.Element.properties.group_ids
        group_ids.Element = AAZStrType()

        private_endpoint = _schema_server_read.properties.private_endpoint_connections.Element.properties.private_endpoint
        private_endpoint.id = AAZStrType()

        private_link_service_connection_state = _schema_server_read.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
        private_link_service_connection_state.actions_required = AAZStrType(
            serialized_name="actionsRequired",
            flags={"read_only": True},
        )
        private_link_service_connection_state.description = AAZStrType(
            flags={"required": True},
        )
        private_link_service_connection_state.status = AAZStrType(
            flags={"required": True},
        )

        tags = _schema_server_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_server_read.id
        _schema.identity = cls._schema_server_read.identity
        _schema.kind = cls._schema_server_read.kind
        _schema.location = cls._schema_server_read.location
        _schema.name = cls._schema_server_read.name
        _schema.properties = cls._schema_server_read.properties
        _schema.tags = cls._schema_server_read.tags
        _schema.type = cls._schema_server_read.type


__all__ = ["Update"]
