# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .queue_build_request import QueueBuildRequest


class QuickBuildRequest(QueueBuildRequest):
    """The queue build request parameters for a quick build.

    :param type: Constant filled by server.
    :type type: str
    :param image_name: The fully qualified image name with the tag that the
     build tags it.
    :type image_name: str
    :param source_location: The URL(absolute or relative) of the source that
     needs to be built. For Docker build, it can be an URL to a tar or github
     repoistory as supported by Docker.
     If it is relative URL, the relative path should be obtained from calling
     getSourceUploadUrl API.
    :type source_location: str
    :param build_arguments: The collection of build arguments to be used.
    :type build_arguments: list[~containerregistrybuild.models.BuildArgument]
    :param is_push_enabled: The value of this property indicate whether the
     image built should be pushed to the registry or not. Default value: False
     .
    :type is_push_enabled: bool
    :param timeout: Build timeout in seconds.
    :type timeout: int
    :param platform: The platform properties against which the build will
     happen.
    :type platform: ~containerregistrybuild.models.PlatformProperties
    :param docker_file_path: The Docker file path relative to the source
     location.
    :type docker_file_path: str
    """

    _validation = {
        'type': {'required': True},
        'source_location': {'required': True},
        'platform': {'required': True},
        'docker_file_path': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'image_name': {'key': 'imageName', 'type': 'str'},
        'source_location': {'key': 'sourceLocation', 'type': 'str'},
        'build_arguments': {'key': 'buildArguments', 'type': '[BuildArgument]'},
        'is_push_enabled': {'key': 'isPushEnabled', 'type': 'bool'},
        'timeout': {'key': 'timeout', 'type': 'int'},
        'platform': {'key': 'platform', 'type': 'PlatformProperties'},
        'docker_file_path': {'key': 'dockerFilePath', 'type': 'str'},
    }

    def __init__(self, source_location, platform, docker_file_path, image_name=None, build_arguments=None, is_push_enabled=False, timeout=None):
        super(QuickBuildRequest, self).__init__()
        self.image_name = image_name
        self.source_location = source_location
        self.build_arguments = build_arguments
        self.is_push_enabled = is_push_enabled
        self.timeout = timeout
        self.platform = platform
        self.docker_file_path = docker_file_path
        self.type = 'QuickBuild'
