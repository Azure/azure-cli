{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "URL of the template to deploy."
      }
    },
    "applicationGatewayName": {
      "type": "string",
      "metadata": {
        "description": "The name of the application gateway."
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of instances to use with the application gateway."
      }
    },
    "certData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The contents of the PFX certificate file."
      }
    },
    "certPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The certificate password."
      }
    },
    "frontendPort": {
      "type": "int",
      "defaultValue": "",
      "metadata": {
        "description": "The front end port number."
      }
    },
    "frontendType": {
      "type": "string",
      "defaultValue": "privateIp",
      "allowedValues": [ "publicIp", "privateIp" ],
      "metadata": {
        "description": "Specify which kind of frontend configuration to create."
      }
    },
    "httpListenerProtocol": {
      "type": "string",
      "defaultValue": "http",
      "allowedValues": [ "http", "https" ],
      "metadata": {
        "description": "The HTTP listener protocol."
      }
    },
    "httpSettingsCookieBasedAffinity": {
      "type": "string",
      "defaultValue": "disabled",
      "allowedValues": [ "enabled", "disabled" ],
      "metadata": {
        "description": "Enable or disable HTTP settings cookie based affinity."
      }
    },
    "httpSettingsPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "The HTTP settings port."
      }
    },
    "httpSettingsProtocol": {
      "type": "string",
      "defaultValue": "http",
      "allowedValues": [ "http", "https" ],
      "metadata": {
        "description": "The HTTP settings protocol."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location in which to create the application gateway."
      }
    },
    "privateIpAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The static private IP address to associate with the application gateway frontend."
      }
    },
    "privateIpAddressAllocation": {
      "type": "string",
      "defaultValue": "dynamic",
      "allowedValues": [ "dynamic", "static" ],
      "metadata": {
        "description": "Specify the kind of private IP allocation."
      }
    },
    "publicIpAddress": {
      "type": "string",
      "defaultValue": "[concat('PublicIP', parameters('applicationGatewayName'))]",
      "metadata": {
        "description": "The name or ID of the public IP address."
      }
    },
    "publicIpAddressType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [ "none", "new", "existingName", "existingId" ],
      "metadata": {
        "description": "Specify the type of public IP address."
      }
    },
    "publicIpAddressAllocation": {
      "type": "string",
      "defaultValue": "dynamic",
      "allowedValues": [ "dynamic", "static" ],
      "metadata": {
        "description": "Specify the kind of public IP allocation for new public IPs."
      }
    },
    "routingRuleType": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [ "Basic", "PathBasedRouting" ],
      "metadata": {
        "description": "The request routing rule type."
      }
    },
    "servers": {
      "type": "array",
      "defaultValue": [ ],
      "metadata": {
        "description": "The list of IP addresses or DNS names corresponding to backend servers."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard_Medium",
      "metadata": {
        "description": "The name of the SKU. (Standard_Small, Standard_Medium, Standard_Large)."
      }
    },
    "skuTier": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The SKU tier."
      }
    },
    "subnet": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "The name or ID of the subnet."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The subnet prefix in CIDR format."
      }
    },
    "subnetType": {
      "type": "string",
      "allowedValues": [ "new", "existingId", "existingName" ],
      "defaultValue": "new",
      "metadata": {
        "description": "Use a new or existing subnet."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": { },
      "metadata": {
        "description": "Tags object."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "[concat(parameters('applicationGatewayName'),'Vnet')]",
      "metadata": {
        "description": "The name of the virtual network (VNet) associated with the subnet."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "The virtual network address range in CIDR format."
      }
    }
  },
  "variables": {
    "applicationGatewayId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/applicationGateways/',parameters('applicationGatewayName'))]",
    "applicationGatewayProperties": {
      "http": {
        "sku": {
          "name": "[parameters('skuName')]",
          "tier": "[parameters('skuTier')]",
          "capacity": "[parameters('capacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('subnetIds')[parameters('subnetType')]]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": "[variables('frontendIpProperties')[parameters('frontendType')]]"
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort",
            "properties": {
              "Port": "[parameters('frontendPort')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses": "[parameters('servers')]"
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": "[parameters('httpSettingsPort')]",
              "Protocol": "[parameters('httpSettingsProtocol')]",
              "CookieBasedAffinity": "[parameters('httpSettingsCookieBasedAffinity')]"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "FrontendIpConfiguration": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/frontendPorts/appGatewayFrontendPort')]"
              },
              "Protocol": "http",
              "SslCertificate": null
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "[parameters('routingRuleType')]",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/httpListeners/appGatewayHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              }
            }
          }
        ]
      },
      "https": {
        "sku": {
          "name": "[parameters('skuName')]",
          "tier": "[parameters('skuTier')]",
          "capacity": "[parameters('capacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('subnetIds')[parameters('subnetType')]]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": "[variables('frontendIpProperties')[parameters('frontendType')]]"
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort",
            "properties": {
              "Port": "[parameters('frontendPort')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses": "[parameters('servers')]"
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": "[parameters('httpSettingsPort')]",
              "Protocol": "[parameters('httpSettingsProtocol')]",
              "CookieBasedAffinity": "[parameters('httpSettingsCookieBasedAffinity')]"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "FrontendIpConfiguration": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/frontendPorts/appGatewayFrontendPort')]"
              },
              "Protocol": "https",
              "SslCertificate": {
                "Id": "[concat(variables('applicationGatewayId'),'/sslCertificates/',variables('sslCertificateName'))]"
              }
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "[parameters('routingRuleType')]",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/httpListeners/appGatewayHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName')),'/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              }
            }
          }
        ],
        "sslCertificates": [
          {
            "name": "[variables('sslCertificateName')]",
            "properties": {
              "data": "[parameters('certData')]",
              "password": "[parameters('certPassword')]"
            }
          }
        ]
      }
    },
    "frontendIpProperties": {
      "publicIp": {
        "publicIpAddress": {
          "id": "[variables('publicIpIds')[parameters('publicIpAddressType')]]"
        }
      },
      "privateIp": {
        "privateIPAddress": "[parameters('privateIpAddress')]",
        "privateIPAllocationMethod": "[parameters('privateIpAddressAllocation')]",
        "subnet": {
          "id": "[variables('subnetIds')[parameters('subnetType')]]"
        }
      }
    },
    "publicIpDeploymentName": "[concat('PublicIp',parameters('applicationGatewayName'))]",
    "publicIpIds": {
      "none": "[parameters('publicIpAddress')]",
      "new": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/publicIpAddresses/',parameters('publicIpAddress'))]",
      "existingName": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/publicIpAddresses/',parameters('publicIpAddress'))]",
      "existingId": "[parameters('publicIpAddress')]"
    },
    "publicIpTemplateUri": "https://azuresdkci.blob.core.windows.net/templatehost/CreatePublicIp_2016-07-19/azuredeploy.json",
    "publicIpTemplateUriEmpty": "https://azuresdkci.blob.core.windows.net/templatehost/CreatePublicIp_2016-07-19/azuredeploy_empty.json",
    "publicIpTemplateFilePaths": {
      "existingId": "[variables('publicIpTemplateUriEmpty')]",
      "existingName": "[variables('publicIpTemplateUriEmpty')]",
      "new": "[variables('publicIpTemplateUri')]",
      "none": "[variables('publicIpTemplateUriEmpty')]"
    },
    "sslCertificateName": "[concat(parameters('applicationGatewayName'),'SslCert')]",
    "subnetIds": {
      "existingId": "[parameters('subnet')]",
      "existingName": "[concat(variables('vnetId'),'/subnets/',parameters('subnet'))]",
      "new": "[concat(variables('vnetId'),'/subnets/',parameters('subnet'))]"
    },
    "vnetDeploymentName": "[concat('VNET',parameters('applicationGatewayName'))]",
    "vnetId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/virtualNetworks/',parameters('virtualNetworkName'))]",
    "vnetTemplateUri": "https://azuresdkci.blob.core.windows.net/templatehost/CreateVnet_2016-07-18/azuredeploy.json",
    "vnetTemplateUriEmpty": "https://azuresdkci.blob.core.windows.net/templatehost/CreateVnet_2016-07-18/azuredeploy_empty.json",
    "vnetTemplateFilePaths": {
      "existingId": "[variables('vnetTemplateUriEmpty')]",
      "existingName": "[variables('vnetTemplateUriEmpty')]",
      "new": "[variables('vnetTemplateUri')]"
    }
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', variables('vnetDeploymentName'))]",
        "[concat('Microsoft.Resources/deployments/', variables('publicIpDeploymentName'))]"
      ],
      "location": "[resourceGroup().location]",
      "tags": "[parameters('tags')]",
      "name": "[parameters('applicationGatewayName')]",
      "properties": "[variables('applicationGatewayProperties')[parameters('httpListenerProtocol')]]",
      "type": "Microsoft.Network/applicationGateways"
    },
    {
      "name": "[variables('vnetDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vnetTemplateFilePaths')[parameters('subnetType')]]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "subnetName": { "value": "[parameters('subnet')]" },
          "subnetPrefix": { "value": "[parameters('subnetAddressPrefix')]" },
          "virtualNetworkName": { "value": "[parameters('virtualNetworkName')]" },
          "virtualNetworkPrefix": { "value": "[parameters('vnetAddressPrefix')]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    },
    {
      "name": "[variables('publicIpDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('publicIpTemplateFilePaths')[parameters('publicIpAddressType')]]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": { "value": "[parameters('location')]" },
          "name": { "value": "[parameters('publicIpAddress')]" },
          "allocationMethod": { "value": "[parameters('publicIpAddressAllocation')]" },
          "tags": { "value": "[parameters('tags')]" }
        }
      }
    }
  ],
  "outputs": {
    "applicationGateway": {
      "type": "object",
      "value": "[reference(parameters('applicationGatewayName'))]"
    }
  }
}