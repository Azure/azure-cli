# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network watcher connection-monitor output add",
    is_preview=True,
)
class Add(AAZCommand):
    """Add a connection monitor output destination.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/connectionmonitors/{}/outputs/{}", "2022-01-01", "properties.outputs[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        #self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.InstanceCreateByJson(ctx=self.ctx)()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        _args_schema = cls._args_schema
        _args_schema.output_index = AAZIntArg(
            options=["--output-index"],
            help="output-index",
        )
        _args_schema.output_type = AAZStrArg(
            options=["--type", "--output-type"],
            help="Connection monitor output destination type. Currently, only \"Workspace\" is supported.",
            enum={"Workspace": "Workspace"},
            required=True,
        )
        _args_schema.workspace_id = AAZStrArg(
            options=["--workspace-id"],
            help="The id of log analytics workspace",
            required=True,
        )
        return cls._args_schema
    
    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result
    
    # class SubresourceSelector(AAZJsonSelector):

    #     def _get(self):
    #         result = self.ctx.vars.instance
    #         result = result.properties.outputs
    #         filters = enumerate(result)
    #         filters = filter(
    #             lambda e: e[0] == self.ctx.args.output_index,
    #             filters
    #         )
    #         idx = next(filters)[0]
    #         return result[idx]

    #     def _set(self, value):
    #         result = self.ctx.vars.instance
    #         result = result.properties.outputs
    #         filters = enumerate(result)
    #         filters = filter(
    #             lambda e: e[0] == self.ctx.args.output_index,
    #             filters
    #         )
    #         idx = next(filters, [len(result)])[0]
    #         self.ctx.args.output_index = idx
    #         result[idx] = value
    #         return
        
        
        

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):
        
        def __call__(self, *args, **kwargs):
            #self.ctx.selectors.subresource.set(self._create_instance())
            return self._create_instance()

        def _create_instance(self):

            data = {
                "type": str(self.ctx.args.output_type),
                "workspaceResourceId": str(self.ctx.args.workspace_id)
            }


            ob = str(data)
            return ob
            # _instance_value, _builder = self.new_content_builder(
            #         self.ctx.args,
            #         typ=AAZObjectType
            # )
            # _builder.set_prop("type", AAZStrType, ".output_type")
            # _builder.set_prop("workspaceSettings", AAZObjectType)

            # workspace_settings = _builder.get(".workspaceSettings")
            # if workspace_settings is not None:
            #     workspace_settings.set_prop("workspaceResourceId", AAZStrType, ".workspace_id")

            # return _instance_value

                      

__all__ = ["Add"]


