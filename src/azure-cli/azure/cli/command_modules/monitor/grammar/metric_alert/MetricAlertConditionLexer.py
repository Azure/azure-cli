# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# Generated from MetricAlertCondition.g4 by ANTLR 4.13.1
# encoding: utf-8
# pylint: disable=all
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,309,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,3,48,271,8,48,1,49,4,49,274,8,49,11,49,
        12,49,275,1,49,1,49,4,49,280,8,49,11,49,12,49,281,3,49,284,8,49,
        1,50,1,50,1,51,4,51,289,8,51,11,51,12,51,290,1,52,3,52,294,8,52,
        1,52,1,52,4,52,298,8,52,11,52,12,52,299,1,53,1,53,1,53,1,53,4,53,
        306,8,53,11,53,12,53,307,0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,0,31,0,33,0,35,0,37,0,39,
        0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,
        0,67,0,69,0,71,0,73,0,75,0,77,15,79,16,81,17,83,18,85,19,87,20,89,
        21,91,22,93,23,95,24,97,25,99,26,101,27,103,28,105,29,107,30,1,0,
        27,2,0,65,65,97,97,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,
        101,2,0,70,70,102,102,2,0,72,72,104,104,2,0,73,73,105,105,2,0,75,
        75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,
        2,0,79,79,111,111,2,0,80,80,112,112,2,0,82,82,114,114,2,0,83,83,
        115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,
        0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,1,0,48,57,1,
        0,97,122,1,0,65,90,2,0,44,44,46,46,2,0,34,34,39,39,2,0,9,9,32,32,
        301,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,115,1,0,0,0,9,117,
        1,0,0,0,11,119,1,0,0,0,13,121,1,0,0,0,15,123,1,0,0,0,17,125,1,0,
        0,0,19,127,1,0,0,0,21,129,1,0,0,0,23,131,1,0,0,0,25,133,1,0,0,0,
        27,135,1,0,0,0,29,137,1,0,0,0,31,139,1,0,0,0,33,141,1,0,0,0,35,143,
        1,0,0,0,37,145,1,0,0,0,39,147,1,0,0,0,41,149,1,0,0,0,43,151,1,0,
        0,0,45,153,1,0,0,0,47,155,1,0,0,0,49,157,1,0,0,0,51,159,1,0,0,0,
        53,161,1,0,0,0,55,163,1,0,0,0,57,165,1,0,0,0,59,167,1,0,0,0,61,169,
        1,0,0,0,63,171,1,0,0,0,65,173,1,0,0,0,67,175,1,0,0,0,69,177,1,0,
        0,0,71,179,1,0,0,0,73,181,1,0,0,0,75,183,1,0,0,0,77,185,1,0,0,0,
        79,191,1,0,0,0,81,195,1,0,0,0,83,204,1,0,0,0,85,213,1,0,0,0,87,216,
        1,0,0,0,89,224,1,0,0,0,91,227,1,0,0,0,93,233,1,0,0,0,95,238,1,0,
        0,0,97,270,1,0,0,0,99,273,1,0,0,0,101,285,1,0,0,0,103,288,1,0,0,
        0,105,297,1,0,0,0,107,305,1,0,0,0,109,110,5,46,0,0,110,2,1,0,0,0,
        111,112,5,47,0,0,112,4,1,0,0,0,113,114,5,45,0,0,114,6,1,0,0,0,115,
        116,5,95,0,0,116,8,1,0,0,0,117,118,5,92,0,0,118,10,1,0,0,0,119,120,
        5,58,0,0,120,12,1,0,0,0,121,122,5,37,0,0,122,14,1,0,0,0,123,124,
        5,44,0,0,124,16,1,0,0,0,125,126,5,124,0,0,126,18,1,0,0,0,127,128,
        5,40,0,0,128,20,1,0,0,0,129,130,5,41,0,0,130,22,1,0,0,0,131,132,
        5,43,0,0,132,24,1,0,0,0,133,134,5,42,0,0,134,26,1,0,0,0,135,136,
        5,126,0,0,136,28,1,0,0,0,137,138,7,0,0,0,138,30,1,0,0,0,139,140,
        7,1,0,0,140,32,1,0,0,0,141,142,7,2,0,0,142,34,1,0,0,0,143,144,7,
        3,0,0,144,36,1,0,0,0,145,146,7,4,0,0,146,38,1,0,0,0,147,148,7,5,
        0,0,148,40,1,0,0,0,149,150,7,6,0,0,150,42,1,0,0,0,151,152,7,7,0,
        0,152,44,1,0,0,0,153,154,7,8,0,0,154,46,1,0,0,0,155,156,7,9,0,0,
        156,48,1,0,0,0,157,158,7,10,0,0,158,50,1,0,0,0,159,160,7,11,0,0,
        160,52,1,0,0,0,161,162,7,12,0,0,162,54,1,0,0,0,163,164,7,13,0,0,
        164,56,1,0,0,0,165,166,7,14,0,0,166,58,1,0,0,0,167,168,7,15,0,0,
        168,60,1,0,0,0,169,170,7,16,0,0,170,62,1,0,0,0,171,172,7,17,0,0,
        172,64,1,0,0,0,173,174,7,18,0,0,174,66,1,0,0,0,175,176,7,19,0,0,
        176,68,1,0,0,0,177,178,7,20,0,0,178,70,1,0,0,0,179,180,7,21,0,0,
        180,72,1,0,0,0,181,182,7,22,0,0,182,74,1,0,0,0,183,184,7,23,0,0,
        184,76,1,0,0,0,185,186,3,65,32,0,186,187,3,39,19,0,187,188,3,35,
        17,0,188,189,3,55,27,0,189,190,3,35,17,0,190,78,1,0,0,0,191,192,
        3,29,14,0,192,193,3,49,24,0,193,194,3,33,16,0,194,80,1,0,0,0,195,
        196,3,41,20,0,196,197,3,49,24,0,197,198,3,31,15,0,198,199,3,45,22,
        0,199,200,3,61,30,0,200,201,3,33,16,0,201,202,3,35,17,0,202,203,
        3,57,28,0,203,82,1,0,0,0,204,205,3,35,17,0,205,206,3,67,33,0,206,
        207,3,31,15,0,207,208,3,45,22,0,208,209,3,61,30,0,209,210,3,33,16,
        0,210,211,3,35,17,0,211,212,3,57,28,0,212,84,1,0,0,0,213,214,3,51,
        25,0,214,215,3,55,27,0,215,86,1,0,0,0,216,217,3,33,16,0,217,218,
        3,69,34,0,218,219,3,49,24,0,219,220,3,29,14,0,220,221,3,47,23,0,
        221,222,3,41,20,0,222,223,3,31,15,0,223,88,1,0,0,0,224,225,3,51,
        25,0,225,226,3,37,18,0,226,90,1,0,0,0,227,228,3,57,28,0,228,229,
        3,41,20,0,229,230,3,49,24,0,230,231,3,31,15,0,231,232,3,35,17,0,
        232,92,1,0,0,0,233,234,3,65,32,0,234,235,3,41,20,0,235,236,3,59,
        29,0,236,237,3,39,19,0,237,94,1,0,0,0,238,239,3,57,28,0,239,240,
        3,43,21,0,240,241,3,41,20,0,241,242,3,53,26,0,242,243,3,47,23,0,
        243,244,3,35,17,0,244,245,3,59,29,0,245,246,3,55,27,0,246,247,3,
        41,20,0,247,248,3,31,15,0,248,249,3,63,31,0,249,250,3,29,14,0,250,
        251,3,45,22,0,251,252,3,41,20,0,252,253,3,33,16,0,253,254,3,29,14,
        0,254,255,3,59,29,0,255,256,3,41,20,0,256,257,3,51,25,0,257,258,
        3,49,24,0,258,96,1,0,0,0,259,271,5,60,0,0,260,261,5,60,0,0,261,271,
        5,61,0,0,262,271,5,61,0,0,263,264,5,62,0,0,264,271,5,61,0,0,265,
        271,5,62,0,0,266,267,5,33,0,0,267,271,5,61,0,0,268,269,5,62,0,0,
        269,271,5,60,0,0,270,259,1,0,0,0,270,260,1,0,0,0,270,262,1,0,0,0,
        270,263,1,0,0,0,270,265,1,0,0,0,270,266,1,0,0,0,270,268,1,0,0,0,
        271,98,1,0,0,0,272,274,3,71,35,0,273,272,1,0,0,0,274,275,1,0,0,0,
        275,273,1,0,0,0,275,276,1,0,0,0,276,283,1,0,0,0,277,279,7,24,0,0,
        278,280,3,71,35,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,
        0,281,282,1,0,0,0,282,284,1,0,0,0,283,277,1,0,0,0,283,284,1,0,0,
        0,284,100,1,0,0,0,285,286,7,25,0,0,286,102,1,0,0,0,287,289,7,26,
        0,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,
        0,0,291,104,1,0,0,0,292,294,5,13,0,0,293,292,1,0,0,0,293,294,1,0,
        0,0,294,295,1,0,0,0,295,298,5,10,0,0,296,298,5,13,0,0,297,293,1,
        0,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,
        0,0,0,300,106,1,0,0,0,301,306,3,73,36,0,302,306,3,75,37,0,303,306,
        3,71,35,0,304,306,5,95,0,0,305,301,1,0,0,0,305,302,1,0,0,0,305,303,
        1,0,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,
        1,0,0,0,308,108,1,0,0,0,11,0,270,275,281,283,290,293,297,299,305,
        307,0
    ]

class MetricAlertConditionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    WHERE = 15
    AND = 16
    INCLUDES = 17
    EXCLUDES = 18
    OR = 19
    DYNAMIC = 20
    OF = 21
    SINCE = 22
    WITH = 23
    SKIPMETRICVALIDATION = 24
    OPERATOR = 25
    NUMBER = 26
    QUOTE = 27
    WHITESPACE = 28
    NEWLINE = 29
    WORD = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'/'", "'-'", "'_'", "'\\'", "':'", "'%'", "','", "'|'", 
            "'('", "')'", "'+'", "'*'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "WHERE", "AND", "INCLUDES", "EXCLUDES", "OR", "DYNAMIC", "OF", 
            "SINCE", "WITH", "SKIPMETRICVALIDATION", "OPERATOR", "NUMBER", 
            "QUOTE", "WHITESPACE", "NEWLINE", "WORD" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "A", "C", "D", "E", "F", "H", "I", "K", "L", "M", "N", 
                  "O", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "DIGIT", 
                  "LOWERCASE", "UPPERCASE", "WHERE", "AND", "INCLUDES", 
                  "EXCLUDES", "OR", "DYNAMIC", "OF", "SINCE", "WITH", "SKIPMETRICVALIDATION", 
                  "OPERATOR", "NUMBER", "QUOTE", "WHITESPACE", "NEWLINE", 
                  "WORD" ]

    grammarFileName = "MetricAlertCondition.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


