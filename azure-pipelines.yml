resources:
- repo: self
phases:
- phase: Phase_13
  displayName: Extract Metadata

  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: Bash@3
    displayName: 'Extract Version'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/get_version.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: metadata'
    inputs:
      ArtifactName: metadata



- phase: Phase_11
  displayName: Build Windows MSI

  dependsOn: Phase_13
  condition: succeeded()
  queue:
    name: Hosted VS2017
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: metadata


  - script: |
       set /p CLI_VERSION=<$(System.ArtifactsDirectory)/metadata/version
       set

       build_scripts/windows/scripts/build.cmd
    displayName: 'Build Windows MSI'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: MSI'
    inputs:
      PathtoPublish: 'build_scripts/windows/out/'

      ArtifactName: msi



- phase: Phase_4
  displayName: Build Docker Image

  dependsOn: Phase_13
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: Bash@3
    displayName: 'Bash Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/docker/pipeline.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: docker image'
    inputs:
      ArtifactName: docker



- phase: Phase_19
  displayName: Test Docker Image

  dependsOn: Phase_4
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Metadata'
    inputs:
      artifactName: metadata


  - task: DownloadBuildArtifacts@0
    displayName: 'Download Docker Image'
    inputs:
      artifactName: docker


  - bash: |
       set -exv

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       IMAGE_NAME=clibuild$BUILD_BUILDNUMBER:latest
       TAR_FILE=$SYSTEM_ARTIFACTSDIRECTORY/docker/docker-azure-cli-$CLI_VERSION.tar

       echo "== Test docker image =="

       docker load < $TAR_FILE
       docker run $IMAGE_NAME /bin/bash -c "time az self-test && time az --version && sleep 5"
    displayName: 'Bash Script'


- phase: Phase_1
  displayName: Build Python Wheels

  dependsOn: Phase_13
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: 3.7


  - task: Bash@3
    displayName: 'Run Wheel Build Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/pypi/build.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: pypi'
    inputs:
      ArtifactName: pypi



- phase: Phase_15
  displayName: Test Python Wheels

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
#Your build pipeline references an undefined variable named ‘cd $SYSTEM_ARTIFACTSDIRECTORY/pypi; pwd’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Metadata'
    inputs:
      artifactName: metadata


  - task: DownloadBuildArtifacts@0
    displayName: 'Download PyPI Packages'
    inputs:
      artifactName: pypi


  - bash: |
       #!/usr/bin/env bash

       # Verify the pip wheels

       set -ex

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       PYPI_FILES=$(cd $SYSTEM_ARTIFACTSDIRECTORY/pypi; pwd)


       echo "== Testing pip install on Python 3.6 =="
       docker run \
         --rm -v $PYPI_FILES:/mnt/pypi python:3.6 \
         /bin/bash -c "ls /mnt/pypi && pip install -f /mnt/pypi -q azure-cli==$CLI_VERSION && az self-test && az --version && sleep 5"

       echo "== Testing pip install on Python 3.7 =="
       docker run \
         --rm -v $PYPI_FILES:/mnt/pypi python:3.7 \
         /bin/bash -c "ls /mnt/pypi && pip install -f /mnt/pypi -q azure-cli==$CLI_VERSION && az self-test && az --version && sleep 5"

       echo "== Testing pip install on Python 2.7 =="
       docker run \
         --rm -v $PYPI_FILES:/mnt/pypi python:2.7 \
         /bin/bash -c "ls /mnt/pypi && pip install -f /mnt/pypi -q azure-cli==$CLI_VERSION && az self-test && az --version && sleep 5"

    displayName: 'Test pip Install'


- phase: Phase_14
  displayName: Build Homebrew Formula

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
#Your build pipeline references an undefined variable named ‘az storage blob url -c $CONTAINER_NAME -n $TAR_NAME -otsv’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘cd $(dirname $0’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘cd $BUILD_SOURCESDIRECTORY/scripts/release/homebrew/docker; pwd’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘cd $BUILD_SOURCESDIRECTORY/scripts/release/homebrew/docker; pwd’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘cd $SYSTEM_ARTIFACTSDIRECTORY/pypi; pwd’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Metadata'
    inputs:
      artifactName: metadata


  - task: DownloadBuildArtifacts@0
    displayName: 'Download PyPI Packages'
    inputs:
      artifactName: pypi


  - bash: |
       #!/bin/bash

       set -e

       # Download the release package generated by the Github when the release candidate tag is created

       : {AZURE_STORAGE_ACCOUNT:?"AZURE_STORAGE_ACCOUNT not set"}
       : {AZURE_STORAGE_KEY:?"AZURE_STORAGE_KEY not set"}

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       TAR_NAME=rc$CLI_VERSION.tar.gz
       CONTAINER_NAME=archive/$(Build.BuildNumber)
       echo Container: $CONTAINER_NAME TAR: $TAR_NAME

       mkdir -p $BUILD_STAGINGDIRECTORY/github/ >/dev/null 2>&1
       curl -sL https://github.com/Azure/azure-cli/archive/$TAR_NAME -o $BUILD_STAGINGDIRECTORY/github/$TAR_NAME

       az storage blob upload -c $CONTAINER_NAME -n $TAR_NAME -f $BUILD_STAGINGDIRECTORY/github/$TAR_NAME

       # Make sure the URL is publicly available
       HOMEBREW_UPSTREAM_URL=$(az storage blob url -c $CONTAINER_NAME -n $TAR_NAME -otsv)

       curl -sfS -I $HOMEBREW_UPSTREAM_URL >/dev/null
       echo -n $HOMEBREW_UPSTREAM_URL > $BUILD_STAGINGDIRECTORY/github/upstream_url
    displayName: 'Upload Azure CLI Release Candidate Source For Homebrew'

  - bash: |
       #!/bin/bash

       root=$(cd $(dirname $0); pwd)

       set -ex

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       HOMEBREW_UPSTREAM_URL=`cat $BUILD_STAGINGDIRECTORY/github/upstream_url`

       docker_files=$(cd $BUILD_SOURCESDIRECTORY/scripts/release/homebrew/docker; pwd)
       pypi_files=$(cd $SYSTEM_ARTIFACTSDIRECTORY/pypi; pwd)

       echo "Generating formula in docker container ... "
       docker run -v $docker_files:/mnt/scripts \
                  -v $pypi_files:/mnt/pypi \
                  -e CLI_VERSION=$CLI_VERSION \
                  -e HOMEBREW_UPSTREAM_URL=$HOMEBREW_UPSTREAM_URL \
                  --name azurecli \
                  python:3.6 \
                  /mnt/scripts/run.sh

       # clean up
       rm -rf $BUILD_STAGINGDIRECTORY/metadata
       rm -rf $BUILD_STAGINGDIRECTORY/pypi

       docker cp azurecli:azure-cli.rb $BUILD_STAGINGDIRECTORY/azure-cli.rb
       docker rm --force azurecli
    displayName: 'Build homebrew formula'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: homebrew'
    inputs:
      ArtifactName: homebrew



- phase: Phase_16
  displayName: Test Homebrew Formula

  dependsOn: Phase_14
  condition: succeeded()
  queue:
    name: Hosted macOS
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Metadata'
    inputs:
      artifactName: metadata


  - task: DownloadBuildArtifacts@0
    displayName: 'Download Homebrew'
    inputs:
      artifactName: homebrew


  - bash: |
       echo == Remove pre-installed azure-cli ==
       brew uninstall azure-cli

       echo == Install azure-cli.rb formula ==
       brew install --build-from-source $SYSTEM_ARTIFACTSDIRECTORY/homebrew/azure-cli.rb

       echo == Az Version ==
       az --version

       echo == Run Self-Test ==
       az self-test

       echo == Audit azure-cli.rb formula ==
       brew audit --strict $SYSTEM_ARTIFACTSDIRECTORY/homebrew/azure-cli.rb

    displayName: 'Bash Script'


- phase: Phase_3
  displayName: Build Yum Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: Bash@3
    displayName: 'Build Rpm Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/rpm/pipeline.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: yum'
    inputs:
      ArtifactName: yum



- phase: Phase_17
  displayName: Test Yum Package

  dependsOn: Phase_3
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Metadata'
    inputs:
      artifactName: metadata


  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: yum


  - bash: |
       set -ex

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       YUM_NAME=azure-cli-$CLI_VERSION-1.el7.x86_64.rpm
       YUM_FILE=$SYSTEM_ARTIFACTSDIRECTORY/yum/$YUM_NAME

       echo "== Test yum package on CentOS =="

       docker pull centos
       docker run --rm -v $SYSTEM_ARTIFACTSDIRECTORY/yum:/mnt/yum centos /bin/bash -c "yum --nogpgcheck localinstall /mnt/yum/$YUM_NAME -y && time az self-test && time az --version && sleep 5"

    displayName: 'Bash Script'


- phase: Phase_2
  displayName: Build Ubuntu Xenial Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Xenial Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_5
  displayName: Build Ubuntu Artful Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Artful Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_6
  displayName: Build Ubuntu Trusty Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Trusty Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_7
  displayName: Build Ubuntu Bionic Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Bionic Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_8
  displayName: Build Debian Wheezy Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Debian Wheezy'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_9
  displayName: Build Debian Jessie Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Debian Jessie Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_10
  displayName: Build Debian Stretch Package

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Debian Stretch Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian



- phase: Phase_18
  displayName: Test Linux Packages

  dependsOn:
   - Phase_2
   - Phase_5
   - Phase_6
   - Phase_7
   - Phase_8
   - Phase_9
   - Phase_10
   - Phase_20
  condition: succeededOrFailed()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Metadata'
    inputs:
      artifactName: metadata


  - task: DownloadBuildArtifacts@0
    displayName: 'Download Debian Builds'
    inputs:
      artifactName: debian


  - bash: |
       set -exv

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`

       DISTROS=(wheezy jessie stretch artful xenial trusty)
       BASE_IMAGES=(debian:wheezy debian:jessie debian:stretch ubuntu:artful ubuntu:xenial ubuntu:trusty)

       # Distros that don't require libssl1.1
       for i in ${!DISTROS[@]}; do
           echo "== Test debian package on ${DISTROS[$i]} =="

           DEB_FILE=$SYSTEM_ARTIFACTSDIRECTORY/debian/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb

           docker pull ${BASE_IMAGES[$i]}

           docker run --rm -v $SYSTEM_ARTIFACTSDIRECTORY/debian:/mnt/artifacts ${BASE_IMAGES[$i]} /bin/bash -c "apt-get update && apt-get install -y apt-transport-https && dpkg -i /mnt/artifacts/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb && time az self-test && time az --version && sleep 5"
       done

       # Distros that do require libssl1.1
       DISTROS=(bionic cosmic)
       BASE_IMAGES=(ubuntu:bionic ubuntu:cosmic)

       for i in ${!DISTROS[@]}; do
           echo "== Test debian package on ${DISTROS[$i]} =="

           DEB_FILE=$SYSTEM_ARTIFACTSDIRECTORY/debian/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb

           docker pull ${BASE_IMAGES[$i]}

           docker run --rm -v $SYSTEM_ARTIFACTSDIRECTORY/debian:/mnt/artifacts ${BASE_IMAGES[$i]} /bin/bash -c "apt-get update && apt-get install -y libssl1.1 apt-transport-https && dpkg -i /mnt/artifacts/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb && time az self-test && time az --version && sleep 5"
       done
    displayName: 'Bash Script'


#- phase: Phase_12
#  displayName: Publish Artifacts to Azure Storage
#
#  dependsOn:
#   - Phase_16
#   - Phase_15
#   - Phase_17
#   - Phase_18
#   - Phase_19
#   - Phase_11
#  condition: succeeded()
#  queue:
#    name: Hosted
#    demands: azureps
#
#  steps:
#  - task: DownloadBuildArtifacts@0
#    displayName: 'Download Metadata Artifacts'
#    inputs:
#      artifactName: metadata
#
#
#  - task: DownloadBuildArtifacts@0
#    displayName: 'Download PyPI Build Artifacts'
#    inputs:
#      artifactName: pypi
#
#
#  - task: DownloadBuildArtifacts@0
#    displayName: 'Download MSI Build Artifacts'
#    inputs:
#      artifactName: MSI
#
#
#  - task: DownloadBuildArtifacts@0
#    displayName: 'Download Debian Build Artifacts'
#    inputs:
#      artifactName: debian
#
#
#  - task: DownloadBuildArtifacts@0
#    displayName: 'Download RPM Build Artifacts'
#    inputs:
#      artifactName: yum
#
#
#  - task: DownloadBuildArtifacts@0
#    displayName: 'Download Docker Build Artifacts'
#    inputs:
#      artifactName: Docker
#
#
#  - task: AzureFileCopy@1
#    displayName: 'AzureBlob File Copy'
#    inputs:
#      SourcePath: '$(System.ArtifactsDirectory)'
#
#      azureSubscription: 'Azure SDK Infrastructure (6b085460-5f21-477e-ba44-1035046e9101)'
#
#      Destination: AzureBlob
#
#      storage: azureclistage
#
#      ContainerName: archive
#
#      BlobPrefix: '$(Build.BuildNumber)'



- phase: Phase_20
  displayName: Build Ubuntu Cosmic

  dependsOn: Phase_1
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: pypi


  - task: Bash@3
    displayName: 'Bash Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debian'
    inputs:
      ArtifactName: debian


