resources:
- repo: self

trigger:
  batch: true
  branches:
    include:
    - '*'

jobs:
- job: ExtractMetadata
  displayName: Extract Metadata

  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: Bash@3
    displayName: 'Extract Version'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/get_version.sh


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: metadata'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: metadata

- job: VerifyLinuxRequirements
  displayName: 'Verify src/azure-cli/requirements.*.Linux.txt'
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3'
    inputs:
      versionSpec: 3.x

  - bash: ./scripts/ci/dependency_check.sh
    displayName: 'Verify src/azure-cli/requirements.py3.Linux.txt'

  - task: UsePythonVersion@0
    displayName: 'Use Python 2'
    inputs:
      versionSpec: 2.x

  - bash: ./scripts/ci/dependency_check.sh
    displayName: 'Verify src/azure-cli/requirements.py2.Linux.txt'

- job: VerifyDarwinRequirements
  displayName: 'Verify src/azure-cli/requirements.*.Darwin.txt'
  condition: succeeded()
  pool:
    vmImage: 'macOS-10.13'

  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3'
    inputs:
      versionSpec: 3.x

  - bash: ./scripts/ci/dependency_check.sh
    displayName: 'Verify src/azure-cli/requirements.py3.Darwin.txt'

  - task: UsePythonVersion@0
    displayName: 'Use Python 2'
    inputs:
      versionSpec: 2.x

  - bash: ./scripts/ci/dependency_check.sh
    displayName: 'Verify src/azure-cli/requirements.py2.Darwin.txt'

- job: VerifyWindowsRequirements
  displayName: 'Verify src/azure-cli/requirements.*.Windows.txt'
  condition: succeeded()
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3'
    inputs:
      versionSpec: 3.x

  - task: BatchScript@1
    inputs:
      filename: ./scripts/ci/dependency_check.bat
    displayName: 'Verify src/azure-cli/requirements.py3.Windows.txt'

  - task: UsePythonVersion@0
    displayName: 'Use Python 2'
    inputs:
      versionSpec: 2.x

  - task: BatchScript@1
    inputs:
      filename: ./scripts/ci/dependency_check.bat
    displayName: 'Verify src/azure-cli/requirements.py2.Windows.txt'

- job: VerifyVersions
  displayName: Verify Command Module Versions
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), eq(variables['System.PullRequest.TargetBranch'], 'release')))

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: 3.7

  - bash: |
      #!/usr/bin/env bash

      set -ev

      pip install virtualenv
      python -m virtualenv venv/
      . ./venv/bin/activate
      pip install azdev
      azdev setup -c $(pwd)
    displayName: 'Install azdev'

  - bash: |
      #!/usr/bin/env bash
      . ./venv/bin/activate

      set -ev

      azdev verify history

    displayName: 'Verify History'

- job: BuildWindowsMSI
  displayName: Build Windows MSI

  dependsOn: ExtractMetadata
  condition: succeeded()
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - script: |
       set /p CLI_VERSION=<$(System.ArtifactsDirectory)/metadata/version
       set

       build_scripts/windows/scripts/build.cmd
    displayName: 'Build Windows MSI'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: MSI'
    inputs:
      TargetPath: 'build_scripts/windows/out/'
      ArtifactName: msi

- job: TestWindowsMSI
  displayName: Test Windows MSI

  dependsOn: BuildWindowsMSI
  # condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  condition: false
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/msi'
      artifactName: msi

  - task: PowerShell@2
    displayName: Install and Load CLI
    inputs:
      targetType: inline
      script: |
        $InstallArgs = @(
          "/I"
          '"$env:SYSTEM_ARTIFACTSDIRECTORY/msi/Microsoft Azure CLI.msi"'
          "/norestart"
          "/L*v"
          ".\install_logs.txt"
        )
        Start-Process "msiexec.exe" -ArgumentList $InstallArgs -Wait -NoNewWindow
        Get-Content .\install_logs.txt

        az --version
        az self-test

- job: BuildDockerImage
  displayName: Build Docker Image

  dependsOn: ExtractMetadata
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: Bash@3
    displayName: 'Bash Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/docker/pipeline.sh


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: docker image'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: docker

- job: TestDockerImage
  displayName: Test Docker Image

  dependsOn: BuildDockerImage
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Docker Image'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/docker'
      artifactName: docker


  - bash: |
       set -exv

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       IMAGE_NAME=clibuild$BUILD_BUILDNUMBER:latest
       TAR_FILE=$SYSTEM_ARTIFACTSDIRECTORY/docker/docker-azure-cli-$CLI_VERSION.tar

       echo "== Test docker image =="

       docker load < $TAR_FILE
       docker run $IMAGE_NAME /bin/bash -c "time az self-test && time az --version && sleep 5"
    displayName: 'Bash Script'

- job: BuildPythonWheel
  displayName: Build Python Wheels

  dependsOn: ExtractMetadata
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: 3.7


  - task: Bash@3
    displayName: 'Run Wheel Build Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/pypi/build.sh


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: pypi'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: pypi

- job: TestPythonWheel
  displayName: Test Python Wheels

  dependsOn: BuildPythonWheel
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - task: DownloadPipelineArtifact@1
    displayName: 'Download PyPI Packages'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - bash: |
       #!/usr/bin/env bash

       # Verify the pip wheels

       set -ex

       CLI_VERSION=`cat $BUILD_ARTIFACTSTAGINGDIRECTORY/metadata/version`
       PYPI_FILES=$(cd $BUILD_ARTIFACTSTAGINGDIRECTORY/pypi; pwd)


       echo "== Testing pip install on Python 3.6 =="
       docker run \
         --rm -v $PYPI_FILES:/mnt/pypi python:3.6 \
         /bin/bash -c "ls /mnt/pypi && pip install -f /mnt/pypi -q azure-cli==$CLI_VERSION && az self-test && az --version && sleep 5"

       echo "== Testing pip install on Python 3.7 =="
       docker run \
         --rm -v $PYPI_FILES:/mnt/pypi python:3.7 \
         /bin/bash -c "ls /mnt/pypi && pip install -f /mnt/pypi -q azure-cli==$CLI_VERSION && az self-test && az --version && sleep 5"

       echo "== Testing pip install on Python 2.7 =="
       docker run \
         --rm -v $PYPI_FILES:/mnt/pypi python:2.7 \
         /bin/bash -c "ls /mnt/pypi && pip install -f /mnt/pypi -q azure-cli==$CLI_VERSION && az self-test && az --version && sleep 5"

    displayName: 'Test pip Install'

- job: RunAutomationFullPython2
  displayName: Run Automation, Python 2
  dependsOn: BuildPythonWheel

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 2.7'
    inputs:
      versionSpec: 2.7
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Python Wheels'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi
  - bash: |
      pip install --force-reinstall wheel
  - task: Bash@3
    displayName: 'Run Test Automation'
    inputs:
      targetType: 'filePath'
      filePath: ./scripts/ci/test_automation.sh

- job: RunAutomationReducedPython3
  displayName: Run Automation, Python 3
  dependsOn: BuildPythonWheel

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6'
    inputs:
      versionSpec: 3.6
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Python Wheels'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi
  - bash: |
      pip install --force-reinstall wheel
  - task: Bash@3
    displayName: 'Run Test Automation'
    inputs:
      targetType: 'filePath'
      filePath: ./scripts/ci/test_automation.sh
    env:
      REDUCE_SDK: 'True'

- job: RunAutomationReduced20190301
  displayName: Run Automation Reduced
  dependsOn: BuildPythonWheel

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6'
    inputs:
      versionSpec: 3.6
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Python Wheels'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi
  - bash: |
      pip install --force-reinstall wheel
  - task: Bash@3
    displayName: 'Run Test Automation'
    inputs:
      targetType: 'filePath'
      filePath: ./scripts/ci/test_automation.sh
    env:
      REDUCE_SDK: 'True'
      AZURE_CLI_TEST_TARGET_PROFILE: '2019-03-01'

- job: RunAutomationReduced20180301
  displayName: Run Automation, Profile 2018-03-01
  dependsOn: BuildPythonWheel

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6'
    inputs:
      versionSpec: 3.6
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Python Wheels'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi
  - bash: |
      pip install --force-reinstall wheel
  - task: Bash@3
    displayName: 'Run Test Automation'
    inputs:
      targetType: 'filePath'
      filePath: ./scripts/ci/test_automation.sh
    env:
      AZURE_CLI_TEST_TARGET_PROFILE: '2018-03-01'

- job: BuildHomebrewFormula
  displayName: Build Homebrew Formula

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - task: DownloadPipelineArtifact@1
    displayName: 'Download PyPI Packages'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi

  - bash: |
       #!/bin/bash

       root=$(cd $(dirname $0); pwd)

       set -evx

       CLI_VERSION=`cat $BUILD_ARTIFACTSTAGINGDIRECTORY/metadata/version`
       HOMEBREW_UPSTREAM_URL=`curl -Ls -o /dev/null -w %{url_effective} https://api.github.com/repos/Azure/azure-cli/tarball/$BUILD_SOURCEVERSION`

       docker_files=$(cd $BUILD_SOURCESDIRECTORY/scripts/release/homebrew/docker; pwd)
       pypi_files=$(cd $BUILD_ARTIFACTSTAGINGDIRECTORY/pypi; pwd)

       echo "Generating formula in docker container ... "
       docker run -v $docker_files:/mnt/scripts \
                  -v $pypi_files:/mnt/pypi \
                  -e CLI_VERSION=$CLI_VERSION \
                  -e HOMEBREW_UPSTREAM_URL=$HOMEBREW_UPSTREAM_URL \
                  --name azurecli \
                  python:3.6 \
                  /mnt/scripts/run.sh

       # clean up
       rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/metadata
       rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/pypi

       docker cp azurecli:azure-cli.rb $BUILD_ARTIFACTSTAGINGDIRECTORY/azure-cli.rb
       docker rm --force azurecli
    displayName: 'Build homebrew formula'

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: homebrew'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: homebrew

- job: TestHomebrewFormula
  displayName: Test Homebrew Formula

  dependsOn: BuildHomebrewFormula
  condition: succeeded()
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Homebrew'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/homebrew'
      artifactName: homebrew


  - bash: |
      set -ev

      echo == Remove pre-installed azure-cli ==
      brew uninstall azure-cli

      echo == Install azure-cli.rb formula ==
      brew install --build-from-source $SYSTEM_ARTIFACTSDIRECTORY/homebrew/azure-cli.rb

      echo == Az Version ==
      az --version

      echo == Run Self-Test ==
      az self-test

      echo == Audit azure-cli.rb formula ==
      brew audit --strict $SYSTEM_ARTIFACTSDIRECTORY/homebrew/azure-cli.rb

    displayName: 'Bash Script'

- job: BuildYumPackage
  displayName: Build Yum Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: Bash@3
    displayName: 'Build Rpm Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/rpm/pipeline.sh


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: yum'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: yum

- job: TestYumPackage
  displayName: Test Yum Package

  dependsOn: BuildYumPackage
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/yum'
      artifactName: yum


  - bash: |
       set -ex

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
       YUM_NAME=azure-cli-$CLI_VERSION-1.el7.x86_64.rpm
       YUM_FILE=$SYSTEM_ARTIFACTSDIRECTORY/yum/$YUM_NAME

       echo "== Test yum package on CentOS =="

       docker pull centos
       docker run --rm -v $SYSTEM_ARTIFACTSDIRECTORY/yum:/mnt/yum centos /bin/bash -c "yum --nogpgcheck localinstall /mnt/yum/$YUM_NAME -y && time az self-test && time az --version && sleep 5"

    displayName: 'Bash Script'

- job: BuildUbuntuXenial
  displayName: Build Ubuntu Xenial Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Xenial Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: xenial
      DISTRO_BASE_IMAGE: ubuntu:xenial

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: ubuntu-xenial

- job: BuildUbuntuTrusty
  displayName: Build Ubuntu Trusty Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Trusty Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: trusty
      DISTRO_BASE_IMAGE: ubuntu:trusty


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: ubuntu-trusty

- job: BuildUbuntuBionic
  displayName: Build Ubuntu Bionic Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Ubuntu Bionic Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: bionic
      DISTRO_BASE_IMAGE: ubuntu:bionic


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: ubuntu-bionic

- job: BuildUbuntuDisco
  displayName: Build Ubuntu Disco Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - task: DownloadPipelineArtifact@1
      displayName: 'Download Build Artifacts'
      inputs:
        TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
        artifactName: pypi


    - task: Bash@3
      displayName: 'Build Ubuntu Disco Package'
      inputs:
        targetType: 'filePath'
        filePath: scripts/release/debian/pipeline.sh
      env:
        DISTRO: disco
        DISTRO_BASE_IMAGE: ubuntu:disco


    - task: PublishPipelineArtifact@0
      displayName: 'Publish Artifact: debian'
      inputs:
        TargetPath: $(Build.ArtifactStagingDirectory)
        ArtifactName: ubuntu-disco

- job: BuildDebianJessie
  displayName: Build Debian Jessie Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Debian Jessie Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: jessie
      DISTRO_BASE_IMAGE: debian:jessie

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: debian-jessie

- job: BuildDebianStretch
  displayName: Build Debian Stretch Package

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - task: Bash@3
    displayName: 'Build Debian Stretch Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: stretch
      DISTRO_BASE_IMAGE: debian:stretch

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: debian-stretch

- job: TestLinuxPackages
  displayName: Test Linux Packages

  dependsOn:
   - BuildUbuntuXenial
   - BuildUbuntuTrusty
   - BuildUbuntuBionic
   - BuildDebianJessie
   - BuildDebianStretch
   - BuildUbuntuCosmic
   - BuildUbuntuDisco
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Debian:Stretch Build'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: debian-stretch

  - task: DownloadPipelineArtifact@1
    displayName: 'Download Debian:Jessie Builds'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: debian-jessie

  - task: DownloadPipelineArtifact@1
    displayName: 'Download Ubuntu:Bionic Builds'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: ubuntu-bionic


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Ubuntu:Cosmic Builds'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: ubuntu-cosmic


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Ubuntu:Disco Builds'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: ubuntu-disco


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Ubuntu:Xenial Builds'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: ubuntu-xenial


  - task: DownloadPipelineArtifact@1
    displayName: 'Download Ubuntu:Trusty Builds'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/debian'
      artifactName: ubuntu-trusty


  - bash: |
       set -exv

       CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`

       DISTROS=(jessie stretch xenial trusty)
       BASE_IMAGES=(debian:jessie debian:stretch ubuntu:xenial ubuntu:trusty)

       # Distros that don't require libssl1.1
       for i in ${!DISTROS[@]}; do
           echo "== Test debian package on ${DISTROS[$i]} =="

           DEB_FILE=$SYSTEM_ARTIFACTSDIRECTORY/debian/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb

           docker pull ${BASE_IMAGES[$i]}

           docker run --rm -v $SYSTEM_ARTIFACTSDIRECTORY/debian:/mnt/artifacts ${BASE_IMAGES[$i]} /bin/bash -c "apt-get update && apt-get install -y apt-transport-https && dpkg -i /mnt/artifacts/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb && time az self-test && time az --version && sleep 5"
       done

       # Distros that do require libssl1.1
       DISTROS=(bionic cosmic disco)
       BASE_IMAGES=(ubuntu:bionic ubuntu:cosmic ubuntu:disco)

       for i in ${!DISTROS[@]}; do
           echo "== Test debian package on ${DISTROS[$i]} =="

           DEB_FILE=$SYSTEM_ARTIFACTSDIRECTORY/debian/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb

           docker pull ${BASE_IMAGES[$i]}

           docker run --rm -v $SYSTEM_ARTIFACTSDIRECTORY/debian:/mnt/artifacts ${BASE_IMAGES[$i]} /bin/bash -c "apt-get update && apt-get install -y libssl1.1 apt-transport-https && dpkg -i /mnt/artifacts/azure-cli_$CLI_VERSION-1~${DISTROS[$i]}_all.deb && time az self-test && time az --version && sleep 5"
       done
    displayName: 'Bash Script'

- job: BuildUbuntuCosmic
  displayName: Build Ubuntu Cosmic

  dependsOn: BuildPythonWheel
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/pypi'
      artifactName: pypi


  - task: Bash@3
    displayName: 'Bash Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/debian/pipeline.sh
    env:
      DISTRO: cosmic
      DISTRO_BASE_IMAGE: ubuntu:cosmic

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: debian'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: ubuntu-cosmic

- job: CheckStyle
  displayName: "Check CLI Style"

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: 3.7
  - bash: |
      . scripts/ci/install_azdev.sh
      pip list
      azdev style

- job: CheckHeaders
  displayName: "Check License, History, and DocMap"

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6'
    inputs:
      versionSpec: 3.6
  - bash: |
      . scripts/ci/install_azdev.sh
      azdev verify license
      azdev verify history
      azdev verify document-map

- job: CheckLoadPerformance
  displayName: "Check Module Load Performance"

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6'
    inputs:
      versionSpec: 3.6
  - bash: |
      . scripts/ci/install_azdev.sh
      azdev perf load-times

- job: CheckLinter
  displayName: "Check CLI Linter"

  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.6'
    inputs:
      versionSpec: 3.6
  - bash: |
      . scripts/ci/install_azdev.sh
      azdev linter --ci-exclusions
