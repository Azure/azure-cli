# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .layer import Layer


class VideoLayer(Layer):
    """A video layer.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: H264Layer

    :param width: Gets or sets width of video in pixels for this layer.
    :type width: str
    :param height: Gets or sets height of video in pixels for this layer.
    :type height: str
    :param condition: Gets or sets the predicate to be evaluated before
     encoding this layer.
    :type condition: str
    :param label: Gets or sets the label for this layer.
    :type label: str
    :param odatatype: Constant filled by server.
    :type odatatype: str
    :param bitrate: Gets or sets the layer bitrate.
    :type bitrate: int
    :param max_bitrate: Gets or sets the maximum rate the VBV buffer should be
     assumed to refill at.
    :type max_bitrate: int
    :param b_frames: Gets or sets the number of B-frames to be used when
     encoding this layer.
    :type b_frames: int
    :param frame_rate: Gets or sets the frame rate for encoding this layer.
    :type frame_rate: str
    :param slices: Gets or sets the number of slice to be used when encoding
     this layer.
    :type slices: int
    :param adaptive_bframe: Gets or sets a value indicating whether adaptive
     b-frames are used for this layer.
    :type adaptive_bframe: bool
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'width': {'key': 'width', 'type': 'str'},
        'height': {'key': 'height', 'type': 'str'},
        'condition': {'key': 'condition', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'int'},
        'max_bitrate': {'key': 'maxBitrate', 'type': 'int'},
        'b_frames': {'key': 'bFrames', 'type': 'int'},
        'frame_rate': {'key': 'frameRate', 'type': 'str'},
        'slices': {'key': 'slices', 'type': 'int'},
        'adaptive_bframe': {'key': 'adaptiveBFrame', 'type': 'bool'},
    }

    _subtype_map = {
        'odatatype': {'#Microsoft.Media.H264Layer': 'H264Layer'}
    }

    def __init__(self, width=None, height=None, condition=None, label=None, bitrate=None, max_bitrate=None, b_frames=None, frame_rate=None, slices=None, adaptive_bframe=None):
        super(VideoLayer, self).__init__(width=width, height=height, condition=condition, label=label)
        self.bitrate = bitrate
        self.max_bitrate = max_bitrate
        self.b_frames = b_frames
        self.frame_rate = frame_rate
        self.slices = slices
        self.adaptive_bframe = adaptive_bframe
        self.odatatype = '#Microsoft.Media.VideoLayer'
