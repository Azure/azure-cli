# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------


import unittest
from unittest import mock

from ..msal_credentials import UserCredential

MOCK_ACCOUNT = {
    'account_source': 'authorization_code',
    'authority_type': 'MSSTS',
    'environment': 'login.microsoftonline.com',
    # random GUID generated by uuid.uuid4()
    'home_account_id': '9d486bfc-8d91-4a65-a23e-33e1f01a1718.e4e8e73b-5f99-4bd5-bdac-60b916a7343b',
    'local_account_id': '9d486bfc-8d91-4a65-a23e-33e1f01a1718',
    'realm': 'e4e8e73b-5f99-4bd5-bdac-60b916a7343b',
    'username': 'test@microsoft.com'
}

MOCK_SCOPES = ['https://management.core.windows.net//.default']

MOCK_ACCESS_TOKEN = "mock_access_token"
MOCK_MSAL_TOKEN = {
    'access_token': MOCK_ACCESS_TOKEN,
    'token_type': 'Bearer',
    'expires_in': 1800,
    'token_source': 'cache'
}

MOCK_CLAIMS = {"test_claims": "value2"}

MOCK_DATA = {
    'key_id': 'test',
    'req_cnf': 'test',
    'token_type': 'ssh-cert'
}
MOCK_CERTIFICATE= "mock_certificate"
MOCK_MSAL_CERTIFICATE = {
    'access_token': MOCK_CERTIFICATE,
    'client_info': 'test',
    'expires_in': 3599,
    'ext_expires_in': 3599,
    'foci': '1',
    'id_token': 'test',
    'id_token_claims': {
        'preferred_username': 'test@microsoft.com',
        'tid': 'e4e8e73b-5f99-4bd5-bdac-60b916a7343b'
    },
    'refresh_token': 'test',
    'scope': 'https://pas.windows.net/CheckMyAccess/Linux/user_impersonation https://pas.windows.net/CheckMyAccess/Linux/.default',
    'token_source': 'identity_provider',
    'token_type': 'ssh-cert'
}


class AuthorityStub:
    def __init__(self):
        self.tenant = 'e4e8e73b-5f99-4bd5-bdac-60b916a7343b'

class PublicClientApplicationStub:

    def __init__(self, client_id, **kwargs):
        self.client_id = client_id
        self.authority = AuthorityStub()
        self.kwargs = kwargs
        self.acquire_token_silent_with_error_scopes = None
        self.acquire_token_silent_with_error_claims_challenge = None
        self.acquire_token_silent_with_error_kwargs = None
        super().__init__()

    def get_accounts(self, username):
        return [MOCK_ACCOUNT]

    def acquire_token_silent_with_error(self, scopes, account, **kwargs):
        self.acquire_token_silent_with_error_scopes = scopes
        self.acquire_token_silent_with_error_claims_challenge = scopes
        self.acquire_token_silent_with_error_kwargs = kwargs
        if 'data' in kwargs:
            return MOCK_MSAL_CERTIFICATE
        return MOCK_MSAL_TOKEN


class TestUserCredential(unittest.TestCase):

    @mock.patch('azure.cli.core.auth.msal_credentials.PublicClientApplication')
    def test_get_token(self, public_client_application_mock):
        public_client_application_mock.side_effect = PublicClientApplicationStub

        msal_credential = UserCredential('test_client_id', 'test_username')
        msal_app = msal_credential._msal_app
        assert msal_credential._account == MOCK_ACCOUNT

        result = msal_credential.acquire_token(MOCK_SCOPES)
        assert result == MOCK_MSAL_TOKEN
        assert msal_app.acquire_token_silent_with_error_scopes == MOCK_SCOPES
        # Make sure data is not passed to MSAL
        assert 'data' not in msal_app.acquire_token_silent_with_error_kwargs

        result = msal_credential.acquire_token(MOCK_SCOPES, claims_challenge=MOCK_CLAIMS)
        assert result == MOCK_MSAL_TOKEN
        assert msal_app.acquire_token_silent_with_error_scopes == MOCK_SCOPES
        assert msal_app.acquire_token_silent_with_error_kwargs['claims_challenge'] == MOCK_CLAIMS

        result = msal_credential.acquire_token(['https://pas.windows.net/CheckMyAccess/Linux/.default'],
                                               data=MOCK_DATA)
        assert result == MOCK_MSAL_CERTIFICATE
        assert msal_app.acquire_token_silent_with_error_scopes == ['https://pas.windows.net/CheckMyAccess/Linux/.default']
        assert msal_app.acquire_token_silent_with_error_kwargs['data'] == MOCK_DATA


if __name__ == '__main__':
    unittest.main()
