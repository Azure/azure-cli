# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddMatch(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.match = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'body':
                d['body'] = v[0]
            elif kl == 'status-codes':
                d['status_codes'] = v
            else:
                raise CLIError('Unsupported Key {} is provided for parameter match. All possible keys are: body, '
                               'status-codes'.format(k))
        return d


class AddMicrosoftPeeringConfig(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.microsoft_peering_config = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'advertised-public-prefixes':
                d['advertised_public_prefixes'] = v
            elif kl == 'advertised-communities':
                d['advertised_communities'] = v
            elif kl == 'legacy-mode':
                d['legacy_mode'] = v[0]
            elif kl == 'customer-asn':
                d['customer_asn'] = v[0]
            elif kl == 'routing-registry-name':
                d['routing_registry_name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter microsoft_peering_config. All possible '
                               'keys are: advertised-public-prefixes, advertised-communities, legacy-mode, '
                               'customer-asn, routing-registry-name'.format(k))
        return d


class AddProviderLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.provider_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'country':
                d['country'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'city':
                d['city'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter provider_location. All possible keys are: '
                               'country, state, city'.format(k))
        return d
