# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
from .testUtil import authorization_info_version11
from azure.cli.testsdk import ScenarioTest

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class TestClusterLib(ScenarioTest):
    location = 'West US 3 '
    resourceGroup = "hilocli-test"
    clusterPoolName = "hilopoolwus3"

    def test_manage_libraries(self):
        self.kwargs.update({
            "rg": self.resourceGroup,
            "loc": self.location,
            "poolName": self.clusterPoolName,
            "clusterName": "cli-spark12",
            "clusterType": "Spark",
            "computeNodeProfile": self.cmd('az hdinsight-on-aks cluster node-profile create --count 5 --node-type Worker --vm-size Standard_D16a_v4').get_output_in_json(),
        })

        # If there is no existing cluster to test, use the following code to create the cluster.
        # spark_versions = self.cmd('az hdinsight-on-aks list-available-cluster-version -l {loc} --query "[?clusterType==\'Spark\']"').get_output_in_json()
        # create_command = 'az hdinsight-on-aks cluster create -n {clusterName} --cluster-pool-name {poolName} -g {rg} -l {loc} --cluster-type {clusterType} --spark-storage-url abfs://testspark@hilostorage.dfs.core.windows.net/ --cluster-version ' + spark_versions[0]["clusterVersion"] + ' --oss-version ' + spark_versions[0]["ossVersion"] + ' --nodes ' + '{computeNodeProfile}' +' '+ authorization_info()
        # self.cmd(create_command)

        # Test list a cluster predefine libs.
        libraries = self.cmd(
            'az hdinsight-on-aks cluster library list --cluster-name {clusterName}  -g {rg} --cluster-pool-name {poolName} --category predefined ').get_output_in_json()
        assert libraries is not None 

        # Test add a custom lib to cluster. Execute the following two commands in terminal to add the package
        # Add maven package.
        # self.cmd(
        #     'az hdinsight-on-aks cluster library manage --cluster-name {clusterName}  -g {rg} --cluster-pool-name {poolName} --libraries \'[{maven:{group-id:com.azure.resourcemanager,name:azure-resourcemanager-hdinsight-containers,version:1.0.0-beta.2}}]\'')
        #Add python package.
        # self.cmd(
        #     'az hdinsight-on-aks cluster library manage --cluster-name {clusterName}  -g {rg} --cluster-pool-name {poolName} --libraries \'[{pypi:{name:pandas}}]\'')
        
        # Test list a cluster custom libs, should not be null.
        customLibraries = self.cmd(
            'az hdinsight-on-aks cluster library list --cluster-name {clusterName}  -g {rg} --cluster-pool-name {poolName} --category custom ').get_output_in_json()

        assert customLibraries is not None


