# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "elastic monitor tag-rule update",
)
class Update(AAZCommand):
    """Update a tag rule set for a given monitor resource.
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.elastic/monitors/{}/tagrules/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Monitor resource name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.rule_set_name = AAZStrArg(
            options=["-n", "--name", "--rule-set-name"],
            help="Tag Rule Set resource name",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.log_rules = AAZObjectArg(
            options=["--log-rules"],
            arg_group="Properties",
            help="Rules for sending logs.",
            nullable=True,
        )

        log_rules = cls._args_schema.log_rules
        log_rules.filtering_tags = AAZListArg(
            options=["filtering-tags"],
            help="List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.",
            nullable=True,
        )
        log_rules.send_aad_logs = AAZBoolArg(
            options=["send-aad-logs"],
            help="Flag specifying if AAD logs should be sent for the Monitor resource.",
            nullable=True,
        )
        log_rules.send_activity_logs = AAZBoolArg(
            options=["send-activity-logs"],
            help="Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.",
            nullable=True,
        )
        log_rules.send_subscription_logs = AAZBoolArg(
            options=["send-subscription-logs"],
            help="Flag specifying if subscription logs should be sent for the Monitor resource.",
            nullable=True,
        )

        filtering_tags = cls._args_schema.log_rules.filtering_tags
        filtering_tags.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.log_rules.filtering_tags.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="Valid actions for a filtering tag.",
            nullable=True,
            enum={"Exclude": "Exclude", "Include": "Include"},
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name (also known as the key) of the tag.",
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value of the tag.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.TagRulesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.TagRulesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class TagRulesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/tagRules/{ruleSetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleSetName", self.ctx.args.rule_set_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_monitoring_tag_rules_read(cls._schema_on_200)

            return cls._schema_on_200

    class TagRulesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/tagRules/{ruleSetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleSetName", self.ctx.args.rule_set_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_monitoring_tag_rules_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("logRules", AAZObjectType, ".log_rules")

            log_rules = _builder.get(".properties.logRules")
            if log_rules is not None:
                log_rules.set_prop("filteringTags", AAZListType, ".filtering_tags")
                log_rules.set_prop("sendAadLogs", AAZBoolType, ".send_aad_logs")
                log_rules.set_prop("sendActivityLogs", AAZBoolType, ".send_activity_logs")
                log_rules.set_prop("sendSubscriptionLogs", AAZBoolType, ".send_subscription_logs")

            filtering_tags = _builder.get(".properties.logRules.filteringTags")
            if filtering_tags is not None:
                filtering_tags.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.logRules.filteringTags[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_monitoring_tag_rules_read = None

    @classmethod
    def _build_schema_monitoring_tag_rules_read(cls, _schema):
        if cls._schema_monitoring_tag_rules_read is not None:
            _schema.id = cls._schema_monitoring_tag_rules_read.id
            _schema.name = cls._schema_monitoring_tag_rules_read.name
            _schema.properties = cls._schema_monitoring_tag_rules_read.properties
            _schema.system_data = cls._schema_monitoring_tag_rules_read.system_data
            _schema.type = cls._schema_monitoring_tag_rules_read.type
            return

        cls._schema_monitoring_tag_rules_read = _schema_monitoring_tag_rules_read = AAZObjectType()

        monitoring_tag_rules_read = _schema_monitoring_tag_rules_read
        monitoring_tag_rules_read.id = AAZStrType(
            flags={"read_only": True},
        )
        monitoring_tag_rules_read.name = AAZStrType(
            flags={"read_only": True},
        )
        monitoring_tag_rules_read.properties = AAZObjectType()
        monitoring_tag_rules_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        monitoring_tag_rules_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_monitoring_tag_rules_read.properties
        properties.log_rules = AAZObjectType(
            serialized_name="logRules",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        log_rules = _schema_monitoring_tag_rules_read.properties.log_rules
        log_rules.filtering_tags = AAZListType(
            serialized_name="filteringTags",
        )
        log_rules.send_aad_logs = AAZBoolType(
            serialized_name="sendAadLogs",
        )
        log_rules.send_activity_logs = AAZBoolType(
            serialized_name="sendActivityLogs",
        )
        log_rules.send_subscription_logs = AAZBoolType(
            serialized_name="sendSubscriptionLogs",
        )

        filtering_tags = _schema_monitoring_tag_rules_read.properties.log_rules.filtering_tags
        filtering_tags.Element = AAZObjectType()

        _element = _schema_monitoring_tag_rules_read.properties.log_rules.filtering_tags.Element
        _element.action = AAZStrType()
        _element.name = AAZStrType()
        _element.value = AAZStrType()

        system_data = _schema_monitoring_tag_rules_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_monitoring_tag_rules_read.id
        _schema.name = cls._schema_monitoring_tag_rules_read.name
        _schema.properties = cls._schema_monitoring_tag_rules_read.properties
        _schema.system_data = cls._schema_monitoring_tag_rules_read.system_data
        _schema.type = cls._schema_monitoring_tag_rules_read.type


__all__ = ["Update"]
