# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from .._actions import (
    AddMatch,
    AddMicrosoftPeeringConfig,
    AddProviderLocation
)


def load_arguments(self, _):

    with self.argument_context('network application-gateway backend-health-on-demand') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('application_gateway_name', options_list=['--name', '-n', '--application-gateway-name'], type=str,
                   help='The name of the application gateway.', id_part='name')
        c.argument('expand', type=str, help='Expands BackendAddressPool and BackendHttpSettings referenced in backend '
                   'health.')
        c.argument('protocol', arg_type=get_enum_type(['Http', 'Https']), help='The protocol used for the probe.')
        c.argument('host', type=str, help='Host name to send the probe to.')
        c.argument('path', type=str, help='Relative path of probe. Valid path starts from \'/\'. Probe is sent to '
                   '<Protocol>://<host>:<port><path>.')
        c.argument('timeout', type=int, help='The probe timeout in seconds. Probe marked as failed if valid response '
                   'is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.')
        c.argument('pick_host_name_from_backend_http_settings', arg_type=get_three_state_flag(), help='Whether the '
                   'host header should be picked from the backend http settings. Default value is false.')
        c.argument('match', action=AddMatch, nargs='+', help='Criterion for classifying a healthy probe response.')
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.', arg_group='Backend Http Settings')
        c.argument('sub_resource_id', type=str, help='Resource ID.', arg_group='Backend Address Pool')

    with self.argument_context('network application-gateway-private-endpoint-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('application_gateway_name', type=str, help='The name of the application gateway.', id_part='name')
        c.argument('connection_name', type=str,
                   help='The name of the application gateway private endpoint connection.', id_part='child_name_1')

    with self.argument_context('network application-security-group list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('network generatevirtualwanvpnserverconfigurationvpnprofile') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_wan_name', type=str, help='The name of the VirtualWAN whose associated '
                   'VpnServerConfigurations is needed.', id_part='name')
        c.argument('vpn_server_configuration_resource_id', type=str, help='VpnServerConfiguration partial resource uri '
                   'with which VirtualWan is associated to.')
        c.argument('authentication_method', arg_type=get_enum_type(['EAPTLS', 'EAPMSCHAPv2']), help='VPN client '
                   'authentication method.')

    with self.argument_context('network get-active-session') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('bastion_host_name', type=str, help='The name of the Bastion Host.', id_part='name')

    with self.argument_context('network supported-security-provider') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_wan_name', type=str, help='The name of the VirtualWAN for which supported security '
                   'providers are needed.', id_part='name')

    with self.argument_context('network network-interface show-virtual-machine-scale-set-ip-configuration') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_machine_scale_set_name', type=str, help='The name of the virtual machine scale set.',
                   id_part='name')
        c.argument('virtualmachine_index', type=str, help='The virtual machine index.', id_part='child_name_1')
        c.argument('network_interface_name', options_list=['--name', '-n', '--network-interface-name'], type=str,
                   help='The name of the network interface.', id_part='child_name_2')
        c.argument('ip_configuration_name', type=str, help='The name of the ip configuration.',
                   id_part='child_name_3')
        c.argument('expand', type=str, help='Expands referenced resources.')

    with self.argument_context('network public-ip-address list-virtual-machine-scale-set-vm-public-ip-address') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_machine_scale_set_name', type=str, help='The name of the virtual machine scale set.')
        c.argument('virtualmachine_index', type=str, help='The virtual machine index.')
        c.argument('network_interface_name', type=str, help='The network interface name.')
        c.argument('ip_configuration_name', type=str, help='The IP configuration name.')

    with self.argument_context('network public-ip-address show-virtual-machine-scale-set-public-ip-address') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_machine_scale_set_name', type=str, help='The name of the virtual machine scale set.',
                   id_part='name')
        c.argument('virtualmachine_index', type=str, help='The virtual machine index.', id_part='child_name_1')
        c.argument('network_interface_name', type=str, help='The name of the network interface.',
                   id_part='child_name_2')
        c.argument('ip_configuration_name', type=str, help='The name of the IP configuration.',
                   id_part='child_name_3')
        c.argument('public_ip_address_name', options_list=['--name', '-n', '--public-ip-address-name'], type=str,
                   help='The name of the public IP Address.', id_part='child_name_4')
        c.argument('expand', type=str, help='Expands referenced resources.')

    with self.argument_context('network custom-ip-prefix list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('network custom-ip-prefix show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('custom_ip_prefix_name', options_list=['--name', '-n', '--custom-ip-prefix-name'], type=str,
                   help='The name of the custom IP prefix.', id_part='name')
        c.argument('expand', type=str, help='Expands referenced resources.')

    with self.argument_context('network express-route-circuit-connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('circuit_name', type=str, help='The name of the circuit.')
        c.argument('peering_name', type=str, help='The name of the peering.')

    with self.argument_context('network express-route-circuit list-route-table-summary') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('circuit_name', type=str, help='The name of the express route circuit.')
        c.argument('peering_name', type=str, help='The name of the peering.')
        c.argument('device_path', type=str, help='The path of the device.')

    with self.argument_context('network express-route-circuit show-peering-stat') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('circuit_name', type=str, help='The name of the express route circuit.', id_part='name')
        c.argument('peering_name', type=str, help='The name of the peering.', id_part='child_name_1')

    with self.argument_context('network express-route-cross-connection-peering show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cross_connection_name', type=str, help='The name of the ExpressRouteCrossConnection.',
                   id_part='name')
        c.argument('peering_name', type=str, help='The name of the peering.', id_part='child_name_1')

    with self.argument_context('network express-route-cross-connection-peering create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cross_connection_name', type=str, help='The name of the ExpressRouteCrossConnection.')
        c.argument('peering_name', type=str, help='The name of the peering.')
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.')
        c.argument('name', type=str, help='The name of the resource that is unique within a resource group. This name '
                   'can be used to access the resource.')
        c.argument('peering_type', arg_type=get_enum_type(['AzurePublicPeering', 'AzurePrivatePeering',
                                                           'MicrosoftPeering']), help='The peering type.')
        c.argument('state', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The peering state.')
        c.argument('peer_asn', type=int, help='The peer ASN.')
        c.argument('primary_peer_address_prefix', type=str, help='The primary address prefix.')
        c.argument('secondary_peer_address_prefix', type=str, help='The secondary address prefix.')
        c.argument('shared_key', type=str, help='The shared key.')
        c.argument('vlan_id', type=int, help='The VLAN ID.')
        c.argument('microsoft_peering_config', action=AddMicrosoftPeeringConfig, nargs='+', help='The Microsoft '
                   'peering configuration.')
        c.argument('gateway_manager_etag', type=str, help='The GatewayManager Etag.')
        c.argument('ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix',
                   type=str, help='The primary address prefix.', arg_group='Ipv6 Peering Config')
        c.argument('ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_pref'
                   'ix', type=str, help='The secondary address prefix.', arg_group='Ipv6 Peering Config')
        c.argument('express_route_circuit_peering_config_microsoft_peering_config', action=AddMicrosoftPeeringConfig,
                   nargs='+', help='The Microsoft peering configuration.', arg_group='Ipv6 Peering Config')
        c.argument('express_route_circuit_peering_state', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The '
                   'state of peering.', arg_group='Ipv6 Peering Config')
        c.argument('sub_resource_id', type=str, help='Resource ID.', arg_group='Ipv6 Peering Config Route Filter')

    with self.argument_context('network express-route-cross-connection-peering update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cross_connection_name', type=str, help='The name of the ExpressRouteCrossConnection.',
                   id_part='name')
        c.argument('peering_name', type=str, help='The name of the peering.', id_part='child_name_1')
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.')
        c.argument('name', type=str, help='The name of the resource that is unique within a resource group. This name '
                   'can be used to access the resource.')
        c.argument('peering_type', arg_type=get_enum_type(['AzurePublicPeering', 'AzurePrivatePeering',
                                                           'MicrosoftPeering']), help='The peering type.')
        c.argument('state', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The peering state.')
        c.argument('peer_asn', type=int, help='The peer ASN.')
        c.argument('primary_peer_address_prefix', type=str, help='The primary address prefix.')
        c.argument('secondary_peer_address_prefix', type=str, help='The secondary address prefix.')
        c.argument('shared_key', type=str, help='The shared key.')
        c.argument('vlan_id', type=int, help='The VLAN ID.')
        c.argument('microsoft_peering_config', action=AddMicrosoftPeeringConfig, nargs='+', help='The Microsoft '
                   'peering configuration.')
        c.argument('gateway_manager_etag', type=str, help='The GatewayManager Etag.')
        c.argument('ipv6_express_route_circuit_peering_config_primary_peer_address_prefix_primary_peer_address_prefix',
                   type=str, help='The primary address prefix.', arg_group='Ipv6 Peering Config')
        c.argument('ipv6_express_route_circuit_peering_config_secondary_peer_address_prefix_secondary_peer_address_pref'
                   'ix', type=str, help='The secondary address prefix.', arg_group='Ipv6 Peering Config')
        c.argument('express_route_circuit_peering_config_microsoft_peering_config', action=AddMicrosoftPeeringConfig,
                   nargs='+', help='The Microsoft peering configuration.', arg_group='Ipv6 Peering Config')
        c.argument('express_route_circuit_peering_state', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The '
                   'state of peering.', arg_group='Ipv6 Peering Config')
        c.argument('sub_resource_id', type=str, help='Resource ID.', arg_group='Ipv6 Peering Config Route Filter')
        c.ignore('peering_parameters')

    with self.argument_context('network express-route-cross-connection-peering delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cross_connection_name', type=str, help='The name of the ExpressRouteCrossConnection.',
                   id_part='name')
        c.argument('peering_name', type=str, help='The name of the peering.', id_part='child_name_1')

    with self.argument_context('network express-route-cross-connection-peering wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cross_connection_name', type=str, help='The name of the ExpressRouteCrossConnection.',
                   id_part='name')
        c.argument('peering_name', type=str, help='The name of the peering.', id_part='child_name_1')

    with self.argument_context('network load-balancer-frontend-ip-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.')

    with self.argument_context('network inbound-nat-rule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.', id_part='name')
        c.argument('inbound_nat_rule_name', options_list=['--name', '-n', '--inbound-nat-rule-name'], type=str,
                   help='The name of the inbound nat rule.', id_part='child_name_1')
        c.argument('expand', type=str, help='Expands referenced resources.')

    with self.argument_context('network inbound-nat-rule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.')
        c.argument('inbound_nat_rule_name', type=str, help='The name of the inbound nat rule.')
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.')
        c.argument('name', type=str, help='The name of the resource that is unique within the set of inbound NAT rules '
                   'used by the load balancer. This name can be used to access the resource.')
        c.argument('protocol', arg_type=get_enum_type(['Udp', 'Tcp', 'All']), help='The reference to the transport '
                   'protocol used by the load balancing rule.')
        c.argument('frontend_port', type=int, help='The port for the external endpoint. Port numbers for each rule '
                   'must be unique within the Load Balancer. Acceptable values range from 1 to 65534.')
        c.argument('backend_port', type=int, help='The port used for the internal endpoint. Acceptable values range '
                   'from 1 to 65535.')
        c.argument('idle_timeout_in_minutes', type=int, help='The timeout for the TCP idle connection. The value can '
                   'be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when '
                   'the protocol is set to TCP.')
        c.argument('enable_floating_ip', arg_type=get_three_state_flag(), help='Configures a virtual machine\'s '
                   'endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. '
                   'This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This '
                   'setting can\'t be changed after you create the endpoint.')
        c.argument('enable_tcp_reset', arg_type=get_three_state_flag(), help='Receive bidirectional TCP Reset on TCP '
                   'flow idle timeout or unexpected connection termination. This element is only used when the '
                   'protocol is set to TCP.')
        c.argument('sub_resource_id', type=str, help='Resource ID.', arg_group='Frontend IPConfiguration')

    with self.argument_context('network inbound-nat-rule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.', id_part='name')
        c.argument('inbound_nat_rule_name', type=str, help='The name of the inbound nat rule.',
                   id_part='child_name_1')
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.')
        c.argument('name', type=str, help='The name of the resource that is unique within the set of inbound NAT rules '
                   'used by the load balancer. This name can be used to access the resource.')
        c.argument('protocol', arg_type=get_enum_type(['Udp', 'Tcp', 'All']), help='The reference to the transport '
                   'protocol used by the load balancing rule.')
        c.argument('frontend_port', type=int, help='The port for the external endpoint. Port numbers for each rule '
                   'must be unique within the Load Balancer. Acceptable values range from 1 to 65534.')
        c.argument('backend_port', type=int, help='The port used for the internal endpoint. Acceptable values range '
                   'from 1 to 65535.')
        c.argument('idle_timeout_in_minutes', type=int, help='The timeout for the TCP idle connection. The value can '
                   'be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when '
                   'the protocol is set to TCP.')
        c.argument('enable_floating_ip', arg_type=get_three_state_flag(), help='Configures a virtual machine\'s '
                   'endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. '
                   'This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This '
                   'setting can\'t be changed after you create the endpoint.')
        c.argument('enable_tcp_reset', arg_type=get_three_state_flag(), help='Receive bidirectional TCP Reset on TCP '
                   'flow idle timeout or unexpected connection termination. This element is only used when the '
                   'protocol is set to TCP.')
        c.argument('sub_resource_id', type=str, help='Resource ID.', arg_group='Frontend IPConfiguration')
        c.ignore('inbound_nat_rule_parameters')

    with self.argument_context('network inbound-nat-rule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.', id_part='name')
        c.argument('inbound_nat_rule_name', options_list=['--name', '-n', '--inbound-nat-rule-name'], type=str,
                   help='The name of the inbound nat rule.', id_part='child_name_1')

    with self.argument_context('network inbound-nat-rule wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.', id_part='name')
        c.argument('inbound_nat_rule_name', options_list=['--name', '-n', '--inbound-nat-rule-name'], type=str,
                   help='The name of the inbound nat rule.', id_part='child_name_1')
        c.argument('expand', type=str, help='Expands referenced resources.')

    with self.argument_context('network load-balancer-network-interface list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('load_balancer_name', type=str, help='The name of the load balancer.')

    with self.argument_context('network network-interface-ip-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_interface_name', type=str, help='The name of the network interface.')

    with self.argument_context('network network-interface-ip-configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_interface_name', type=str, help='The name of the network interface.', id_part='name')
        c.argument('ip_configuration_name', type=str, help='The name of the ip configuration name.',
                   id_part='child_name_1')

    with self.argument_context('network network-interface-load-balancer list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_interface_name', type=str, help='The name of the network interface.')

    with self.argument_context('network network-interface-tap-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_interface_name', type=str, help='The name of the network interface.')

    with self.argument_context('network network-interface-tap-configuration delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_interface_name', type=str, help='The name of the network interface.', id_part='name')
        c.argument('tap_configuration_name', type=str, help='The name of the tap configuration.',
                   id_part='child_name_1')

    with self.argument_context('network default-security-rule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_security_group_name', type=str, help='The name of the network security group.')

    with self.argument_context('network default-security-rule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_security_group_name', type=str, help='The name of the network security group.',
                   id_part='name')
        c.argument('default_security_rule_name', options_list=['--name', '-n', '--default-security-rule-name'],
                   type=str, help='The name of the default security rule.', id_part='child_name_1')

    with self.argument_context('network network-watcher get-azure-reachability-report') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_watcher_name', options_list=['--name', '-n', '--network-watcher-name'], type=str,
                   help='The name of the network watcher resource.', id_part='name')
        c.argument('provider_location', action=AddProviderLocation, nargs='+', help='Parameters that define a '
                   'geographic location.')
        c.argument('providers', nargs='+', help='List of Internet service providers.')
        c.argument('azure_locations', nargs='+', help='Optional Azure regions to scope the query to.')
        c.argument('start_time', help='The start time for the Azure reachability report.')
        c.argument('end_time', help='The end time for the Azure reachability report.')

    with self.argument_context('network network-watcher list-available-provider') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('network_watcher_name', options_list=['--name', '-n', '--network-watcher-name'], type=str,
                   help='The name of the network watcher resource.')
        c.argument('azure_locations', nargs='+', help='A list of Azure regions.')
        c.argument('country', type=str, help='The country for available providers list.')
        c.argument('state', type=str, help='The state for available providers list.')
        c.argument('city', type=str, help='The city or town for available providers list.')

    with self.argument_context('network private-link-service list-private-endpoint-connection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('service_name', type=str, help='The name of the private link service.')

    with self.argument_context('network private-link-service show-private-endpoint-connection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('service_name', type=str, help='The name of the private link service.', id_part='name')
        c.argument('pe_connection_name', type=str, help='The name of the private end point connection.',
                   id_part='child_name_1')
        c.argument('expand', type=str, help='Expands referenced resources.')

    with self.argument_context('network virtual-network list-usage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', options_list=['--name', '-n', '--virtual-network-name'], type=str,
                   help='The name of the virtual network.')

    with self.argument_context('network subnet prepare-network-policy') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', type=str, help='The name of the virtual network.', id_part='name')
        c.argument('subnet_name', options_list=['--name', '-n', '--subnet-name'], type=str, help='The name of the '
                   'subnet.', id_part='child_name_1')
        c.argument('service_name', type=str, help='The name of the service for which subnet is being prepared for.')
        c.argument('network_intent_policy_configurations', type=validate_file_or_dict, help='A list of '
                   'NetworkIntentPolicyConfiguration. Expected value: json-string/@json-file.')

    with self.argument_context('network subnet unprepare-network-policy') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', type=str, help='The name of the virtual network.', id_part='name')
        c.argument('subnet_name', options_list=['--name', '-n', '--subnet-name'], type=str, help='The name of the '
                   'subnet.', id_part='child_name_1')
        c.argument('service_name', type=str, help='The name of the service for which subnet is being unprepared for.')

    with self.argument_context('network resource-navigation-link list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', type=str, help='The name of the virtual network.')
        c.argument('subnet_name', type=str, help='The name of the subnet.')

    with self.argument_context('network service-association-link list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', type=str, help='The name of the virtual network.')
        c.argument('subnet_name', type=str, help='The name of the subnet.')

    with self.argument_context('network virtual-network-gateway disconnect-virtual-network-gateway-vpn-connection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.', id_part='name')
        c.argument('vpn_connection_ids', nargs='+', help='List of p2s vpn connection Ids.')

    with self.argument_context('network virtual-network-gateway get-vpnclient-connection-health') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.', id_part='name')

    with self.argument_context('network virtual-network-gateway get-vpnclient-ipsec-parameter') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The virtual network gateway name.', id_part='name')

    with self.argument_context('network virtual-network-gateway list-connection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.')

    with self.argument_context('network virtual-network-gateway set-vpnclient-ipsec-parameter') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.', id_part='name')
        c.argument('sa_life_time_seconds', type=int, help='The IPSec Security Association (also called Quick Mode or '
                   'Phase 2 SA) lifetime in seconds for P2S client.')
        c.argument('sa_data_size_kilobytes', type=int, help='The IPSec Security Association (also called Quick Mode or '
                   'Phase 2 SA) payload size in KB for P2S client..')
        c.argument('ipsec_encryption', arg_type=get_enum_type(['None', 'DES', 'DES3', 'AES128', 'AES192', 'AES256',
                                                               'GCMAES128', 'GCMAES192', 'GCMAES256']), help='The '
                   'IPSec encryption algorithm (IKE phase 1).')
        c.argument('ipsec_integrity', arg_type=get_enum_type(['MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192',
                                                              'GCMAES256']), help='The IPSec integrity algorithm (IKE '
                   'phase 1).')
        c.argument('ike_encryption', arg_type=get_enum_type(['DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES256',
                                                             'GCMAES128']), help='The IKE encryption algorithm (IKE '
                   'phase 2).')
        c.argument('ike_integrity', arg_type=get_enum_type(['MD5', 'SHA1', 'SHA256', 'SHA384', 'GCMAES256',
                                                            'GCMAES128']), help='The IKE integrity algorithm (IKE '
                   'phase 2).')
        c.argument('dh_group', arg_type=get_enum_type(['None', 'DHGroup1', 'DHGroup2', 'DHGroup14', 'DHGroup2048',
                                                       'ECP256', 'ECP384', 'DHGroup24']), help='The DH Group used in '
                   'IKE Phase 1 for initial SA.')
        c.argument('pfs_group', arg_type=get_enum_type(['None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24',
                                                        'PFS14', 'PFSMM']), help='The Pfs Group used in IKE Phase 2 '
                   'for new child SA.')

    with self.argument_context('network virtual-network-gateway start-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.', id_part='name')
        c.argument('filter_data', type=str, help='Start Packet capture parameters.')

    with self.argument_context('network virtual-network-gateway stop-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.', id_part='name')
        c.argument('sas_url', type=str, help='SAS url for packet capture on virtual network gateway.')

    with self.argument_context('network virtual-network-gateway supported-vpn-device') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_name', options_list=['--name', '-n', '--virtual-network-gateway-name'],
                   type=str, help='The name of the virtual network gateway.', id_part='name')

    with self.argument_context('network virtual-network-gateway vpn-device-configuration-script') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_connection_name', type=str, help='The name of the virtual network gateway '
                   'connection for which the configuration script is generated.', id_part='name')
        c.argument('vendor', type=str, help='The vendor for the vpn device.')
        c.argument('device_family', type=str, help='The device family for the vpn device.')
        c.argument('firmware_version', type=str, help='The firmware version for the vpn device.')

    with self.argument_context('network virtual-network-gateway-connection get-ike-sas') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_connection_name', options_list=['--name', '-n',
                                                                            '--virtual-network-gateway-connection-name'
                                                                            ], type=str, help='The name of the virtual '
                   'network gateway Connection.', id_part='name')

    with self.argument_context('network virtual-network-gateway-connection start-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_connection_name', options_list=['--name', '-n',
                                                                            '--virtual-network-gateway-connection-name'
                                                                            ], type=str, help='The name of the virtual '
                   'network gateway connection.', id_part='name')
        c.argument('filter_data', type=str, help='Start Packet capture parameters.')

    with self.argument_context('network virtual-network-gateway-connection stop-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_gateway_connection_name', options_list=['--name', '-n',
                                                                            '--virtual-network-gateway-connection-name'
                                                                            ], type=str, help='The name of the virtual '
                   'network gateway Connection.', id_part='name')
        c.argument('sas_url', type=str, help='SAS url for packet capture on virtual network gateway.')

    with self.argument_context('network virtual-network-tap list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('network virtual-network-tap show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tap_name', type=str, help='The name of virtual network tap.', id_part='name')

    with self.argument_context('network virtual-network-tap delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tap_name', type=str, help='The name of the virtual network tap.', id_part='name')

    with self.argument_context('network virtual-network-tap wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tap_name', type=str, help='The name of virtual network tap.', id_part='name')

    with self.argument_context('network vpn-site-link list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vpn_site_name', type=str, help='The name of the VpnSite.')

    with self.argument_context('network vpn-site-link show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('vpn_site_name', type=str, help='The name of the VpnSite.', id_part='name')
        c.argument('vpn_site_link_name', options_list=['--name', '-n', '--vpn-site-link-name'], type=str, help='The '
                   'name of the VpnSiteLink being retrieved.', id_part='child_name_1')

    with self.argument_context('network vpn-gateway reset') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')

    with self.argument_context('network vpn-gateway start-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')
        c.argument('filter_data', type=str, help='Start Packet capture parameters on vpn gateway.')

    with self.argument_context('network vpn-gateway stop-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')
        c.argument('sas_url', type=str, help='SAS url for packet capture on vpn gateway.')

    with self.argument_context('network vpn-connection start-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')
        c.argument('vpn_connection_name', options_list=['--name', '-n', '--vpn-connection-name'], type=str, help='The '
                   'name of the vpn connection.', id_part='child_name_1')
        c.argument('filter_data', type=str, help='Start Packet capture parameters on vpn connection.')
        c.argument('link_connection_names', nargs='+', help='List of site link connection names.')

    with self.argument_context('network vpn-connection stop-packet-capture') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')
        c.argument('vpn_connection_name', options_list=['--name', '-n', '--vpn-connection-name'], type=str, help='The '
                   'name of the vpn connection.', id_part='child_name_1')
        c.argument('sas_url', type=str, help='SAS url for packet capture on vpn connection.')
        c.argument('link_connection_names', nargs='+', help='List of site link connection names.')

    with self.argument_context('network vpn-site-link-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')
        c.argument('connection_name', type=str, help='The name of the vpn connection.', id_part='child_name_1')
        c.argument('link_connection_name', type=str, help='The name of the vpn connection.', id_part='child_name_2')

    with self.argument_context('network nat-rule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.')

    with self.argument_context('network p2-s-vpn-gateway disconnect-p2-s-vpn-connection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('p2_s_vpn_gateway_name', options_list=['--name', '-n', '--p2-s-vpn-gateway-name'], type=str,
                   help='The name of the P2S Vpn Gateway.', id_part='name')
        c.argument('vpn_connection_ids', nargs='+', help='List of p2s vpn connection Ids.')

    with self.argument_context('network p2-s-vpn-gateway get-p2-s-vpn-connection-health') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the P2SVpnGateway.', id_part='name')

    with self.argument_context('network p2-s-vpn-gateway get-p2-s-vpn-connection-health-detailed') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the P2SVpnGateway.', id_part='name')
        c.argument('vpn_user_names_filter', nargs='+', help='The list of p2s vpn user names whose p2s vpn connection '
                   'detailed health to retrieve for.')
        c.argument('output_blob_sas_url', type=str, help='The sas-url to download the P2S Vpn connection health '
                   'detail.')

    with self.argument_context('network p2-s-vpn-gateway reset') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('gateway_name', type=str, help='The name of the gateway.', id_part='name')

    with self.argument_context('network vpn-server-configuration-associated-with-virtual-wan list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_wan_name', type=str, help='The name of the VirtualWAN whose associated '
                   'VpnServerConfigurations is needed.')

    with self.argument_context('network virtual-hub-bgp-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_hub_name', type=str, help='The name of the VirtualHub.', id_part='name')
        c.argument('connection_name', type=str, help='The name of the connection.', id_part='child_name_1')

    with self.argument_context('network virtual-hub-bgp-connection list-advertised-route') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('hub_name', type=str, help='The name of the virtual hub.')
        c.argument('connection_name', type=str, help='The name of the virtual hub bgp connection.')

    with self.argument_context('network virtual-hub-bgp-connection list-learned-route') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('hub_name', type=str, help='The name of the virtual hub.')
        c.argument('connection_name', type=str, help='The name of the virtual hub bgp connection.')

    with self.argument_context('network virtual-hub-ip-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_hub_name', type=str, help='The name of the VirtualHub.')
