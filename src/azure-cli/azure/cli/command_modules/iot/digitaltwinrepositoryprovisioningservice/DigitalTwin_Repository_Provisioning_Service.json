{  
    "swagger":"2.0",
    "info":{  
       "version":"v1",
       "title":"DigitalTwin Repository Provisioning Service",
       "description":"DigitalTwin Repository Control Plane Service. Provisions Repository and Access keys to a repository.",
       "contact":{  
          "name":"Â© Microsoft 2019",
          "url":"http://www.microsoft.com",
          "email":"support@microsoft.com"
       }
    },
    "schemes":[  
       "http"
    ],
    "paths":{  
       "/repositories/{repositoryId}/authKeys":{  
          "get":{  
             "tags":[  
                "AuthKeys"
             ],
             "summary":"Gets all the keys associated to a repository.\r\nConnection String format:\r\nHostName=repository svc endpoint;RepositoryId=repository id(GUID);SharedAccessKeyName =access key id/name;SharedAccessKey=shared access key;",
             "operationId":"GetKeysAsync",
             "consumes":[  
 
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository id",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "uniqueItems":false,
                      "type":"array",
                      "items":{  
                         "$ref":"#/definitions/KeyMetadata"
                      }
                   }
                }
             }
          },
          "put":{  
             "tags":[  
                "AuthKeys"
             ],
             "summary":"Creates or updates a key for the given repository.\r\nIf Id present in the RepositoryKeyRequest's properties, it will update the key with new key.\r\nOtherwise return a new key.",
             "operationId":"CreateOrUpdateKeyAsync",
             "consumes":[  
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryKeyRequest",
                   "in":"body",
                   "description":"Azure.IoT.DigitalTwin.ResourceProvisioning.Common.RepositoryKeyRequest object.",
                   "required":false,
                   "schema":{  
                      "$ref":"#/definitions/RepositoryKeyRequest"
                   }
                },
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository id",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "404":{  
                   "description":"Not Found"
                },
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "$ref":"#/definitions/KeyMetadata"
                   }
                }
             }
          }
       },
       "/repositories/{repositoryId}/authKeys/{id}":{  
          "get":{  
             "tags":[  
                "AuthKeys"
             ],
             "summary":"Gets a key metadata information for the given key.\r\nConnection String format:\r\nHostName=repository svc endpoint;RepositoryId=repository id(GUID);SharedAccessKeyName =access key id/name;SharedAccessKey=shared access key;",
             "operationId":"GetKeyAsync",
             "consumes":[  
 
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository Id",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"id",
                   "in":"path",
                   "description":"Key Id.",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "$ref":"#/definitions/KeyMetadata"
                   }
                },
                "404":{  
                   "description":"Not Found"
                }
             }
          },
          "delete":{  
             "tags":[  
                "AuthKeys"
             ],
             "summary":"Deletes a key from the given repository.",
             "operationId":"DeleteKeyAsync",
             "consumes":[  
 
             ],
             "produces":[  
 
             ],
             "parameters":[  
                {  
                   "name":"id",
                   "in":"path",
                   "description":"Key id.",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository id.",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "204":{  
                   "description":"Success"
                }
             }
          }
       },
       "/repositories":{  
          "get":{  
             "tags":[  
                "Repositories"
             ],
             "summary":"Gets all the repositories metadata belong to the user's tenant.",
             "operationId":"GetRepositoriesAsync",
             "consumes":[  
 
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "uniqueItems":false,
                      "type":"array",
                      "items":{  
                         "$ref":"#/definitions/RepositoryMetadata"
                      }
                   }
                }
             }
          },
          "put":{  
             "tags":[  
                "Repositories"
             ],
             "summary":"Create or updates a repository.\r\nIf Id is present in the RepositoryRequest properties object, service tries to update the repository.\r\notherwise it will try to create repository.",
             "operationId":"CreateOrUpdateRepositoryAsync",
             "consumes":[  
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryUpsertRequest",
                   "in":"body",
                   "description":"RepositoryUpsertRequest object.\r\n            If Id is present in the RepositoryRequest properties object, service tries to update the repository.",
                   "required":false,
                   "schema":{  
                      "$ref":"#/definitions/RepositoryUpsertRequest"
                   }
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "$ref":"#/definitions/RepositoryProvisionResponseBase"
                   }
                }
             }
          }
       },
       "/repositories/{repositoryId}":{  
          "get":{  
             "tags":[  
                "Repositories"
             ],
             "summary":"Gets the repository metadata for the given repository id.",
             "operationId":"GetRepositoryAsync",
             "consumes":[  
 
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository Id.",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "$ref":"#/definitions/RepositoryMetadata"
                   }
                }
             }
          },
          "delete":{  
             "tags":[  
                "Repositories"
             ],
             "summary":"Deletes the repository for given id.",
             "operationId":"DeleteRepositoryAsync",
             "consumes":[  
 
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository Id",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "$ref":"#/definitions/RepositoryProvisionResponseBase"
                   }
                }
             }
          }
       },
       "/repositories/{repositoryId}/status/{trackingId}":{  
          "get":{  
             "tags":[  
                "Repositories"
             ],
             "summary":"Returns the repository provisioning status",
             "operationId":"GetProvisionStatus",
             "consumes":[  
 
             ],
             "produces":[  
                "application/json"
             ],
             "parameters":[  
                {  
                   "name":"repositoryId",
                   "in":"path",
                   "description":"Repository id.",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"trackingId",
                   "in":"path",
                   "description":"Tracking id (provisioningState)",
                   "required":true,
                   "type":"string"
                },
                {  
                   "name":"api-version",
                   "in":"query",
                   "description":"API version.",
                   "required":true,
                   "type":"string"
                }
             ],
             "responses":{  
                "200":{  
                   "description":"Success",
                   "schema":{  
                      "$ref":"#/definitions/RepositoryProvisionResponseBase"
                   }
                },
                "404":{  
                   "description":"Not Found"
                }
             }
          }
       }
    },
    "definitions":{  
       "RepositoryKeyRequest":{  
          "type":"object",
          "properties":{  
             "properties":{  
                "$ref":"#/definitions/RepositoryKeyRequestProperties"
             }
          }
       },
       "RepositoryKeyRequestProperties":{  
          "type":"object",
          "properties":{  
             "id":{  
                "type":"string"
             },
             "userRole":{  
                "enum":[  
                   "Reader",
                   "Contributor",
                   "Admin"
                ],
                "type":"string"
             }
          }
       },
       "KeyMetadata":{  
          "type":"object",
          "properties":{  
             "id":{  
                "type":"string",
                "readOnly":true
             },
             "repositoryId":{  
                "type":"string",
                "readOnly":true
             },
             "userRole":{  
                "enum":[  
                   "Reader",
                   "Contributor",
                   "Admin"
                ],
                "type":"string"
             },
             "secret":{  
                "type":"string",
                "readOnly":true
             },
             "tenantId":{  
                "type":"string",
                "readOnly":true
             },
             "tenantName":{  
                "type":"string",
                "readOnly":true
             },
             "createdOn":{  
                "format":"date-time",
                "type":"string",
                "readOnly":true
             },
             "lastUpdated":{  
                "format":"date-time",
                "type":"string",
                "readOnly":true
             },
             "connectionString":{  
                "type":"string",
                "readOnly":true
             },
             "serviceEndpoint":{  
                "type":"string",
                "readOnly":true
             }
          }
       },
       "RepositoryMetadata":{  
          "type":"object",
          "properties":{  
             "id":{  
                "type":"string"
             },
             "name":{  
                "type":"string"
             },
             "type":{  
                "type":"string"
             },
             "properties":{  
                "$ref":"#/definitions/RepositoryMetadataProperties"
             }
          }
       },
       "RepositoryMetadataProperties":{  
          "type":"object",
          "properties":{  
             "id":{  
                "type":"string"
             },
             "tenantId":{  
                "type":"string"
             },
             "tenantName":{  
                "type":"string"
             },
             "kind":{  
                "enum":[  
                   "Repository",
                   "User",
                   "Key"
                ],
                "type":"string"
             },
             "createdOn":{  
                "format":"date-time",
                "type":"string"
             },
             "lastUpdated":{  
                "format":"date-time",
                "type":"string"
             }
          }
       },
       "RepositoryUpsertRequest":{  
          "description":"Repository Provision Upsert request object.",
          "type":"object",
          "properties":{  
             "properties":{  
                "$ref":"#/definitions/RepositoryUpsertRequestProperties"
             }
          }
       },
       "RepositoryUpsertRequestProperties":{  
          "description":"Repository Upsert Request properties.",
          "type":"object",
          "properties":{  
             "id":{  
                "description":"Gets or sets repository id. NULL in case of repository create.",
                "type":"string"
             },
             "name":{  
                "description":"Gets or sets repository name.",
                "type":"string"
             }
          }
       },
       "RepositoryProvisionResponseBase":{  
          "type":"object",
          "properties":{  
             "status":{  
                "enum":[  
                   "Provisioning",
                   "Provisioned",
                   "Deleting",
                   "Deleted"
                ],
                "type":"string"
             },
             "provisioningState":{  
                "type":"string"
             },
             "id":{  
                "type":"string"
             },
             "pollBackUri":{  
                "type":"string"
             }
          }
       }
    }
 }