# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network nic ip-config",
)
class __CMDGroup(AAZCommandGroup):
    """Manage IP configurations of a network interface.
    """
    pass


@register_command(
    "network nic ip-config create",
)
class Create(AAZCommand):
    """Create an IP configuration.

    You must have the Microsoft.Network/AllowMultipleIpConfigurationsPerNic feature enabled for your subscription. Only one configuration may be designated as the primary IP configuration per NIC, using the `--make-primary` flag.

    :example: Create a primary IP configuration for a NIC.
        az network nic ip-config create -g MyResourceGroup -n MyIpConfig --nic-name MyNic --make-primary
    """

    _aaz_info = {
        "version": "2018-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkinterfaces/{}", "2018-11-01", "properties.ipConfigurations[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nic_name = AAZStrArg(
            options=["--nic-name"],
            help="Name of the network interface (NIC).",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the IP configuration.",
            required=True,
        )

        # define Arg Group "IP Configuration"

        _args_schema = cls._args_schema
        _args_schema.make_primary = AAZBoolArg(
            options=["--make-primary"],
            arg_group="IP Configuration",
            help="Set to make this configuration the primary one for the NIC.",
            default=False,
        )
        _args_schema.private_ip_address = AAZStrArg(
            options=["--private-ip-address"],
            arg_group="IP Configuration",
            help="Static IP address to use or \"\"('\"\"' in PowerShell) to use a dynamic address.",
        )
        _args_schema.private_ip_address_version = AAZStrArg(
            options=["--private-ip-address-version"],
            arg_group="IP Configuration",
            help="Version of private IP address to use.",
            default="IPv4",
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        _args_schema.public_ip_address = AAZResourceIdArg(
            options=["--public-ip-address"],
            arg_group="IP Configuration",
            help="Name or ID of an existing public IP address.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/publicIPAddresses/{}",
            ),
        )
        _args_schema.subnet = AAZResourceIdArg(
            options=["--subnet"],
            arg_group="IP Configuration",
            help="Name or ID of an existing subnet. If name specified, please also specify `--vnet-name`.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/{}",
            ),
        )

        # define Arg Group "Parameters.properties.ipConfigurations[]"

        # define Arg Group "PipObj"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.application_gateway_backend_address_pools = AAZListArg(
            options=["--application-gateway-backend-address-pools"],
            arg_group="Properties",
            help="The reference to ApplicationGatewayBackendAddressPool resource.",
        )
        _args_schema.asgs_obj = AAZListArg(
            options=["--asgs-obj"],
            arg_group="Properties",
            help="Application security groups in which the IP configuration is included.",
        )
        _args_schema.load_balancer_backend_address_pools = AAZListArg(
            options=["--load-balancer-backend-address-pools"],
            arg_group="Properties",
            help="The reference to LoadBalancerBackendAddressPool resource.",
        )
        _args_schema.load_balancer_inbound_nat_rules = AAZListArg(
            options=["--load-balancer-inbound-nat-rules"],
            arg_group="Properties",
            help="A list of references of LoadBalancerInboundNatRules.",
        )
        _args_schema.private_ip_allocation_method = AAZStrArg(
            options=["--private-ip-allocation-method"],
            arg_group="Properties",
            help="The private IP address allocation method.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )

        application_gateway_backend_address_pools = cls._args_schema.application_gateway_backend_address_pools
        application_gateway_backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_schema.application_gateway_backend_address_pools.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the backend address pool that is unique within an Application Gateway.",
        )

        asgs_obj = cls._args_schema.asgs_obj
        asgs_obj.Element = AAZObjectArg()

        _element = cls._args_schema.asgs_obj.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/applicationSecurityGroups/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        tags = cls._args_schema.asgs_obj.Element.tags
        tags.Element = AAZStrArg()

        load_balancer_backend_address_pools = cls._args_schema.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_schema.load_balancer_backend_address_pools.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/backendAddressPools/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.",
        )

        load_balancer_inbound_nat_rules = cls._args_schema.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectArg()

        _element = cls._args_schema.load_balancer_inbound_nat_rules.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/inboundNatRules/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.",
        )

        # define Arg Group "PublicIPAddress"

        # define Arg Group "Subnet"

        # define Arg Group "SubnetObj"
        return cls._args_schema

    _args_application_security_group_update = None

    @classmethod
    def _build_args_application_security_group_update(cls, _schema):
        if cls._args_application_security_group_update is not None:
            _schema.id = cls._args_application_security_group_update.id
            _schema.location = cls._args_application_security_group_update.location
            _schema.tags = cls._args_application_security_group_update.tags
            return

        cls._args_application_security_group_update = AAZObjectArg()

        application_security_group_update = cls._args_application_security_group_update
        application_security_group_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/applicationSecurityGroups/{}",
            ),
        )
        application_security_group_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        application_security_group_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        tags = cls._args_application_security_group_update.tags
        tags.Element = AAZStrArg()

        _schema.id = cls._args_application_security_group_update.id
        _schema.location = cls._args_application_security_group_update.location
        _schema.tags = cls._args_application_security_group_update.tags

    _args_network_interface_ip_configuration_update = None

    @classmethod
    def _build_args_network_interface_ip_configuration_update(cls, _schema):
        if cls._args_network_interface_ip_configuration_update is not None:
            _schema.application_gateway_backend_address_pools = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools
            _schema.application_security_groups = cls._args_network_interface_ip_configuration_update.application_security_groups
            _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
            _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
            _schema.name = cls._args_network_interface_ip_configuration_update.name
            _schema.primary = cls._args_network_interface_ip_configuration_update.primary
            _schema.private_ip_address = cls._args_network_interface_ip_configuration_update.private_ip_address
            _schema.private_ip_address_version = cls._args_network_interface_ip_configuration_update.private_ip_address_version
            _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_update.private_ip_allocation_method
            _schema.public_ip_address = cls._args_network_interface_ip_configuration_update.public_ip_address
            _schema.subnet = cls._args_network_interface_ip_configuration_update.subnet
            _schema.virtual_network_taps = cls._args_network_interface_ip_configuration_update.virtual_network_taps
            return

        cls._args_network_interface_ip_configuration_update = AAZObjectArg()

        network_interface_ip_configuration_update = cls._args_network_interface_ip_configuration_update
        network_interface_ip_configuration_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        network_interface_ip_configuration_update.application_gateway_backend_address_pools = AAZListArg(
            options=["application-gateway-backend-address-pools"],
            help="The reference of ApplicationGatewayBackendAddressPool resource.",
        )
        network_interface_ip_configuration_update.application_security_groups = AAZListArg(
            options=["application-security-groups"],
            help="Application security groups in which the IP configuration is included.",
        )
        network_interface_ip_configuration_update.load_balancer_backend_address_pools = AAZListArg(
            options=["load-balancer-backend-address-pools"],
            help="The reference of LoadBalancerBackendAddressPool resource.",
        )
        network_interface_ip_configuration_update.load_balancer_inbound_nat_rules = AAZListArg(
            options=["load-balancer-inbound-nat-rules"],
            help="A list of references of LoadBalancerInboundNatRules.",
        )
        network_interface_ip_configuration_update.primary = AAZBoolArg(
            options=["primary"],
            help="Gets whether this is a primary customer address on the network interface.",
        )
        network_interface_ip_configuration_update.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="Private IP address of the IP configuration.",
        )
        network_interface_ip_configuration_update.private_ip_address_version = AAZStrArg(
            options=["private-ip-address-version"],
            help="Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.",
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        network_interface_ip_configuration_update.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        network_interface_ip_configuration_update.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="Public IP address bound to the IP configuration.",
        )
        cls._build_args_public_ip_address_update(network_interface_ip_configuration_update.public_ip_address)
        network_interface_ip_configuration_update.subnet = AAZObjectArg(
            options=["subnet"],
            help="Subnet bound to the IP configuration.",
        )
        cls._build_args_subnet_update(network_interface_ip_configuration_update.subnet)
        network_interface_ip_configuration_update.virtual_network_taps = AAZListArg(
            options=["virtual-network-taps"],
            help="The reference to Virtual Network Taps.",
        )

        application_gateway_backend_address_pools = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools
        application_gateway_backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the backend address pool that is unique within an Application Gateway.",
        )
        _element.backend_addresses = AAZListArg(
            options=["backend-addresses"],
            help="Backend addresses",
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Type of the resource.",
        )

        backend_addresses = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools.Element.backend_addresses
        backend_addresses.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools.Element.backend_addresses.Element
        _element.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Fully qualified domain name (FQDN).",
        )
        _element.ip_address = AAZStrArg(
            options=["ip-address"],
            help="IP address",
        )

        application_security_groups = cls._args_network_interface_ip_configuration_update.application_security_groups
        application_security_groups.Element = AAZObjectArg()
        cls._build_args_application_security_group_update(application_security_groups.Element)

        load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/backendAddressPools/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )

        load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/inboundNatRules/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.backend_port = AAZIntArg(
            options=["backend-port"],
            help="The port used for the internal endpoint. Acceptable values range from 1 to 65535.",
        )
        _element.enable_floating_ip = AAZBoolArg(
            options=["enable-floating-ip"],
            help="Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.",
        )
        _element.enable_tcp_reset = AAZBoolArg(
            options=["enable-tcp-reset"],
            help="Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.",
        )
        _element.frontend_ip_configuration = AAZObjectArg(
            options=["frontend-ip-configuration"],
            help="A reference to frontend IP addresses.",
        )
        cls._build_args_sub_resource_update(_element.frontend_ip_configuration)
        _element.frontend_port = AAZIntArg(
            options=["frontend-port"],
            help="The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.",
        )
        _element.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All'.",
            enum={"All": "All", "Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )

        virtual_network_taps = cls._args_network_interface_ip_configuration_update.virtual_network_taps
        virtual_network_taps.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="Gets a unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworkTaps/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.destination_load_balancer_front_end_ip_configuration = AAZObjectArg(
            options=["destination-load-balancer-front-end-ip-configuration"],
            help="The reference to the private IP address on the internal Load Balancer that will receive the tap",
        )
        _element.destination_network_interface_ip_configuration = AAZObjectArg(
            options=["destination-network-interface-ip-configuration"],
            help="The reference to the private IP Address of the collector nic that will receive the tap",
        )
        cls._build_args_network_interface_ip_configuration_update(_element.destination_network_interface_ip_configuration)
        _element.destination_port = AAZIntArg(
            options=["destination-port"],
            help="The VXLAN destination port that will receive the tapped traffic.",
        )
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        destination_load_balancer_front_end_ip_configuration = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element.destination_load_balancer_front_end_ip_configuration
        destination_load_balancer_front_end_ip_configuration.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        destination_load_balancer_front_end_ip_configuration.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/frontendIPConfigurations/{}",
            ),
        )
        destination_load_balancer_front_end_ip_configuration.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        destination_load_balancer_front_end_ip_configuration.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="The private IP address of the IP configuration.",
        )
        destination_load_balancer_front_end_ip_configuration.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        destination_load_balancer_front_end_ip_configuration.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        destination_load_balancer_front_end_ip_configuration.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="The reference of the Public IP resource.",
        )
        cls._build_args_public_ip_address_update(destination_load_balancer_front_end_ip_configuration.public_ip_address)
        destination_load_balancer_front_end_ip_configuration.public_ip_prefix = AAZObjectArg(
            options=["public-ip-prefix"],
            help="The reference of the Public IP Prefix resource.",
        )
        cls._build_args_sub_resource_update(destination_load_balancer_front_end_ip_configuration.public_ip_prefix)
        destination_load_balancer_front_end_ip_configuration.subnet = AAZObjectArg(
            options=["subnet"],
            help="The reference of the subnet resource.",
        )
        cls._build_args_subnet_update(destination_load_balancer_front_end_ip_configuration.subnet)
        destination_load_balancer_front_end_ip_configuration.zones = AAZListArg(
            options=["zones"],
            help="A list of availability zones denoting the IP allocated for the resource needs to come from.",
        )

        zones = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element.destination_load_balancer_front_end_ip_configuration.zones
        zones.Element = AAZStrArg()

        tags = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element.tags
        tags.Element = AAZStrArg()

        _schema.application_gateway_backend_address_pools = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools
        _schema.application_security_groups = cls._args_network_interface_ip_configuration_update.application_security_groups
        _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
        _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
        _schema.name = cls._args_network_interface_ip_configuration_update.name
        _schema.primary = cls._args_network_interface_ip_configuration_update.primary
        _schema.private_ip_address = cls._args_network_interface_ip_configuration_update.private_ip_address
        _schema.private_ip_address_version = cls._args_network_interface_ip_configuration_update.private_ip_address_version
        _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_update.private_ip_allocation_method
        _schema.public_ip_address = cls._args_network_interface_ip_configuration_update.public_ip_address
        _schema.subnet = cls._args_network_interface_ip_configuration_update.subnet
        _schema.virtual_network_taps = cls._args_network_interface_ip_configuration_update.virtual_network_taps

    _args_network_security_group_update = None

    @classmethod
    def _build_args_network_security_group_update(cls, _schema):
        if cls._args_network_security_group_update is not None:
            _schema.default_security_rules = cls._args_network_security_group_update.default_security_rules
            _schema.etag = cls._args_network_security_group_update.etag
            _schema.id = cls._args_network_security_group_update.id
            _schema.location = cls._args_network_security_group_update.location
            _schema.provisioning_state = cls._args_network_security_group_update.provisioning_state
            _schema.resource_guid = cls._args_network_security_group_update.resource_guid
            _schema.security_rules = cls._args_network_security_group_update.security_rules
            _schema.tags = cls._args_network_security_group_update.tags
            return

        cls._args_network_security_group_update = AAZObjectArg()

        network_security_group_update = cls._args_network_security_group_update
        network_security_group_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        network_security_group_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}",
            ),
        )
        network_security_group_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        network_security_group_update.default_security_rules = AAZListArg(
            options=["default-security-rules"],
            help="The default security rules of network security group.",
        )
        network_security_group_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        network_security_group_update.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the network security group resource.",
        )
        network_security_group_update.security_rules = AAZListArg(
            options=["security-rules"],
            help="A collection of security rules of the network security group.",
        )
        network_security_group_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        default_security_rules = cls._args_network_security_group_update.default_security_rules
        default_security_rules.Element = AAZObjectArg()
        cls._build_args_security_rule_update(default_security_rules.Element)

        security_rules = cls._args_network_security_group_update.security_rules
        security_rules.Element = AAZObjectArg()

        _element = cls._args_network_security_group_update.security_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
        )
        _element.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or destination IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
        )
        _element.destination_address_prefixes = AAZListArg(
            options=["destination-address-prefixes"],
            help="The destination address prefixes. CIDR or destination IP ranges.",
        )
        _element.destination_application_security_groups = AAZListArg(
            options=["destination-application-security-groups"],
            help="The application security group specified as destination.",
        )
        _element.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
        )
        _element.destination_port_ranges = AAZListArg(
            options=["destination-port-ranges"],
            help="The destination port ranges.",
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        _element.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
        )
        _element.source_address_prefixes = AAZListArg(
            options=["source-address-prefixes"],
            help="The CIDR or source IP ranges.",
        )
        _element.source_application_security_groups = AAZListArg(
            options=["source-application-security-groups"],
            help="The application security group specified as source.",
        )
        _element.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
        )
        _element.source_port_ranges = AAZListArg(
            options=["source-port-ranges"],
            help="The source port ranges.",
        )

        destination_address_prefixes = cls._args_network_security_group_update.security_rules.Element.destination_address_prefixes
        destination_address_prefixes.Element = AAZStrArg()

        destination_application_security_groups = cls._args_network_security_group_update.security_rules.Element.destination_application_security_groups
        destination_application_security_groups.Element = AAZObjectArg()
        cls._build_args_application_security_group_update(destination_application_security_groups.Element)

        destination_port_ranges = cls._args_network_security_group_update.security_rules.Element.destination_port_ranges
        destination_port_ranges.Element = AAZStrArg()

        source_address_prefixes = cls._args_network_security_group_update.security_rules.Element.source_address_prefixes
        source_address_prefixes.Element = AAZStrArg()

        source_application_security_groups = cls._args_network_security_group_update.security_rules.Element.source_application_security_groups
        source_application_security_groups.Element = AAZObjectArg()
        cls._build_args_application_security_group_update(source_application_security_groups.Element)

        source_port_ranges = cls._args_network_security_group_update.security_rules.Element.source_port_ranges
        source_port_ranges.Element = AAZStrArg()

        tags = cls._args_network_security_group_update.tags
        tags.Element = AAZStrArg()

        _schema.default_security_rules = cls._args_network_security_group_update.default_security_rules
        _schema.etag = cls._args_network_security_group_update.etag
        _schema.id = cls._args_network_security_group_update.id
        _schema.location = cls._args_network_security_group_update.location
        _schema.provisioning_state = cls._args_network_security_group_update.provisioning_state
        _schema.resource_guid = cls._args_network_security_group_update.resource_guid
        _schema.security_rules = cls._args_network_security_group_update.security_rules
        _schema.tags = cls._args_network_security_group_update.tags

    _args_public_ip_address_update = None

    @classmethod
    def _build_args_public_ip_address_update(cls, _schema):
        if cls._args_public_ip_address_update is not None:
            _schema.ddos_settings = cls._args_public_ip_address_update.ddos_settings
            _schema.dns_settings = cls._args_public_ip_address_update.dns_settings
            _schema.etag = cls._args_public_ip_address_update.etag
            _schema.id = cls._args_public_ip_address_update.id
            _schema.idle_timeout_in_minutes = cls._args_public_ip_address_update.idle_timeout_in_minutes
            _schema.ip_address = cls._args_public_ip_address_update.ip_address
            _schema.ip_tags = cls._args_public_ip_address_update.ip_tags
            _schema.location = cls._args_public_ip_address_update.location
            _schema.provisioning_state = cls._args_public_ip_address_update.provisioning_state
            _schema.public_ip_address_version = cls._args_public_ip_address_update.public_ip_address_version
            _schema.public_ip_allocation_method = cls._args_public_ip_address_update.public_ip_allocation_method
            _schema.public_ip_prefix = cls._args_public_ip_address_update.public_ip_prefix
            _schema.resource_guid = cls._args_public_ip_address_update.resource_guid
            _schema.sku = cls._args_public_ip_address_update.sku
            _schema.tags = cls._args_public_ip_address_update.tags
            _schema.zones = cls._args_public_ip_address_update.zones
            return

        cls._args_public_ip_address_update = AAZObjectArg()

        public_ip_address_update = cls._args_public_ip_address_update
        public_ip_address_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        public_ip_address_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/publicIPAddresses/{}",
            ),
        )
        public_ip_address_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        public_ip_address_update.ddos_settings = AAZObjectArg(
            options=["ddos-settings"],
            help="The DDoS protection custom policy associated with the public IP address.",
        )
        public_ip_address_update.dns_settings = AAZObjectArg(
            options=["dns-settings"],
            help="The FQDN of the DNS record associated with the public IP address.",
        )
        public_ip_address_update.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The idle timeout of the public IP address.",
        )
        public_ip_address_update.ip_address = AAZStrArg(
            options=["ip-address"],
            help="The IP address associated with the public IP address resource.",
        )
        public_ip_address_update.ip_tags = AAZListArg(
            options=["ip-tags"],
            help="The list of tags associated with the public IP address.",
        )
        public_ip_address_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        public_ip_address_update.public_ip_address_version = AAZStrArg(
            options=["public-ip-address-version"],
            help="The public IP address version. Possible values are: 'IPv4' and 'IPv6'.",
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        public_ip_address_update.public_ip_allocation_method = AAZStrArg(
            options=["public-ip-allocation-method"],
            help="The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        public_ip_address_update.public_ip_prefix = AAZObjectArg(
            options=["public-ip-prefix"],
            help="The Public IP Prefix this Public IP Address should be allocated from.",
        )
        cls._build_args_sub_resource_update(public_ip_address_update.public_ip_prefix)
        public_ip_address_update.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the public IP resource.",
        )
        public_ip_address_update.sku = AAZObjectArg(
            options=["sku"],
            help="The public IP address SKU.",
        )
        public_ip_address_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )
        public_ip_address_update.zones = AAZListArg(
            options=["zones"],
            help="A list of availability zones denoting the IP allocated for the resource needs to come from.",
        )

        ddos_settings = cls._args_public_ip_address_update.ddos_settings
        ddos_settings.ddos_custom_policy = AAZObjectArg(
            options=["ddos-custom-policy"],
            help="The DDoS custom policy associated with the public IP.",
        )
        cls._build_args_sub_resource_update(ddos_settings.ddos_custom_policy)
        ddos_settings.protection_coverage = AAZStrArg(
            options=["protection-coverage"],
            help="The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.",
            enum={"Basic": "Basic", "Standard": "Standard"},
        )

        dns_settings = cls._args_public_ip_address_update.dns_settings
        dns_settings.domain_name_label = AAZStrArg(
            options=["domain-name-label"],
            help="Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.",
        )
        dns_settings.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.",
        )
        dns_settings.reverse_fqdn = AAZStrArg(
            options=["reverse-fqdn"],
            help="Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. ",
        )

        ip_tags = cls._args_public_ip_address_update.ip_tags
        ip_tags.Element = AAZObjectArg()

        _element = cls._args_public_ip_address_update.ip_tags.Element
        _element.ip_tag_type = AAZStrArg(
            options=["ip-tag-type"],
            help="Gets or sets the ipTag type: Example FirstPartyUsage.",
        )
        _element.tag = AAZStrArg(
            options=["tag"],
            help="Gets or sets value of the IpTag associated with the public IP. Example SQL, Storage etc",
        )

        sku = cls._args_public_ip_address_update.sku
        sku.name = AAZStrArg(
            options=["name"],
            help="Name of a public IP address SKU.",
            enum={"Basic": "Basic", "Standard": "Standard"},
        )

        tags = cls._args_public_ip_address_update.tags
        tags.Element = AAZStrArg()

        zones = cls._args_public_ip_address_update.zones
        zones.Element = AAZStrArg()

        _schema.ddos_settings = cls._args_public_ip_address_update.ddos_settings
        _schema.dns_settings = cls._args_public_ip_address_update.dns_settings
        _schema.etag = cls._args_public_ip_address_update.etag
        _schema.id = cls._args_public_ip_address_update.id
        _schema.idle_timeout_in_minutes = cls._args_public_ip_address_update.idle_timeout_in_minutes
        _schema.ip_address = cls._args_public_ip_address_update.ip_address
        _schema.ip_tags = cls._args_public_ip_address_update.ip_tags
        _schema.location = cls._args_public_ip_address_update.location
        _schema.provisioning_state = cls._args_public_ip_address_update.provisioning_state
        _schema.public_ip_address_version = cls._args_public_ip_address_update.public_ip_address_version
        _schema.public_ip_allocation_method = cls._args_public_ip_address_update.public_ip_allocation_method
        _schema.public_ip_prefix = cls._args_public_ip_address_update.public_ip_prefix
        _schema.resource_guid = cls._args_public_ip_address_update.resource_guid
        _schema.sku = cls._args_public_ip_address_update.sku
        _schema.tags = cls._args_public_ip_address_update.tags
        _schema.zones = cls._args_public_ip_address_update.zones

    _args_security_rule_update = None

    @classmethod
    def _build_args_security_rule_update(cls, _schema):
        if cls._args_security_rule_update is not None:
            _schema.access = cls._args_security_rule_update.access
            _schema.description = cls._args_security_rule_update.description
            _schema.destination_address_prefix = cls._args_security_rule_update.destination_address_prefix
            _schema.destination_address_prefixes = cls._args_security_rule_update.destination_address_prefixes
            _schema.destination_application_security_groups = cls._args_security_rule_update.destination_application_security_groups
            _schema.destination_port_range = cls._args_security_rule_update.destination_port_range
            _schema.destination_port_ranges = cls._args_security_rule_update.destination_port_ranges
            _schema.direction = cls._args_security_rule_update.direction
            _schema.etag = cls._args_security_rule_update.etag
            _schema.name = cls._args_security_rule_update.name
            _schema.priority = cls._args_security_rule_update.priority
            _schema.protocol = cls._args_security_rule_update.protocol
            _schema.provisioning_state = cls._args_security_rule_update.provisioning_state
            _schema.source_address_prefix = cls._args_security_rule_update.source_address_prefix
            _schema.source_address_prefixes = cls._args_security_rule_update.source_address_prefixes
            _schema.source_application_security_groups = cls._args_security_rule_update.source_application_security_groups
            _schema.source_port_range = cls._args_security_rule_update.source_port_range
            _schema.source_port_ranges = cls._args_security_rule_update.source_port_ranges
            return

        cls._args_security_rule_update = AAZObjectArg()

        security_rule_update = cls._args_security_rule_update
        security_rule_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        security_rule_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        security_rule_update.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        security_rule_update.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
        )
        security_rule_update.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or destination IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
        )
        security_rule_update.destination_address_prefixes = AAZListArg(
            options=["destination-address-prefixes"],
            help="The destination address prefixes. CIDR or destination IP ranges.",
        )
        security_rule_update.destination_application_security_groups = AAZListArg(
            options=["destination-application-security-groups"],
            help="The application security group specified as destination.",
        )
        security_rule_update.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
        )
        security_rule_update.destination_port_ranges = AAZListArg(
            options=["destination-port-ranges"],
            help="The destination port ranges.",
        )
        security_rule_update.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        security_rule_update.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
        )
        security_rule_update.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        security_rule_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        security_rule_update.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
        )
        security_rule_update.source_address_prefixes = AAZListArg(
            options=["source-address-prefixes"],
            help="The CIDR or source IP ranges.",
        )
        security_rule_update.source_application_security_groups = AAZListArg(
            options=["source-application-security-groups"],
            help="The application security group specified as source.",
        )
        security_rule_update.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
        )
        security_rule_update.source_port_ranges = AAZListArg(
            options=["source-port-ranges"],
            help="The source port ranges.",
        )

        destination_address_prefixes = cls._args_security_rule_update.destination_address_prefixes
        destination_address_prefixes.Element = AAZStrArg()

        destination_application_security_groups = cls._args_security_rule_update.destination_application_security_groups
        destination_application_security_groups.Element = AAZObjectArg()
        cls._build_args_application_security_group_update(destination_application_security_groups.Element)

        destination_port_ranges = cls._args_security_rule_update.destination_port_ranges
        destination_port_ranges.Element = AAZStrArg()

        source_address_prefixes = cls._args_security_rule_update.source_address_prefixes
        source_address_prefixes.Element = AAZStrArg()

        source_application_security_groups = cls._args_security_rule_update.source_application_security_groups
        source_application_security_groups.Element = AAZObjectArg()
        cls._build_args_application_security_group_update(source_application_security_groups.Element)

        source_port_ranges = cls._args_security_rule_update.source_port_ranges
        source_port_ranges.Element = AAZStrArg()

        _schema.access = cls._args_security_rule_update.access
        _schema.description = cls._args_security_rule_update.description
        _schema.destination_address_prefix = cls._args_security_rule_update.destination_address_prefix
        _schema.destination_address_prefixes = cls._args_security_rule_update.destination_address_prefixes
        _schema.destination_application_security_groups = cls._args_security_rule_update.destination_application_security_groups
        _schema.destination_port_range = cls._args_security_rule_update.destination_port_range
        _schema.destination_port_ranges = cls._args_security_rule_update.destination_port_ranges
        _schema.direction = cls._args_security_rule_update.direction
        _schema.etag = cls._args_security_rule_update.etag
        _schema.name = cls._args_security_rule_update.name
        _schema.priority = cls._args_security_rule_update.priority
        _schema.protocol = cls._args_security_rule_update.protocol
        _schema.provisioning_state = cls._args_security_rule_update.provisioning_state
        _schema.source_address_prefix = cls._args_security_rule_update.source_address_prefix
        _schema.source_address_prefixes = cls._args_security_rule_update.source_address_prefixes
        _schema.source_application_security_groups = cls._args_security_rule_update.source_application_security_groups
        _schema.source_port_range = cls._args_security_rule_update.source_port_range
        _schema.source_port_ranges = cls._args_security_rule_update.source_port_ranges

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg()

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )

        _schema.id = cls._args_sub_resource_update.id

    _args_subnet_update = None

    @classmethod
    def _build_args_subnet_update(cls, _schema):
        if cls._args_subnet_update is not None:
            _schema.address_prefix = cls._args_subnet_update.address_prefix
            _schema.address_prefixes = cls._args_subnet_update.address_prefixes
            _schema.delegations = cls._args_subnet_update.delegations
            _schema.id = cls._args_subnet_update.id
            _schema.name = cls._args_subnet_update.name
            _schema.network_security_group = cls._args_subnet_update.network_security_group
            _schema.resource_navigation_links = cls._args_subnet_update.resource_navigation_links
            _schema.route_table = cls._args_subnet_update.route_table
            _schema.service_association_links = cls._args_subnet_update.service_association_links
            _schema.service_endpoint_policies = cls._args_subnet_update.service_endpoint_policies
            _schema.service_endpoints = cls._args_subnet_update.service_endpoints
            return

        cls._args_subnet_update = AAZObjectArg()

        subnet_update = cls._args_subnet_update
        subnet_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/{}",
            ),
        )
        subnet_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        subnet_update.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The address prefix for the subnet.",
        )
        subnet_update.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="List of  address prefixes for the subnet.",
        )
        subnet_update.delegations = AAZListArg(
            options=["delegations"],
            help="Gets an array of references to the delegations on the subnet.",
        )
        subnet_update.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference of the NetworkSecurityGroup resource.",
        )
        cls._build_args_network_security_group_update(subnet_update.network_security_group)
        subnet_update.resource_navigation_links = AAZListArg(
            options=["resource-navigation-links"],
            help="Gets an array of references to the external resources using subnet.",
        )
        subnet_update.route_table = AAZObjectArg(
            options=["route-table"],
            help="The reference of the RouteTable resource.",
        )
        subnet_update.service_association_links = AAZListArg(
            options=["service-association-links"],
            help="Gets an array of references to services injecting into this subnet.",
        )
        subnet_update.service_endpoint_policies = AAZListArg(
            options=["service-endpoint-policies"],
            help="An array of service endpoint policies.",
        )
        subnet_update.service_endpoints = AAZListArg(
            options=["service-endpoints"],
            help="An array of service endpoints.",
        )

        address_prefixes = cls._args_subnet_update.address_prefixes
        address_prefixes.Element = AAZStrArg()

        delegations = cls._args_subnet_update.delegations
        delegations.Element = AAZObjectArg()

        _element = cls._args_subnet_update.delegations.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a subnet. This name can be used to access the resource.",
        )
        _element.actions = AAZListArg(
            options=["actions"],
            help="Describes the actions permitted to the service upon delegation",
        )
        _element.service_name = AAZStrArg(
            options=["service-name"],
            help="The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers)",
        )

        actions = cls._args_subnet_update.delegations.Element.actions
        actions.Element = AAZStrArg()

        resource_navigation_links = cls._args_subnet_update.resource_navigation_links
        resource_navigation_links.Element = AAZObjectArg()

        _element = cls._args_subnet_update.resource_navigation_links.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.link = AAZStrArg(
            options=["link"],
            help="Link to the external resource",
        )
        _element.linked_resource_type = AAZStrArg(
            options=["linked-resource-type"],
            help="Resource type of the linked resource.",
        )

        route_table = cls._args_subnet_update.route_table
        route_table.etag = AAZStrArg(
            options=["etag"],
            help="Gets a unique read-only string that changes whenever the resource is updated.",
        )
        route_table.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}",
            ),
        )
        route_table.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        route_table.disable_bgp_route_propagation = AAZBoolArg(
            options=["disable-bgp-route-propagation"],
            help="Gets or sets whether to disable the routes learned by BGP on that route table. True means disable.",
        )
        route_table.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        route_table.routes = AAZListArg(
            options=["routes"],
            help="Collection of routes contained within a route table.",
        )
        route_table.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        routes = cls._args_subnet_update.route_table.routes
        routes.Element = AAZObjectArg()

        _element = cls._args_subnet_update.route_table.routes.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}/routes/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The destination CIDR to which the route applies.",
        )
        _element.next_hop_ip_address = AAZStrArg(
            options=["next-hop-ip-address"],
            help="The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.",
        )
        _element.next_hop_type = AAZStrArg(
            options=["next-hop-type"],
            help="The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'",
            enum={"Internet": "Internet", "None": "None", "VirtualAppliance": "VirtualAppliance", "VirtualNetworkGateway": "VirtualNetworkGateway", "VnetLocal": "VnetLocal"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )

        tags = cls._args_subnet_update.route_table.tags
        tags.Element = AAZStrArg()

        service_association_links = cls._args_subnet_update.service_association_links
        service_association_links.Element = AAZObjectArg()

        _element = cls._args_subnet_update.service_association_links.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.link = AAZStrArg(
            options=["link"],
            help="Link to the external resource.",
        )
        _element.linked_resource_type = AAZStrArg(
            options=["linked-resource-type"],
            help="Resource type of the linked resource.",
        )

        service_endpoint_policies = cls._args_subnet_update.service_endpoint_policies
        service_endpoint_policies.Element = AAZObjectArg()

        _element = cls._args_subnet_update.service_endpoint_policies.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/serviceEndpointPolicies/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.service_endpoint_policy_definitions = AAZListArg(
            options=["service-endpoint-policy-definitions"],
            help="A collection of service endpoint policy definitions of the service endpoint policy.",
        )
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        service_endpoint_policy_definitions = cls._args_subnet_update.service_endpoint_policies.Element.service_endpoint_policy_definitions
        service_endpoint_policy_definitions.Element = AAZObjectArg()

        _element = cls._args_subnet_update.service_endpoint_policies.Element.service_endpoint_policy_definitions.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/serviceEndpointPolicies/{}/serviceEndpointPolicyDefinitions/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
        )
        _element.service = AAZStrArg(
            options=["service"],
            help="service endpoint name.",
        )
        _element.service_resources = AAZListArg(
            options=["service-resources"],
            help="A list of service resources.",
        )

        service_resources = cls._args_subnet_update.service_endpoint_policies.Element.service_endpoint_policy_definitions.Element.service_resources
        service_resources.Element = AAZStrArg()

        tags = cls._args_subnet_update.service_endpoint_policies.Element.tags
        tags.Element = AAZStrArg()

        service_endpoints = cls._args_subnet_update.service_endpoints
        service_endpoints.Element = AAZObjectArg()

        _element = cls._args_subnet_update.service_endpoints.Element
        _element.locations = AAZListArg(
            options=["locations"],
            help="A list of locations.",
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource.",
        )
        _element.service = AAZStrArg(
            options=["service"],
            help="The type of the endpoint service.",
        )

        locations = cls._args_subnet_update.service_endpoints.Element.locations
        locations.Element = AAZStrArg()

        _schema.address_prefix = cls._args_subnet_update.address_prefix
        _schema.address_prefixes = cls._args_subnet_update.address_prefixes
        _schema.delegations = cls._args_subnet_update.delegations
        _schema.id = cls._args_subnet_update.id
        _schema.name = cls._args_subnet_update.name
        _schema.network_security_group = cls._args_subnet_update.network_security_group
        _schema.resource_navigation_links = cls._args_subnet_update.resource_navigation_links
        _schema.route_table = cls._args_subnet_update.route_table
        _schema.service_association_links = cls._args_subnet_update.service_association_links
        _schema.service_endpoint_policies = cls._args_subnet_update.service_endpoint_policies
        _schema.service_endpoints = cls._args_subnet_update.service_endpoints

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkInterfacesGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        yield self.NetworkInterfacesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class NetworkInterfacesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _CreateHelper._build_schema_network_interface_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkInterfacesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _CreateHelper._build_schema_network_interface_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("applicationGatewayBackendAddressPools", AAZListType, ".application_gateway_backend_address_pools")
                properties.set_prop("applicationSecurityGroups", AAZListType, ".asgs_obj")
                properties.set_prop("loadBalancerBackendAddressPools", AAZListType, ".load_balancer_backend_address_pools")
                properties.set_prop("loadBalancerInboundNatRules", AAZListType, ".load_balancer_inbound_nat_rules")
                properties.set_prop("primary", AAZBoolType, ".make_primary")
                properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
                properties.set_prop("privateIPAddressVersion", AAZStrType, ".private_ip_address_version")
                properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
                properties.set_prop("publicIPAddress", AAZObjectType)
                properties.set_prop("subnet", AAZObjectType)

            application_gateway_backend_address_pools = _builder.get(".properties.applicationGatewayBackendAddressPools")
            if application_gateway_backend_address_pools is not None:
                application_gateway_backend_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationGatewayBackendAddressPools[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            application_security_groups = _builder.get(".properties.applicationSecurityGroups")
            if application_security_groups is not None:
                application_security_groups.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationSecurityGroups[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("location", AAZStrType, ".location")
                _elements.set_prop("tags", AAZDictType, ".tags")

            tags = _builder.get(".properties.applicationSecurityGroups[].tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            load_balancer_backend_address_pools = _builder.get(".properties.loadBalancerBackendAddressPools")
            if load_balancer_backend_address_pools is not None:
                load_balancer_backend_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.loadBalancerBackendAddressPools[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            load_balancer_inbound_nat_rules = _builder.get(".properties.loadBalancerInboundNatRules")
            if load_balancer_inbound_nat_rules is not None:
                load_balancer_inbound_nat_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.loadBalancerInboundNatRules[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            public_ip_address = _builder.get(".properties.publicIPAddress")
            if public_ip_address is not None:
                public_ip_address.set_prop("id", AAZStrType, ".public_ip_address")
                public_ip_address.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            subnet = _builder.get(".properties.subnet")
            if subnet is not None:
                subnet.set_prop("id", AAZStrType, ".subnet")
                subnet.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            return _instance_value


@register_command(
    "network nic ip-config delete",
)
class Delete(AAZCommand):
    """Delete an IP configuration.

    An NIC must have at least one IP configuration.

    :example: Delete an IP configuration.
        az network nic ip-config delete -g MyResourceGroup -n MyIpConfig --nic-name MyNic
    """

    _aaz_info = {
        "version": "2018-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkinterfaces/{}", "2018-11-01", "properties.ipConfigurations[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nic_name = AAZStrArg(
            options=["--nic-name"],
            help="Name of the network interface (NIC).",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the IP configuration.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkInterfacesGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        yield self.NetworkInterfacesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class NetworkInterfacesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _DeleteHelper._build_schema_network_interface_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkInterfacesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _DeleteHelper._build_schema_network_interface_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


@register_command(
    "network nic ip-config list",
)
class List(AAZCommand):
    """List the IP configurations of an NIC.

    :example: List the IP configurations of an NIC.
        az network nic ip-config list -g MyResourceGroup --nic-name MyNic
    """

    _aaz_info = {
        "version": "2018-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkinterfaces/{}", "2018-11-01", "properties.ipConfigurations"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nic_name = AAZStrArg(
            options=["--nic-name"],
            help="Name of the network interface (NIC).",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkInterfacesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.properties.ipConfigurations

        def _set(self, value):
            result = self.ctx.vars.instance
            result.properties.ipConfigurations = value
            return

    class NetworkInterfacesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ListHelper._build_schema_network_interface_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network nic ip-config show",
)
class Show(AAZCommand):
    """Show the details of an IP configuration.

    :example: Show the details of an IP configuration of an NIC.
        az network nic ip-config show -g MyResourceGroup -n MyIpConfig --nic-name MyNic
    """

    _aaz_info = {
        "version": "2018-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkinterfaces/{}", "2018-11-01", "properties.ipConfigurations[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nic_name = AAZStrArg(
            options=["--nic-name"],
            help="Name of the network interface (NIC).",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the IP configuration.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkInterfacesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class NetworkInterfacesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_network_interface_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network nic ip-config update",
)
class Update(AAZCommand):
    """Update an IP configuration.

    :example: Update a NIC to use a new private IP address.
        az network nic ip-config update -g MyResourceGroup --nic-name MyNic -n MyIpConfig --private-ip-address 10.0.0.9

    :example: Make an IP configuration the default for the supplied NIC.
        az network nic ip-config update -g MyResourceGroup --nic-name MyNic -n MyIpConfig --make-primary
    """

    _aaz_info = {
        "version": "2018-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkinterfaces/{}", "2018-11-01", "properties.ipConfigurations[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nic_name = AAZStrArg(
            options=["--nic-name"],
            help="Name of the network interface (NIC).",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the IP configuration.",
            required=True,
        )

        # define Arg Group "IP Configuration"

        _args_schema = cls._args_schema
        _args_schema.make_primary = AAZBoolArg(
            options=["--make-primary"],
            arg_group="IP Configuration",
            help="Set to make this configuration the primary one for the NIC.",
            nullable=True,
        )
        _args_schema.private_ip_address = AAZStrArg(
            options=["--private-ip-address"],
            arg_group="IP Configuration",
            help="Static IP address to use or \"\"('\"\"' in PowerShell) to use a dynamic address.",
            nullable=True,
        )
        _args_schema.private_ip_address_version = AAZStrArg(
            options=["--private-ip-address-version"],
            arg_group="IP Configuration",
            help="Version of private IP address to use.",
            nullable=True,
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        _args_schema.public_ip_address = AAZResourceIdArg(
            options=["--public-ip-address"],
            arg_group="IP Configuration",
            help="Name or ID of an existing public IP address.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/publicIPAddresses/{}",
            ),
        )
        _args_schema.subnet = AAZResourceIdArg(
            options=["--subnet"],
            arg_group="IP Configuration",
            help="Name or ID of an existing subnet. If name specified, please also specify `--vnet-name`.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/{}",
            ),
        )

        # define Arg Group "Parameters.properties.ipConfigurations[]"

        # define Arg Group "PipObj"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.application_gateway_backend_address_pools = AAZListArg(
            options=["--application-gateway-backend-address-pools"],
            arg_group="Properties",
            help="The reference to ApplicationGatewayBackendAddressPool resource.",
            nullable=True,
        )
        _args_schema.asgs_obj = AAZListArg(
            options=["--asgs-obj"],
            arg_group="Properties",
            help="Application security groups in which the IP configuration is included.",
            nullable=True,
        )
        _args_schema.load_balancer_backend_address_pools = AAZListArg(
            options=["--load-balancer-backend-address-pools"],
            arg_group="Properties",
            help="The reference to LoadBalancerBackendAddressPool resource.",
            nullable=True,
        )
        _args_schema.load_balancer_inbound_nat_rules = AAZListArg(
            options=["--load-balancer-inbound-nat-rules"],
            arg_group="Properties",
            help="A list of references of LoadBalancerInboundNatRules.",
            nullable=True,
        )
        _args_schema.private_ip_allocation_method = AAZStrArg(
            options=["--private-ip-allocation-method"],
            arg_group="Properties",
            help="The private IP address allocation method.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )

        application_gateway_backend_address_pools = cls._args_schema.application_gateway_backend_address_pools
        application_gateway_backend_address_pools.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.application_gateway_backend_address_pools.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the backend address pool that is unique within an Application Gateway.",
            nullable=True,
        )

        asgs_obj = cls._args_schema.asgs_obj
        asgs_obj.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.asgs_obj.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/applicationSecurityGroups/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.asgs_obj.Element.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        load_balancer_backend_address_pools = cls._args_schema.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.load_balancer_backend_address_pools.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/backendAddressPools/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.",
            nullable=True,
        )

        load_balancer_inbound_nat_rules = cls._args_schema.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.load_balancer_inbound_nat_rules.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/inboundNatRules/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.",
            nullable=True,
        )

        # define Arg Group "PublicIPAddress"

        # define Arg Group "Subnet"

        # define Arg Group "SubnetObj"
        return cls._args_schema

    _args_application_security_group_update = None

    @classmethod
    def _build_args_application_security_group_update(cls, _schema):
        if cls._args_application_security_group_update is not None:
            _schema.id = cls._args_application_security_group_update.id
            _schema.location = cls._args_application_security_group_update.location
            _schema.tags = cls._args_application_security_group_update.tags
            return

        cls._args_application_security_group_update = AAZObjectArg(
            nullable=True,
        )

        application_security_group_update = cls._args_application_security_group_update
        application_security_group_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/applicationSecurityGroups/{}",
            ),
        )
        application_security_group_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        application_security_group_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_application_security_group_update.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.id = cls._args_application_security_group_update.id
        _schema.location = cls._args_application_security_group_update.location
        _schema.tags = cls._args_application_security_group_update.tags

    _args_network_interface_ip_configuration_update = None

    @classmethod
    def _build_args_network_interface_ip_configuration_update(cls, _schema):
        if cls._args_network_interface_ip_configuration_update is not None:
            _schema.application_gateway_backend_address_pools = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools
            _schema.application_security_groups = cls._args_network_interface_ip_configuration_update.application_security_groups
            _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
            _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
            _schema.name = cls._args_network_interface_ip_configuration_update.name
            _schema.primary = cls._args_network_interface_ip_configuration_update.primary
            _schema.private_ip_address = cls._args_network_interface_ip_configuration_update.private_ip_address
            _schema.private_ip_address_version = cls._args_network_interface_ip_configuration_update.private_ip_address_version
            _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_update.private_ip_allocation_method
            _schema.public_ip_address = cls._args_network_interface_ip_configuration_update.public_ip_address
            _schema.subnet = cls._args_network_interface_ip_configuration_update.subnet
            _schema.virtual_network_taps = cls._args_network_interface_ip_configuration_update.virtual_network_taps
            return

        cls._args_network_interface_ip_configuration_update = AAZObjectArg(
            nullable=True,
        )

        network_interface_ip_configuration_update = cls._args_network_interface_ip_configuration_update
        network_interface_ip_configuration_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        network_interface_ip_configuration_update.application_gateway_backend_address_pools = AAZListArg(
            options=["application-gateway-backend-address-pools"],
            help="The reference of ApplicationGatewayBackendAddressPool resource.",
            nullable=True,
        )
        network_interface_ip_configuration_update.application_security_groups = AAZListArg(
            options=["application-security-groups"],
            help="Application security groups in which the IP configuration is included.",
            nullable=True,
        )
        network_interface_ip_configuration_update.load_balancer_backend_address_pools = AAZListArg(
            options=["load-balancer-backend-address-pools"],
            help="The reference of LoadBalancerBackendAddressPool resource.",
            nullable=True,
        )
        network_interface_ip_configuration_update.load_balancer_inbound_nat_rules = AAZListArg(
            options=["load-balancer-inbound-nat-rules"],
            help="A list of references of LoadBalancerInboundNatRules.",
            nullable=True,
        )
        network_interface_ip_configuration_update.primary = AAZBoolArg(
            options=["primary"],
            help="Gets whether this is a primary customer address on the network interface.",
            nullable=True,
        )
        network_interface_ip_configuration_update.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="Private IP address of the IP configuration.",
            nullable=True,
        )
        network_interface_ip_configuration_update.private_ip_address_version = AAZStrArg(
            options=["private-ip-address-version"],
            help="Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.",
            nullable=True,
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        network_interface_ip_configuration_update.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        network_interface_ip_configuration_update.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="Public IP address bound to the IP configuration.",
            nullable=True,
        )
        cls._build_args_public_ip_address_update(network_interface_ip_configuration_update.public_ip_address)
        network_interface_ip_configuration_update.subnet = AAZObjectArg(
            options=["subnet"],
            help="Subnet bound to the IP configuration.",
            nullable=True,
        )
        cls._build_args_subnet_update(network_interface_ip_configuration_update.subnet)
        network_interface_ip_configuration_update.virtual_network_taps = AAZListArg(
            options=["virtual-network-taps"],
            help="The reference to Virtual Network Taps.",
            nullable=True,
        )

        application_gateway_backend_address_pools = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools
        application_gateway_backend_address_pools.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the backend address pool that is unique within an Application Gateway.",
            nullable=True,
        )
        _element.backend_addresses = AAZListArg(
            options=["backend-addresses"],
            help="Backend addresses",
            nullable=True,
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Type of the resource.",
            nullable=True,
        )

        backend_addresses = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools.Element.backend_addresses
        backend_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools.Element.backend_addresses.Element
        _element.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Fully qualified domain name (FQDN).",
            nullable=True,
        )
        _element.ip_address = AAZStrArg(
            options=["ip-address"],
            help="IP address",
            nullable=True,
        )

        application_security_groups = cls._args_network_interface_ip_configuration_update.application_security_groups
        application_security_groups.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_security_group_update(application_security_groups.Element)

        load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/backendAddressPools/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )

        load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/inboundNatRules/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.backend_port = AAZIntArg(
            options=["backend-port"],
            help="The port used for the internal endpoint. Acceptable values range from 1 to 65535.",
            nullable=True,
        )
        _element.enable_floating_ip = AAZBoolArg(
            options=["enable-floating-ip"],
            help="Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.",
            nullable=True,
        )
        _element.enable_tcp_reset = AAZBoolArg(
            options=["enable-tcp-reset"],
            help="Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.",
            nullable=True,
        )
        _element.frontend_ip_configuration = AAZObjectArg(
            options=["frontend-ip-configuration"],
            help="A reference to frontend IP addresses.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(_element.frontend_ip_configuration)
        _element.frontend_port = AAZIntArg(
            options=["frontend-port"],
            help="The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.",
            nullable=True,
        )
        _element.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.",
            nullable=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All'.",
            nullable=True,
            enum={"All": "All", "Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )

        virtual_network_taps = cls._args_network_interface_ip_configuration_update.virtual_network_taps
        virtual_network_taps.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="Gets a unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworkTaps/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.destination_load_balancer_front_end_ip_configuration = AAZObjectArg(
            options=["destination-load-balancer-front-end-ip-configuration"],
            help="The reference to the private IP address on the internal Load Balancer that will receive the tap",
            nullable=True,
        )
        _element.destination_network_interface_ip_configuration = AAZObjectArg(
            options=["destination-network-interface-ip-configuration"],
            help="The reference to the private IP Address of the collector nic that will receive the tap",
            nullable=True,
        )
        cls._build_args_network_interface_ip_configuration_update(_element.destination_network_interface_ip_configuration)
        _element.destination_port = AAZIntArg(
            options=["destination-port"],
            help="The VXLAN destination port that will receive the tapped traffic.",
            nullable=True,
        )
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        destination_load_balancer_front_end_ip_configuration = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element.destination_load_balancer_front_end_ip_configuration
        destination_load_balancer_front_end_ip_configuration.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        destination_load_balancer_front_end_ip_configuration.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/loadBalancers/{}/frontendIPConfigurations/{}",
            ),
        )
        destination_load_balancer_front_end_ip_configuration.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        destination_load_balancer_front_end_ip_configuration.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="The private IP address of the IP configuration.",
            nullable=True,
        )
        destination_load_balancer_front_end_ip_configuration.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        destination_load_balancer_front_end_ip_configuration.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        destination_load_balancer_front_end_ip_configuration.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="The reference of the Public IP resource.",
            nullable=True,
        )
        cls._build_args_public_ip_address_update(destination_load_balancer_front_end_ip_configuration.public_ip_address)
        destination_load_balancer_front_end_ip_configuration.public_ip_prefix = AAZObjectArg(
            options=["public-ip-prefix"],
            help="The reference of the Public IP Prefix resource.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(destination_load_balancer_front_end_ip_configuration.public_ip_prefix)
        destination_load_balancer_front_end_ip_configuration.subnet = AAZObjectArg(
            options=["subnet"],
            help="The reference of the subnet resource.",
            nullable=True,
        )
        cls._build_args_subnet_update(destination_load_balancer_front_end_ip_configuration.subnet)
        destination_load_balancer_front_end_ip_configuration.zones = AAZListArg(
            options=["zones"],
            help="A list of availability zones denoting the IP allocated for the resource needs to come from.",
            nullable=True,
        )

        zones = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element.destination_load_balancer_front_end_ip_configuration.zones
        zones.Element = AAZStrArg(
            nullable=True,
        )

        tags = cls._args_network_interface_ip_configuration_update.virtual_network_taps.Element.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.application_gateway_backend_address_pools = cls._args_network_interface_ip_configuration_update.application_gateway_backend_address_pools
        _schema.application_security_groups = cls._args_network_interface_ip_configuration_update.application_security_groups
        _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
        _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
        _schema.name = cls._args_network_interface_ip_configuration_update.name
        _schema.primary = cls._args_network_interface_ip_configuration_update.primary
        _schema.private_ip_address = cls._args_network_interface_ip_configuration_update.private_ip_address
        _schema.private_ip_address_version = cls._args_network_interface_ip_configuration_update.private_ip_address_version
        _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_update.private_ip_allocation_method
        _schema.public_ip_address = cls._args_network_interface_ip_configuration_update.public_ip_address
        _schema.subnet = cls._args_network_interface_ip_configuration_update.subnet
        _schema.virtual_network_taps = cls._args_network_interface_ip_configuration_update.virtual_network_taps

    _args_network_security_group_update = None

    @classmethod
    def _build_args_network_security_group_update(cls, _schema):
        if cls._args_network_security_group_update is not None:
            _schema.default_security_rules = cls._args_network_security_group_update.default_security_rules
            _schema.etag = cls._args_network_security_group_update.etag
            _schema.id = cls._args_network_security_group_update.id
            _schema.location = cls._args_network_security_group_update.location
            _schema.provisioning_state = cls._args_network_security_group_update.provisioning_state
            _schema.resource_guid = cls._args_network_security_group_update.resource_guid
            _schema.security_rules = cls._args_network_security_group_update.security_rules
            _schema.tags = cls._args_network_security_group_update.tags
            return

        cls._args_network_security_group_update = AAZObjectArg(
            nullable=True,
        )

        network_security_group_update = cls._args_network_security_group_update
        network_security_group_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        network_security_group_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}",
            ),
        )
        network_security_group_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        network_security_group_update.default_security_rules = AAZListArg(
            options=["default-security-rules"],
            help="The default security rules of network security group.",
            nullable=True,
        )
        network_security_group_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        network_security_group_update.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the network security group resource.",
            nullable=True,
        )
        network_security_group_update.security_rules = AAZListArg(
            options=["security-rules"],
            help="A collection of security rules of the network security group.",
            nullable=True,
        )
        network_security_group_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        default_security_rules = cls._args_network_security_group_update.default_security_rules
        default_security_rules.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_security_rule_update(default_security_rules.Element)

        security_rules = cls._args_network_security_group_update.security_rules
        security_rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_security_group_update.security_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
            nullable=True,
        )
        _element.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or destination IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
            nullable=True,
        )
        _element.destination_address_prefixes = AAZListArg(
            options=["destination-address-prefixes"],
            help="The destination address prefixes. CIDR or destination IP ranges.",
            nullable=True,
        )
        _element.destination_application_security_groups = AAZListArg(
            options=["destination-application-security-groups"],
            help="The application security group specified as destination.",
            nullable=True,
        )
        _element.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
            nullable=True,
        )
        _element.destination_port_ranges = AAZListArg(
            options=["destination-port-ranges"],
            help="The destination port ranges.",
            nullable=True,
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
            nullable=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        _element.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
            nullable=True,
        )
        _element.source_address_prefixes = AAZListArg(
            options=["source-address-prefixes"],
            help="The CIDR or source IP ranges.",
            nullable=True,
        )
        _element.source_application_security_groups = AAZListArg(
            options=["source-application-security-groups"],
            help="The application security group specified as source.",
            nullable=True,
        )
        _element.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
            nullable=True,
        )
        _element.source_port_ranges = AAZListArg(
            options=["source-port-ranges"],
            help="The source port ranges.",
            nullable=True,
        )

        destination_address_prefixes = cls._args_network_security_group_update.security_rules.Element.destination_address_prefixes
        destination_address_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        destination_application_security_groups = cls._args_network_security_group_update.security_rules.Element.destination_application_security_groups
        destination_application_security_groups.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_security_group_update(destination_application_security_groups.Element)

        destination_port_ranges = cls._args_network_security_group_update.security_rules.Element.destination_port_ranges
        destination_port_ranges.Element = AAZStrArg(
            nullable=True,
        )

        source_address_prefixes = cls._args_network_security_group_update.security_rules.Element.source_address_prefixes
        source_address_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        source_application_security_groups = cls._args_network_security_group_update.security_rules.Element.source_application_security_groups
        source_application_security_groups.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_security_group_update(source_application_security_groups.Element)

        source_port_ranges = cls._args_network_security_group_update.security_rules.Element.source_port_ranges
        source_port_ranges.Element = AAZStrArg(
            nullable=True,
        )

        tags = cls._args_network_security_group_update.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.default_security_rules = cls._args_network_security_group_update.default_security_rules
        _schema.etag = cls._args_network_security_group_update.etag
        _schema.id = cls._args_network_security_group_update.id
        _schema.location = cls._args_network_security_group_update.location
        _schema.provisioning_state = cls._args_network_security_group_update.provisioning_state
        _schema.resource_guid = cls._args_network_security_group_update.resource_guid
        _schema.security_rules = cls._args_network_security_group_update.security_rules
        _schema.tags = cls._args_network_security_group_update.tags

    _args_public_ip_address_update = None

    @classmethod
    def _build_args_public_ip_address_update(cls, _schema):
        if cls._args_public_ip_address_update is not None:
            _schema.ddos_settings = cls._args_public_ip_address_update.ddos_settings
            _schema.dns_settings = cls._args_public_ip_address_update.dns_settings
            _schema.etag = cls._args_public_ip_address_update.etag
            _schema.id = cls._args_public_ip_address_update.id
            _schema.idle_timeout_in_minutes = cls._args_public_ip_address_update.idle_timeout_in_minutes
            _schema.ip_address = cls._args_public_ip_address_update.ip_address
            _schema.ip_tags = cls._args_public_ip_address_update.ip_tags
            _schema.location = cls._args_public_ip_address_update.location
            _schema.provisioning_state = cls._args_public_ip_address_update.provisioning_state
            _schema.public_ip_address_version = cls._args_public_ip_address_update.public_ip_address_version
            _schema.public_ip_allocation_method = cls._args_public_ip_address_update.public_ip_allocation_method
            _schema.public_ip_prefix = cls._args_public_ip_address_update.public_ip_prefix
            _schema.resource_guid = cls._args_public_ip_address_update.resource_guid
            _schema.sku = cls._args_public_ip_address_update.sku
            _schema.tags = cls._args_public_ip_address_update.tags
            _schema.zones = cls._args_public_ip_address_update.zones
            return

        cls._args_public_ip_address_update = AAZObjectArg(
            nullable=True,
        )

        public_ip_address_update = cls._args_public_ip_address_update
        public_ip_address_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        public_ip_address_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/publicIPAddresses/{}",
            ),
        )
        public_ip_address_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        public_ip_address_update.ddos_settings = AAZObjectArg(
            options=["ddos-settings"],
            help="The DDoS protection custom policy associated with the public IP address.",
            nullable=True,
        )
        public_ip_address_update.dns_settings = AAZObjectArg(
            options=["dns-settings"],
            help="The FQDN of the DNS record associated with the public IP address.",
            nullable=True,
        )
        public_ip_address_update.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The idle timeout of the public IP address.",
            nullable=True,
        )
        public_ip_address_update.ip_address = AAZStrArg(
            options=["ip-address"],
            help="The IP address associated with the public IP address resource.",
            nullable=True,
        )
        public_ip_address_update.ip_tags = AAZListArg(
            options=["ip-tags"],
            help="The list of tags associated with the public IP address.",
            nullable=True,
        )
        public_ip_address_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        public_ip_address_update.public_ip_address_version = AAZStrArg(
            options=["public-ip-address-version"],
            help="The public IP address version. Possible values are: 'IPv4' and 'IPv6'.",
            nullable=True,
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        public_ip_address_update.public_ip_allocation_method = AAZStrArg(
            options=["public-ip-allocation-method"],
            help="The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        public_ip_address_update.public_ip_prefix = AAZObjectArg(
            options=["public-ip-prefix"],
            help="The Public IP Prefix this Public IP Address should be allocated from.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(public_ip_address_update.public_ip_prefix)
        public_ip_address_update.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the public IP resource.",
            nullable=True,
        )
        public_ip_address_update.sku = AAZObjectArg(
            options=["sku"],
            help="The public IP address SKU.",
            nullable=True,
        )
        public_ip_address_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )
        public_ip_address_update.zones = AAZListArg(
            options=["zones"],
            help="A list of availability zones denoting the IP allocated for the resource needs to come from.",
            nullable=True,
        )

        ddos_settings = cls._args_public_ip_address_update.ddos_settings
        ddos_settings.ddos_custom_policy = AAZObjectArg(
            options=["ddos-custom-policy"],
            help="The DDoS custom policy associated with the public IP.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(ddos_settings.ddos_custom_policy)
        ddos_settings.protection_coverage = AAZStrArg(
            options=["protection-coverage"],
            help="The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.",
            nullable=True,
            enum={"Basic": "Basic", "Standard": "Standard"},
        )

        dns_settings = cls._args_public_ip_address_update.dns_settings
        dns_settings.domain_name_label = AAZStrArg(
            options=["domain-name-label"],
            help="Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.",
            nullable=True,
        )
        dns_settings.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.",
            nullable=True,
        )
        dns_settings.reverse_fqdn = AAZStrArg(
            options=["reverse-fqdn"],
            help="Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. ",
            nullable=True,
        )

        ip_tags = cls._args_public_ip_address_update.ip_tags
        ip_tags.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_public_ip_address_update.ip_tags.Element
        _element.ip_tag_type = AAZStrArg(
            options=["ip-tag-type"],
            help="Gets or sets the ipTag type: Example FirstPartyUsage.",
            nullable=True,
        )
        _element.tag = AAZStrArg(
            options=["tag"],
            help="Gets or sets value of the IpTag associated with the public IP. Example SQL, Storage etc",
            nullable=True,
        )

        sku = cls._args_public_ip_address_update.sku
        sku.name = AAZStrArg(
            options=["name"],
            help="Name of a public IP address SKU.",
            nullable=True,
            enum={"Basic": "Basic", "Standard": "Standard"},
        )

        tags = cls._args_public_ip_address_update.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        zones = cls._args_public_ip_address_update.zones
        zones.Element = AAZStrArg(
            nullable=True,
        )

        _schema.ddos_settings = cls._args_public_ip_address_update.ddos_settings
        _schema.dns_settings = cls._args_public_ip_address_update.dns_settings
        _schema.etag = cls._args_public_ip_address_update.etag
        _schema.id = cls._args_public_ip_address_update.id
        _schema.idle_timeout_in_minutes = cls._args_public_ip_address_update.idle_timeout_in_minutes
        _schema.ip_address = cls._args_public_ip_address_update.ip_address
        _schema.ip_tags = cls._args_public_ip_address_update.ip_tags
        _schema.location = cls._args_public_ip_address_update.location
        _schema.provisioning_state = cls._args_public_ip_address_update.provisioning_state
        _schema.public_ip_address_version = cls._args_public_ip_address_update.public_ip_address_version
        _schema.public_ip_allocation_method = cls._args_public_ip_address_update.public_ip_allocation_method
        _schema.public_ip_prefix = cls._args_public_ip_address_update.public_ip_prefix
        _schema.resource_guid = cls._args_public_ip_address_update.resource_guid
        _schema.sku = cls._args_public_ip_address_update.sku
        _schema.tags = cls._args_public_ip_address_update.tags
        _schema.zones = cls._args_public_ip_address_update.zones

    _args_security_rule_update = None

    @classmethod
    def _build_args_security_rule_update(cls, _schema):
        if cls._args_security_rule_update is not None:
            _schema.access = cls._args_security_rule_update.access
            _schema.description = cls._args_security_rule_update.description
            _schema.destination_address_prefix = cls._args_security_rule_update.destination_address_prefix
            _schema.destination_address_prefixes = cls._args_security_rule_update.destination_address_prefixes
            _schema.destination_application_security_groups = cls._args_security_rule_update.destination_application_security_groups
            _schema.destination_port_range = cls._args_security_rule_update.destination_port_range
            _schema.destination_port_ranges = cls._args_security_rule_update.destination_port_ranges
            _schema.direction = cls._args_security_rule_update.direction
            _schema.etag = cls._args_security_rule_update.etag
            _schema.name = cls._args_security_rule_update.name
            _schema.priority = cls._args_security_rule_update.priority
            _schema.protocol = cls._args_security_rule_update.protocol
            _schema.provisioning_state = cls._args_security_rule_update.provisioning_state
            _schema.source_address_prefix = cls._args_security_rule_update.source_address_prefix
            _schema.source_address_prefixes = cls._args_security_rule_update.source_address_prefixes
            _schema.source_application_security_groups = cls._args_security_rule_update.source_application_security_groups
            _schema.source_port_range = cls._args_security_rule_update.source_port_range
            _schema.source_port_ranges = cls._args_security_rule_update.source_port_ranges
            return

        cls._args_security_rule_update = AAZObjectArg(
            nullable=True,
        )

        security_rule_update = cls._args_security_rule_update
        security_rule_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        security_rule_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        security_rule_update.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        security_rule_update.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
            nullable=True,
        )
        security_rule_update.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or destination IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
            nullable=True,
        )
        security_rule_update.destination_address_prefixes = AAZListArg(
            options=["destination-address-prefixes"],
            help="The destination address prefixes. CIDR or destination IP ranges.",
            nullable=True,
        )
        security_rule_update.destination_application_security_groups = AAZListArg(
            options=["destination-application-security-groups"],
            help="The application security group specified as destination.",
            nullable=True,
        )
        security_rule_update.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
            nullable=True,
        )
        security_rule_update.destination_port_ranges = AAZListArg(
            options=["destination-port-ranges"],
            help="The destination port ranges.",
            nullable=True,
        )
        security_rule_update.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        security_rule_update.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
            nullable=True,
        )
        security_rule_update.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        security_rule_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        security_rule_update.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
            nullable=True,
        )
        security_rule_update.source_address_prefixes = AAZListArg(
            options=["source-address-prefixes"],
            help="The CIDR or source IP ranges.",
            nullable=True,
        )
        security_rule_update.source_application_security_groups = AAZListArg(
            options=["source-application-security-groups"],
            help="The application security group specified as source.",
            nullable=True,
        )
        security_rule_update.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
            nullable=True,
        )
        security_rule_update.source_port_ranges = AAZListArg(
            options=["source-port-ranges"],
            help="The source port ranges.",
            nullable=True,
        )

        destination_address_prefixes = cls._args_security_rule_update.destination_address_prefixes
        destination_address_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        destination_application_security_groups = cls._args_security_rule_update.destination_application_security_groups
        destination_application_security_groups.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_security_group_update(destination_application_security_groups.Element)

        destination_port_ranges = cls._args_security_rule_update.destination_port_ranges
        destination_port_ranges.Element = AAZStrArg(
            nullable=True,
        )

        source_address_prefixes = cls._args_security_rule_update.source_address_prefixes
        source_address_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        source_application_security_groups = cls._args_security_rule_update.source_application_security_groups
        source_application_security_groups.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_security_group_update(source_application_security_groups.Element)

        source_port_ranges = cls._args_security_rule_update.source_port_ranges
        source_port_ranges.Element = AAZStrArg(
            nullable=True,
        )

        _schema.access = cls._args_security_rule_update.access
        _schema.description = cls._args_security_rule_update.description
        _schema.destination_address_prefix = cls._args_security_rule_update.destination_address_prefix
        _schema.destination_address_prefixes = cls._args_security_rule_update.destination_address_prefixes
        _schema.destination_application_security_groups = cls._args_security_rule_update.destination_application_security_groups
        _schema.destination_port_range = cls._args_security_rule_update.destination_port_range
        _schema.destination_port_ranges = cls._args_security_rule_update.destination_port_ranges
        _schema.direction = cls._args_security_rule_update.direction
        _schema.etag = cls._args_security_rule_update.etag
        _schema.name = cls._args_security_rule_update.name
        _schema.priority = cls._args_security_rule_update.priority
        _schema.protocol = cls._args_security_rule_update.protocol
        _schema.provisioning_state = cls._args_security_rule_update.provisioning_state
        _schema.source_address_prefix = cls._args_security_rule_update.source_address_prefix
        _schema.source_address_prefixes = cls._args_security_rule_update.source_address_prefixes
        _schema.source_application_security_groups = cls._args_security_rule_update.source_application_security_groups
        _schema.source_port_range = cls._args_security_rule_update.source_port_range
        _schema.source_port_ranges = cls._args_security_rule_update.source_port_ranges

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg(
            nullable=True,
        )

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )

        _schema.id = cls._args_sub_resource_update.id

    _args_subnet_update = None

    @classmethod
    def _build_args_subnet_update(cls, _schema):
        if cls._args_subnet_update is not None:
            _schema.address_prefix = cls._args_subnet_update.address_prefix
            _schema.address_prefixes = cls._args_subnet_update.address_prefixes
            _schema.delegations = cls._args_subnet_update.delegations
            _schema.id = cls._args_subnet_update.id
            _schema.name = cls._args_subnet_update.name
            _schema.network_security_group = cls._args_subnet_update.network_security_group
            _schema.resource_navigation_links = cls._args_subnet_update.resource_navigation_links
            _schema.route_table = cls._args_subnet_update.route_table
            _schema.service_association_links = cls._args_subnet_update.service_association_links
            _schema.service_endpoint_policies = cls._args_subnet_update.service_endpoint_policies
            _schema.service_endpoints = cls._args_subnet_update.service_endpoints
            return

        cls._args_subnet_update = AAZObjectArg(
            nullable=True,
        )

        subnet_update = cls._args_subnet_update
        subnet_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/{}",
            ),
        )
        subnet_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        subnet_update.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The address prefix for the subnet.",
            nullable=True,
        )
        subnet_update.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="List of  address prefixes for the subnet.",
            nullable=True,
        )
        subnet_update.delegations = AAZListArg(
            options=["delegations"],
            help="Gets an array of references to the delegations on the subnet.",
            nullable=True,
        )
        subnet_update.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference of the NetworkSecurityGroup resource.",
            nullable=True,
        )
        cls._build_args_network_security_group_update(subnet_update.network_security_group)
        subnet_update.resource_navigation_links = AAZListArg(
            options=["resource-navigation-links"],
            help="Gets an array of references to the external resources using subnet.",
            nullable=True,
        )
        subnet_update.route_table = AAZObjectArg(
            options=["route-table"],
            help="The reference of the RouteTable resource.",
            nullable=True,
        )
        subnet_update.service_association_links = AAZListArg(
            options=["service-association-links"],
            help="Gets an array of references to services injecting into this subnet.",
            nullable=True,
        )
        subnet_update.service_endpoint_policies = AAZListArg(
            options=["service-endpoint-policies"],
            help="An array of service endpoint policies.",
            nullable=True,
        )
        subnet_update.service_endpoints = AAZListArg(
            options=["service-endpoints"],
            help="An array of service endpoints.",
            nullable=True,
        )

        address_prefixes = cls._args_subnet_update.address_prefixes
        address_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        delegations = cls._args_subnet_update.delegations
        delegations.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.delegations.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a subnet. This name can be used to access the resource.",
            nullable=True,
        )
        _element.actions = AAZListArg(
            options=["actions"],
            help="Describes the actions permitted to the service upon delegation",
            nullable=True,
        )
        _element.service_name = AAZStrArg(
            options=["service-name"],
            help="The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers)",
            nullable=True,
        )

        actions = cls._args_subnet_update.delegations.Element.actions
        actions.Element = AAZStrArg(
            nullable=True,
        )

        resource_navigation_links = cls._args_subnet_update.resource_navigation_links
        resource_navigation_links.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.resource_navigation_links.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.link = AAZStrArg(
            options=["link"],
            help="Link to the external resource",
            nullable=True,
        )
        _element.linked_resource_type = AAZStrArg(
            options=["linked-resource-type"],
            help="Resource type of the linked resource.",
            nullable=True,
        )

        route_table = cls._args_subnet_update.route_table
        route_table.etag = AAZStrArg(
            options=["etag"],
            help="Gets a unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        route_table.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}",
            ),
        )
        route_table.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        route_table.disable_bgp_route_propagation = AAZBoolArg(
            options=["disable-bgp-route-propagation"],
            help="Gets or sets whether to disable the routes learned by BGP on that route table. True means disable.",
            nullable=True,
        )
        route_table.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        route_table.routes = AAZListArg(
            options=["routes"],
            help="Collection of routes contained within a route table.",
            nullable=True,
        )
        route_table.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        routes = cls._args_subnet_update.route_table.routes
        routes.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.route_table.routes.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}/routes/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The destination CIDR to which the route applies.",
            nullable=True,
        )
        _element.next_hop_ip_address = AAZStrArg(
            options=["next-hop-ip-address"],
            help="The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.",
            nullable=True,
        )
        _element.next_hop_type = AAZStrArg(
            options=["next-hop-type"],
            help="The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'",
            enum={"Internet": "Internet", "None": "None", "VirtualAppliance": "VirtualAppliance", "VirtualNetworkGateway": "VirtualNetworkGateway", "VnetLocal": "VnetLocal"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )

        tags = cls._args_subnet_update.route_table.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        service_association_links = cls._args_subnet_update.service_association_links
        service_association_links.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.service_association_links.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.link = AAZStrArg(
            options=["link"],
            help="Link to the external resource.",
            nullable=True,
        )
        _element.linked_resource_type = AAZStrArg(
            options=["linked-resource-type"],
            help="Resource type of the linked resource.",
            nullable=True,
        )

        service_endpoint_policies = cls._args_subnet_update.service_endpoint_policies
        service_endpoint_policies.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.service_endpoint_policies.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/serviceEndpointPolicies/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.service_endpoint_policy_definitions = AAZListArg(
            options=["service-endpoint-policy-definitions"],
            help="A collection of service endpoint policy definitions of the service endpoint policy.",
            nullable=True,
        )
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        service_endpoint_policy_definitions = cls._args_subnet_update.service_endpoint_policies.Element.service_endpoint_policy_definitions
        service_endpoint_policy_definitions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.service_endpoint_policies.Element.service_endpoint_policy_definitions.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/serviceEndpointPolicies/{}/serviceEndpointPolicyDefinitions/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
            nullable=True,
        )
        _element.service = AAZStrArg(
            options=["service"],
            help="service endpoint name.",
            nullable=True,
        )
        _element.service_resources = AAZListArg(
            options=["service-resources"],
            help="A list of service resources.",
            nullable=True,
        )

        service_resources = cls._args_subnet_update.service_endpoint_policies.Element.service_endpoint_policy_definitions.Element.service_resources
        service_resources.Element = AAZStrArg(
            nullable=True,
        )

        tags = cls._args_subnet_update.service_endpoint_policies.Element.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        service_endpoints = cls._args_subnet_update.service_endpoints
        service_endpoints.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.service_endpoints.Element
        _element.locations = AAZListArg(
            options=["locations"],
            help="A list of locations.",
            nullable=True,
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource.",
            nullable=True,
        )
        _element.service = AAZStrArg(
            options=["service"],
            help="The type of the endpoint service.",
            nullable=True,
        )

        locations = cls._args_subnet_update.service_endpoints.Element.locations
        locations.Element = AAZStrArg(
            nullable=True,
        )

        _schema.address_prefix = cls._args_subnet_update.address_prefix
        _schema.address_prefixes = cls._args_subnet_update.address_prefixes
        _schema.delegations = cls._args_subnet_update.delegations
        _schema.id = cls._args_subnet_update.id
        _schema.name = cls._args_subnet_update.name
        _schema.network_security_group = cls._args_subnet_update.network_security_group
        _schema.resource_navigation_links = cls._args_subnet_update.resource_navigation_links
        _schema.route_table = cls._args_subnet_update.route_table
        _schema.service_association_links = cls._args_subnet_update.service_association_links
        _schema.service_endpoint_policies = cls._args_subnet_update.service_endpoint_policies
        _schema.service_endpoints = cls._args_subnet_update.service_endpoints

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkInterfacesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.selectors.subresource.required())
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.selectors.subresource.required())
        yield self.NetworkInterfacesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class NetworkInterfacesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_network_interface_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkInterfacesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_network_interface_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.selectors.subresource.required())

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("applicationGatewayBackendAddressPools", AAZListType, ".application_gateway_backend_address_pools")
                properties.set_prop("applicationSecurityGroups", AAZListType, ".asgs_obj")
                properties.set_prop("loadBalancerBackendAddressPools", AAZListType, ".load_balancer_backend_address_pools")
                properties.set_prop("loadBalancerInboundNatRules", AAZListType, ".load_balancer_inbound_nat_rules")
                properties.set_prop("primary", AAZBoolType, ".make_primary")
                properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
                properties.set_prop("privateIPAddressVersion", AAZStrType, ".private_ip_address_version")
                properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
                properties.set_prop("publicIPAddress", AAZObjectType)
                properties.set_prop("subnet", AAZObjectType)

            application_gateway_backend_address_pools = _builder.get(".properties.applicationGatewayBackendAddressPools")
            if application_gateway_backend_address_pools is not None:
                application_gateway_backend_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationGatewayBackendAddressPools[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            application_security_groups = _builder.get(".properties.applicationSecurityGroups")
            if application_security_groups is not None:
                application_security_groups.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationSecurityGroups[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("location", AAZStrType, ".location")
                _elements.set_prop("tags", AAZDictType, ".tags")

            tags = _builder.get(".properties.applicationSecurityGroups[].tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            load_balancer_backend_address_pools = _builder.get(".properties.loadBalancerBackendAddressPools")
            if load_balancer_backend_address_pools is not None:
                load_balancer_backend_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.loadBalancerBackendAddressPools[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            load_balancer_inbound_nat_rules = _builder.get(".properties.loadBalancerInboundNatRules")
            if load_balancer_inbound_nat_rules is not None:
                load_balancer_inbound_nat_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.loadBalancerInboundNatRules[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            public_ip_address = _builder.get(".properties.publicIPAddress")
            if public_ip_address is not None:
                public_ip_address.set_prop("id", AAZStrType, ".public_ip_address")
                public_ip_address.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            subnet = _builder.get(".properties.subnet")
            if subnet is not None:
                subnet.set_prop("id", AAZStrType, ".subnet")
                subnet.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.selectors.subresource.required(),
                self.ctx.generic_update_args
            )


@register_command(
    "network nic ip-config wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkinterfaces/{}", "2018-11-01", "properties.ipConfigurations[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nic_name = AAZStrArg(
            options=["--nic-name"],
            help="Name of the network interface (NIC).",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkInterfacesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class NetworkInterfacesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkInterfaceName", self.ctx.args.nic_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _WaitHelper._build_schema_network_interface_read(cls._schema_on_200)

            return cls._schema_on_200


class _Helper:

    @staticmethod
    def _build_schema_application_security_group_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("tags", AAZDictType, ".tags")

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @staticmethod
    def _build_schema_network_interface_ip_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("applicationGatewayBackendAddressPools", AAZListType, ".application_gateway_backend_address_pools")
            properties.set_prop("applicationSecurityGroups", AAZListType, ".application_security_groups")
            properties.set_prop("loadBalancerBackendAddressPools", AAZListType, ".load_balancer_backend_address_pools")
            properties.set_prop("loadBalancerInboundNatRules", AAZListType, ".load_balancer_inbound_nat_rules")
            properties.set_prop("primary", AAZBoolType, ".primary")
            properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
            properties.set_prop("privateIPAddressVersion", AAZStrType, ".private_ip_address_version")
            properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
            cls._build_schema_public_ip_address_update(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))
            cls._build_schema_subnet_update(properties.set_prop("subnet", AAZObjectType, ".subnet"))
            properties.set_prop("virtualNetworkTaps", AAZListType, ".virtual_network_taps")

        application_gateway_backend_address_pools = _builder.get(".properties.applicationGatewayBackendAddressPools")
        if application_gateway_backend_address_pools is not None:
            application_gateway_backend_address_pools.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.applicationGatewayBackendAddressPools[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _elements.set_prop("type", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].type")

        properties = _builder.get(".properties.applicationGatewayBackendAddressPools[].properties")
        if properties is not None:
            properties.set_prop("backendAddresses", AAZListType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].backend_addresses")
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].provisioning_state")

        backend_addresses = _builder.get(".properties.applicationGatewayBackendAddressPools[].properties.backendAddresses")
        if backend_addresses is not None:
            backend_addresses.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.applicationGatewayBackendAddressPools[].properties.backendAddresses[]")
        if _elements is not None:
            _elements.set_prop("fqdn", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].backend_addresses.[].fqdn")
            _elements.set_prop("ipAddress", AAZStrType, "@NetworkInterfaceIPConfiguration_update.application_gateway_backend_address_pools.[].backend_addresses.[].ip_address")

        application_security_groups = _builder.get(".properties.applicationSecurityGroups")
        if application_security_groups is not None:
            cls._build_schema_application_security_group_update(application_security_groups.set_elements(AAZObjectType, "."))

        load_balancer_backend_address_pools = _builder.get(".properties.loadBalancerBackendAddressPools")
        if load_balancer_backend_address_pools is not None:
            load_balancer_backend_address_pools.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.loadBalancerBackendAddressPools[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.loadBalancerBackendAddressPools[].properties")
        if properties is not None:
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].provisioning_state")

        load_balancer_inbound_nat_rules = _builder.get(".properties.loadBalancerInboundNatRules")
        if load_balancer_inbound_nat_rules is not None:
            load_balancer_inbound_nat_rules.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.loadBalancerInboundNatRules[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.loadBalancerInboundNatRules[].properties")
        if properties is not None:
            properties.set_prop("backendPort", AAZIntType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].backend_port")
            properties.set_prop("enableFloatingIP", AAZBoolType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].enable_floating_ip")
            properties.set_prop("enableTcpReset", AAZBoolType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].enable_tcp_reset")
            cls._build_schema_sub_resource_update(properties.set_prop("frontendIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].frontend_ip_configuration"))
            properties.set_prop("frontendPort", AAZIntType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].frontend_port")
            properties.set_prop("idleTimeoutInMinutes", AAZIntType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].idle_timeout_in_minutes")
            properties.set_prop("protocol", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].protocol")
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].provisioning_state")

        virtual_network_taps = _builder.get(".properties.virtualNetworkTaps")
        if virtual_network_taps is not None:
            virtual_network_taps.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.virtualNetworkTaps[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].id")
            _elements.set_prop("location", AAZStrType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].location")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _elements.set_prop("tags", AAZDictType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].tags")

        properties = _builder.get(".properties.virtualNetworkTaps[].properties")
        if properties is not None:
            properties.set_prop("destinationLoadBalancerFrontEndIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].destination_load_balancer_front_end_ip_configuration")
            cls._build_schema_network_interface_ip_configuration_update(properties.set_prop("destinationNetworkInterfaceIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].destination_network_interface_ip_configuration"))
            properties.set_prop("destinationPort", AAZIntType, "@NetworkInterfaceIPConfiguration_update.virtual_network_taps.[].destination_port")

        destination_load_balancer_front_end_ip_configuration = _builder.get(".properties.virtualNetworkTaps[].properties.destinationLoadBalancerFrontEndIPConfiguration")
        if destination_load_balancer_front_end_ip_configuration is not None:
            destination_load_balancer_front_end_ip_configuration.set_prop("etag", AAZStrType, ".etag")
            destination_load_balancer_front_end_ip_configuration.set_prop("id", AAZStrType, ".id")
            destination_load_balancer_front_end_ip_configuration.set_prop("name", AAZStrType, ".name")
            destination_load_balancer_front_end_ip_configuration.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            destination_load_balancer_front_end_ip_configuration.set_prop("zones", AAZListType, ".zones")

        properties = _builder.get(".properties.virtualNetworkTaps[].properties.destinationLoadBalancerFrontEndIPConfiguration.properties")
        if properties is not None:
            properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
            properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            cls._build_schema_public_ip_address_update(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))
            cls._build_schema_sub_resource_update(properties.set_prop("publicIPPrefix", AAZObjectType, ".public_ip_prefix"))
            cls._build_schema_subnet_update(properties.set_prop("subnet", AAZObjectType, ".subnet"))

        zones = _builder.get(".properties.virtualNetworkTaps[].properties.destinationLoadBalancerFrontEndIPConfiguration.zones")
        if zones is not None:
            zones.set_elements(AAZStrType, ".")

        tags = _builder.get(".properties.virtualNetworkTaps[].tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @staticmethod
    def _build_schema_network_security_group_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("defaultSecurityRules", AAZListType, ".default_security_rules")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("resourceGuid", AAZStrType, ".resource_guid")
            properties.set_prop("securityRules", AAZListType, ".security_rules")

        default_security_rules = _builder.get(".properties.defaultSecurityRules")
        if default_security_rules is not None:
            cls._build_schema_security_rule_update(default_security_rules.set_elements(AAZObjectType, "."))

        security_rules = _builder.get(".properties.securityRules")
        if security_rules is not None:
            security_rules.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.securityRules[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.securityRules[].properties")
        if properties is not None:
            properties.set_prop("access", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].access", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("description", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].description")
            properties.set_prop("destinationAddressPrefix", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].destination_address_prefix")
            properties.set_prop("destinationAddressPrefixes", AAZListType, "@NetworkSecurityGroup_update.security_rules.[].destination_address_prefixes")
            properties.set_prop("destinationApplicationSecurityGroups", AAZListType, "@NetworkSecurityGroup_update.security_rules.[].destination_application_security_groups")
            properties.set_prop("destinationPortRange", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].destination_port_range")
            properties.set_prop("destinationPortRanges", AAZListType, "@NetworkSecurityGroup_update.security_rules.[].destination_port_ranges")
            properties.set_prop("direction", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].direction", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("priority", AAZIntType, "@NetworkSecurityGroup_update.security_rules.[].priority")
            properties.set_prop("protocol", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].protocol", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].provisioning_state")
            properties.set_prop("sourceAddressPrefix", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].source_address_prefix")
            properties.set_prop("sourceAddressPrefixes", AAZListType, "@NetworkSecurityGroup_update.security_rules.[].source_address_prefixes")
            properties.set_prop("sourceApplicationSecurityGroups", AAZListType, "@NetworkSecurityGroup_update.security_rules.[].source_application_security_groups")
            properties.set_prop("sourcePortRange", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].source_port_range")
            properties.set_prop("sourcePortRanges", AAZListType, "@NetworkSecurityGroup_update.security_rules.[].source_port_ranges")

        destination_address_prefixes = _builder.get(".properties.securityRules[].properties.destinationAddressPrefixes")
        if destination_address_prefixes is not None:
            destination_address_prefixes.set_elements(AAZStrType, ".")

        destination_application_security_groups = _builder.get(".properties.securityRules[].properties.destinationApplicationSecurityGroups")
        if destination_application_security_groups is not None:
            cls._build_schema_application_security_group_update(destination_application_security_groups.set_elements(AAZObjectType, "."))

        destination_port_ranges = _builder.get(".properties.securityRules[].properties.destinationPortRanges")
        if destination_port_ranges is not None:
            destination_port_ranges.set_elements(AAZStrType, ".")

        source_address_prefixes = _builder.get(".properties.securityRules[].properties.sourceAddressPrefixes")
        if source_address_prefixes is not None:
            source_address_prefixes.set_elements(AAZStrType, ".")

        source_application_security_groups = _builder.get(".properties.securityRules[].properties.sourceApplicationSecurityGroups")
        if source_application_security_groups is not None:
            cls._build_schema_application_security_group_update(source_application_security_groups.set_elements(AAZObjectType, "."))

        source_port_ranges = _builder.get(".properties.securityRules[].properties.sourcePortRanges")
        if source_port_ranges is not None:
            source_port_ranges.set_elements(AAZStrType, ".")

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @staticmethod
    def _build_schema_public_ip_address_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("sku", AAZObjectType, ".sku")
        _builder.set_prop("tags", AAZDictType, ".tags")
        _builder.set_prop("zones", AAZListType, ".zones")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("ddosSettings", AAZObjectType, ".ddos_settings")
            properties.set_prop("dnsSettings", AAZObjectType, ".dns_settings")
            properties.set_prop("idleTimeoutInMinutes", AAZIntType, ".idle_timeout_in_minutes")
            properties.set_prop("ipAddress", AAZStrType, ".ip_address")
            properties.set_prop("ipTags", AAZListType, ".ip_tags")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("publicIPAddressVersion", AAZStrType, ".public_ip_address_version")
            properties.set_prop("publicIPAllocationMethod", AAZStrType, ".public_ip_allocation_method")
            cls._build_schema_sub_resource_update(properties.set_prop("publicIPPrefix", AAZObjectType, ".public_ip_prefix"))
            properties.set_prop("resourceGuid", AAZStrType, ".resource_guid")

        ddos_settings = _builder.get(".properties.ddosSettings")
        if ddos_settings is not None:
            cls._build_schema_sub_resource_update(ddos_settings.set_prop("ddosCustomPolicy", AAZObjectType, ".ddos_custom_policy"))
            ddos_settings.set_prop("protectionCoverage", AAZStrType, ".protection_coverage")

        dns_settings = _builder.get(".properties.dnsSettings")
        if dns_settings is not None:
            dns_settings.set_prop("domainNameLabel", AAZStrType, ".domain_name_label")
            dns_settings.set_prop("fqdn", AAZStrType, ".fqdn")
            dns_settings.set_prop("reverseFqdn", AAZStrType, ".reverse_fqdn")

        ip_tags = _builder.get(".properties.ipTags")
        if ip_tags is not None:
            ip_tags.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.ipTags[]")
        if _elements is not None:
            _elements.set_prop("ipTagType", AAZStrType, "@PublicIPAddress_update.ip_tags.[].ip_tag_type")
            _elements.set_prop("tag", AAZStrType, "@PublicIPAddress_update.ip_tags.[].tag")

        sku = _builder.get(".sku")
        if sku is not None:
            sku.set_prop("name", AAZStrType, ".name")

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

        zones = _builder.get(".zones")
        if zones is not None:
            zones.set_elements(AAZStrType, ".")

    @staticmethod
    def _build_schema_security_rule_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("access", AAZStrType, ".access", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("description", AAZStrType, ".description")
            properties.set_prop("destinationAddressPrefix", AAZStrType, ".destination_address_prefix")
            properties.set_prop("destinationAddressPrefixes", AAZListType, ".destination_address_prefixes")
            properties.set_prop("destinationApplicationSecurityGroups", AAZListType, ".destination_application_security_groups")
            properties.set_prop("destinationPortRange", AAZStrType, ".destination_port_range")
            properties.set_prop("destinationPortRanges", AAZListType, ".destination_port_ranges")
            properties.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("priority", AAZIntType, ".priority")
            properties.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("sourceAddressPrefix", AAZStrType, ".source_address_prefix")
            properties.set_prop("sourceAddressPrefixes", AAZListType, ".source_address_prefixes")
            properties.set_prop("sourceApplicationSecurityGroups", AAZListType, ".source_application_security_groups")
            properties.set_prop("sourcePortRange", AAZStrType, ".source_port_range")
            properties.set_prop("sourcePortRanges", AAZListType, ".source_port_ranges")

        destination_address_prefixes = _builder.get(".properties.destinationAddressPrefixes")
        if destination_address_prefixes is not None:
            destination_address_prefixes.set_elements(AAZStrType, ".")

        destination_application_security_groups = _builder.get(".properties.destinationApplicationSecurityGroups")
        if destination_application_security_groups is not None:
            cls._build_schema_application_security_group_update(destination_application_security_groups.set_elements(AAZObjectType, "."))

        destination_port_ranges = _builder.get(".properties.destinationPortRanges")
        if destination_port_ranges is not None:
            destination_port_ranges.set_elements(AAZStrType, ".")

        source_address_prefixes = _builder.get(".properties.sourceAddressPrefixes")
        if source_address_prefixes is not None:
            source_address_prefixes.set_elements(AAZStrType, ".")

        source_application_security_groups = _builder.get(".properties.sourceApplicationSecurityGroups")
        if source_application_security_groups is not None:
            cls._build_schema_application_security_group_update(source_application_security_groups.set_elements(AAZObjectType, "."))

        source_port_ranges = _builder.get(".properties.sourcePortRanges")
        if source_port_ranges is not None:
            source_port_ranges.set_elements(AAZStrType, ".")

    @staticmethod
    def _build_schema_sub_resource_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    @staticmethod
    def _build_schema_subnet_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, ".address_prefix")
            properties.set_prop("addressPrefixes", AAZListType, ".address_prefixes")
            properties.set_prop("delegations", AAZListType, ".delegations")
            cls._build_schema_network_security_group_update(properties.set_prop("networkSecurityGroup", AAZObjectType, ".network_security_group"))
            properties.set_prop("resourceNavigationLinks", AAZListType, ".resource_navigation_links")
            properties.set_prop("routeTable", AAZObjectType, ".route_table")
            properties.set_prop("serviceAssociationLinks", AAZListType, ".service_association_links")
            properties.set_prop("serviceEndpointPolicies", AAZListType, ".service_endpoint_policies")
            properties.set_prop("serviceEndpoints", AAZListType, ".service_endpoints")

        address_prefixes = _builder.get(".properties.addressPrefixes")
        if address_prefixes is not None:
            address_prefixes.set_elements(AAZStrType, ".")

        delegations = _builder.get(".properties.delegations")
        if delegations is not None:
            delegations.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.delegations[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@Subnet_update.delegations.[].etag")
            _elements.set_prop("id", AAZStrType, "@Subnet_update.delegations.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_update.delegations.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.delegations[].properties")
        if properties is not None:
            properties.set_prop("actions", AAZListType, "@Subnet_update.delegations.[].actions")
            properties.set_prop("serviceName", AAZStrType, "@Subnet_update.delegations.[].service_name")

        actions = _builder.get(".properties.delegations[].properties.actions")
        if actions is not None:
            actions.set_elements(AAZStrType, ".")

        resource_navigation_links = _builder.get(".properties.resourceNavigationLinks")
        if resource_navigation_links is not None:
            resource_navigation_links.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.resourceNavigationLinks[]")
        if _elements is not None:
            _elements.set_prop("id", AAZStrType, "@Subnet_update.resource_navigation_links.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_update.resource_navigation_links.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.resourceNavigationLinks[].properties")
        if properties is not None:
            properties.set_prop("link", AAZStrType, "@Subnet_update.resource_navigation_links.[].link")
            properties.set_prop("linkedResourceType", AAZStrType, "@Subnet_update.resource_navigation_links.[].linked_resource_type")

        route_table = _builder.get(".properties.routeTable")
        if route_table is not None:
            route_table.set_prop("etag", AAZStrType, ".etag")
            route_table.set_prop("id", AAZStrType, ".id")
            route_table.set_prop("location", AAZStrType, ".location")
            route_table.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            route_table.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties.routeTable.properties")
        if properties is not None:
            properties.set_prop("disableBgpRoutePropagation", AAZBoolType, ".disable_bgp_route_propagation")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("routes", AAZListType, ".routes")

        routes = _builder.get(".properties.routeTable.properties.routes")
        if routes is not None:
            routes.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.routeTable.properties.routes[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@Subnet_update.route_table.routes.[].etag")
            _elements.set_prop("id", AAZStrType, "@Subnet_update.route_table.routes.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_update.route_table.routes.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.routeTable.properties.routes[].properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, "@Subnet_update.route_table.routes.[].address_prefix")
            properties.set_prop("nextHopIpAddress", AAZStrType, "@Subnet_update.route_table.routes.[].next_hop_ip_address")
            properties.set_prop("nextHopType", AAZStrType, "@Subnet_update.route_table.routes.[].next_hop_type", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, "@Subnet_update.route_table.routes.[].provisioning_state")

        tags = _builder.get(".properties.routeTable.tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

        service_association_links = _builder.get(".properties.serviceAssociationLinks")
        if service_association_links is not None:
            service_association_links.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.serviceAssociationLinks[]")
        if _elements is not None:
            _elements.set_prop("id", AAZStrType, "@Subnet_update.service_association_links.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_update.service_association_links.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.serviceAssociationLinks[].properties")
        if properties is not None:
            properties.set_prop("link", AAZStrType, "@Subnet_update.service_association_links.[].link")
            properties.set_prop("linkedResourceType", AAZStrType, "@Subnet_update.service_association_links.[].linked_resource_type")

        service_endpoint_policies = _builder.get(".properties.serviceEndpointPolicies")
        if service_endpoint_policies is not None:
            service_endpoint_policies.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.serviceEndpointPolicies[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@Subnet_update.service_endpoint_policies.[].etag")
            _elements.set_prop("id", AAZStrType, "@Subnet_update.service_endpoint_policies.[].id")
            _elements.set_prop("location", AAZStrType, "@Subnet_update.service_endpoint_policies.[].location")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _elements.set_prop("tags", AAZDictType, "@Subnet_update.service_endpoint_policies.[].tags")

        properties = _builder.get(".properties.serviceEndpointPolicies[].properties")
        if properties is not None:
            properties.set_prop("serviceEndpointPolicyDefinitions", AAZListType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions")

        service_endpoint_policy_definitions = _builder.get(".properties.serviceEndpointPolicies[].properties.serviceEndpointPolicyDefinitions")
        if service_endpoint_policy_definitions is not None:
            service_endpoint_policy_definitions.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.serviceEndpointPolicies[].properties.serviceEndpointPolicyDefinitions[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions.[].etag")
            _elements.set_prop("id", AAZStrType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.serviceEndpointPolicies[].properties.serviceEndpointPolicyDefinitions[].properties")
        if properties is not None:
            properties.set_prop("description", AAZStrType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions.[].description")
            properties.set_prop("service", AAZStrType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions.[].service")
            properties.set_prop("serviceResources", AAZListType, "@Subnet_update.service_endpoint_policies.[].service_endpoint_policy_definitions.[].service_resources")

        service_resources = _builder.get(".properties.serviceEndpointPolicies[].properties.serviceEndpointPolicyDefinitions[].properties.serviceResources")
        if service_resources is not None:
            service_resources.set_elements(AAZStrType, ".")

        tags = _builder.get(".properties.serviceEndpointPolicies[].tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

        service_endpoints = _builder.get(".properties.serviceEndpoints")
        if service_endpoints is not None:
            service_endpoints.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.serviceEndpoints[]")
        if _elements is not None:
            _elements.set_prop("locations", AAZListType, "@Subnet_update.service_endpoints.[].locations")
            _elements.set_prop("provisioningState", AAZStrType, "@Subnet_update.service_endpoints.[].provisioning_state")
            _elements.set_prop("service", AAZStrType, "@Subnet_update.service_endpoints.[].service")

        locations = _builder.get(".properties.serviceEndpoints[].locations")
        if locations is not None:
            locations.set_elements(AAZStrType, ".")


@link_helper(
    __package__,
    ("_build_schema_application_security_group_update", _Helper),
    ("_build_schema_network_interface_ip_configuration_update", _Helper),
    ("_build_schema_network_security_group_update", _Helper),
    ("_build_schema_public_ip_address_update", _Helper),
    ("_build_schema_security_rule_update", _Helper),
    ("_build_schema_sub_resource_update", _Helper),
    ("_build_schema_subnet_update", _Helper),
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_interface_endpoint_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _CreateHelper:
    _schema_application_security_group_read = None

    _schema_ip_configuration_read = None

    _schema_interface_endpoint_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_interface_endpoint_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _DeleteHelper:
    _schema_application_security_group_read = None

    _schema_ip_configuration_read = None

    _schema_interface_endpoint_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_interface_endpoint_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _ListHelper:
    _schema_application_security_group_read = None

    _schema_ip_configuration_read = None

    _schema_interface_endpoint_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_interface_endpoint_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _ShowHelper:
    _schema_application_security_group_read = None

    _schema_ip_configuration_read = None

    _schema_interface_endpoint_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_update", _Helper),
    ("_build_schema_network_interface_ip_configuration_update", _Helper),
    ("_build_schema_network_security_group_update", _Helper),
    ("_build_schema_public_ip_address_update", _Helper),
    ("_build_schema_security_rule_update", _Helper),
    ("_build_schema_sub_resource_update", _Helper),
    ("_build_schema_subnet_update", _Helper),
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_interface_endpoint_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _UpdateHelper:
    _schema_application_security_group_read = None

    _schema_ip_configuration_read = None

    _schema_interface_endpoint_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_interface_endpoint_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _WaitHelper:
    _schema_application_security_group_read = None

    _schema_ip_configuration_read = None

    _schema_interface_endpoint_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



__all__ = ["Create","Delete","List","Show","Update","Wait","__CMDGroup"]
