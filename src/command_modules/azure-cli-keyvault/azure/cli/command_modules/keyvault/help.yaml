version: 1
content:
- group:
    name: keyvault
    summary: Manage KeyVault keys, secrets, and certificates.
- command:
    name: keyvault create
    summary: Create a key vault.
    description: Default permissions are created for the current user or service principal unless the `--no-self-perms` flag is specified.
- command:
    name: keyvault delete
    summary: Delete a key vault.
- command:
    name: keyvault list
    summary: List key vaults.
- command:
    name: keyvault show
    summary: Show details of a key vault.
- command:
    name: keyvault update
    summary: Update the properties of a key vault.
- command:
    name: keyvault recover
    summary: Recover a key vault.
    description: Recovers a previously deleted key vault for which soft delete was enabled.
- group:
    name: keyvault key
    summary: Manage keys.
- group:
    name: keyvault secret
    summary: Manage secrets.
- group:
    name: keyvault certificate
    summary: Manage certificates.
- group:
    name: keyvault storage
    summary: Manage storage accounts.
- command:
    name: keyvault storage add
    examples:
    - summary: Create a storage account and setup a vault to manage its keys
      command: |
        $id = az storage account create -g resourcegroup -n storageacct --query id

        # assign the Azure Key Vault service the "Storage Account Key Operator Service Role" role.
        az role assignment create --role "Storage Account Key Operator Service Role" --scope $id \
        --assignee cfa8b339-82a2-471a-a3c9-0fc0be7a4093

        az keyvault storage add --vault-name vault -n storageacct --active-key-name key1    \
        --auto-regenerate-key --regeneration-period P90D  --resource-id $id
- group:
    name: keyvault storage sas-definition
    summary: Manage storage account SAS definitions.
- command:
    name: keyvault storage sas-definition create
    examples:
    - summary: Add a sas-definition for an account sas-token
      command: |2

        $sastoken = az storage account generate-sas --expiry 2020-01-01 --permissions rw \
        --resource-types sco --services bfqt --https-only --account-name storageacct     \
        --account-key 00000000

        az keyvault storage sas-definition create --vault-name vault --account-name storageacct   \
        -n rwallserviceaccess --validity-period P2D --sas-type account --template-uri $sastoken
    - summary: Add a sas-definition for a blob sas-token
      command: >2

        $sastoken = az storage blob generate-sas --account-name storageacct --account-key 00000000 \
        -c container1 -n blob1 --https-only --permissions rw

        $url = az storage blob url --account-name storageacct -c container1 -n blob1


        az keyvault storage sas-definition create --vault-name vault --account-name storageacct   \
        -n rwblobaccess --validity-period P2D --sas-type service --template-uri $url?$sastoken
- group:
    name: keyvault network-rule
    summary: Manage vault network ACLs.
- command:
    name: keyvault certificate download
    summary: Download the public portion of a Key Vault certificate.
    description: The certificate formatted as either PEM or DER. PEM is the default.
    examples:
    - summary: Download a certificate as PEM and check its fingerprint in openssl.
      command: |
        az keyvault certificate download --vault-name vault -n cert-name -f cert.pem && \
        openssl x509 -in cert.pem -inform PEM  -noout -sha1 -fingerprint
    - summary: Download a certificate as DER and check its fingerprint in openssl.
      command: |
        az keyvault certificate download --vault-name vault -n cert-name -f cert.crt -e DER && \
        openssl x509 -in cert.crt -inform DER  -noout -sha1 -fingerprint
- command:
    name: keyvault certificate get-default-policy
    summary: Get the default policy for self-signed certificates.
    description: |
      This default policy can be used in conjunction with `az keyvault create` to create a self-signed certificate.
      The default policy can also be used as a starting point to create derivative policies.

      For more details, see: https://docs.microsoft.com/en-us/rest/api/keyvault/certificates-and-policies
    examples:
    - summary: Create a self-signed certificate with the default policy
      command: |
        az keyvault certificate create --vault-name vaultname -n cert1 \
          -p "$(az keyvault certificate get-default-policy)"
- command:
    name: keyvault certificate create
    summary: Create a Key Vault certificate.
    description: Certificates can be used as a secrets for provisioned virtual machines.
    examples:
    - summary: Create a self-signed certificate with the default policy and add it to a virtual machine.
      command: |
        az keyvault certificate create --vault-name vaultname -n cert1 \
          -p "$(az keyvault certificate get-default-policy)"

        secrets=$(az keyvault secret list-versions --vault-name vaultname \
          -n cert1 --query "[?attributes.enabled].id" -o tsv)

        vm_secrets=$(az vm secret format -s "$secrets")

        az vm create -g group-name -n vm-name --admin-username deploy  \
          --image debian --secrets "$vm_secrets"
- command:
    name: keyvault certificate import
    summary: Import a certificate into KeyVault.
    description: Certificates can also be used as a secrets in provisioned virtual machines.
    examples:
    - summary: Create a service principal with a certificate, add the certificate to Key Vault and provision a VM with that certificate.
      command: |
        service_principal=$(az ad sp create-for-rbac --create-cert)

        cert_file=$(echo $service_principal | jq .fileWithCertAndPrivateKey -r)

        az keyvault create -g my-group -n vaultname

        az keyvault certificate import --vault-name vaultname -n cert_name -f cert_file

        secrets=$(az keyvault secret list-versions --vault-name vaultname \
          -n cert1 --query "[?attributes.enabled].id" -o tsv)

        vm_secrets=$(az vm secret format -s "$secrets")

        az vm create -g group-name -n vm-name --admin-username deploy  \
          --image debian --secrets "$vm_secrets"
- group:
    name: keyvault certificate pending
    summary: Manage pending certificate creation operations.
- group:
    name: keyvault certificate contact
    summary: Manage contacts for certificate management.
- group:
    name: keyvault certificate issuer
    summary: Manage certificate issuer information.
- group:
    name: keyvault certificate issuer admin
    summary: Manage admin information for certificate issuers.
