# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network virtual-appliance inbound-security-rule create",
)
class Create(AAZCommand):
    """Create the specified Network Virtual Appliance Inbound Security Rules.

    :example: Create Inbound Security Rule of Permanent Rule Type
        az network virtual-appliance inbound-security-rule create  --network-virtual-appliance-name "MyName" -g "MyRG" --subscription {subID} --rule-type "Permanent" --name "PermanentRuleCollection" --rules "[{name:'inboundRule',protocol:'TCP',destination-port-ranges:['80-120'],applies-on:['slbIP'],source-address-prefix:'*'}]"

    :example: Create Inbound Security Rule of AutoExpire Rule Type
        az network virtual-appliance inbound-security-rule create  --network-virtual-appliance-name "MyName" -g "MyRG" --subscription {subID} --rule-type "AutoExpire" --name "TemporaryRuleCollection" --rules "[{name:'inboundRule',protocol:'TCP',destination-port-ranges:['80-120'],applies-on:['publicnicipconfig'],source-address-prefix:'20.0.0.0/32'}]"
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkvirtualappliances/{}/inboundsecurityrules/{}", "2023-11-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nva_name = AAZStrArg(
            options=["--nva-name"],
            help="The name of the Network Virtual Appliance.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.rule_collection_name = AAZStrArg(
            options=["-n", "--name", "--rule-collection-name"],
            help="The name of security rule collection.",
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.id = AAZStrArg(
            options=["--id"],
            arg_group="Parameters",
            help="Resource ID.",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.rule_type = AAZStrArg(
            options=["--rule-type"],
            arg_group="Properties",
            help="Rule Type. This should be either AutoExpire or Permanent. Auto Expire Rule only creates NSG rules. Permanent Rule creates NSG rule and SLB LB Rule.",
            enum={"AutoExpire": "AutoExpire", "Permanent": "Permanent"},
        )
        _args_schema.rules = AAZListArg(
            options=["--rules"],
            arg_group="Properties",
            help="List of allowed rules.",
        )

        rules = cls._args_schema.rules
        rules.Element = AAZObjectArg()

        _element = cls._args_schema.rules.Element
        _element.applies_on = AAZListArg(
            options=["applies-on"],
            help="Public IP name in case of Permanent Rule type & Interface Name in case of Auto Expire Rule type",
        )
        _element.destination_port_range = AAZIntArg(
            options=["destination-port-range"],
            help="NVA port ranges to be opened up. One needs to provide specific ports.",
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=0,
            ),
        )
        _element.destination_port_ranges = AAZListArg(
            options=["destination-port-ranges"],
            help="NVA port ranges to be opened up. One can provide a range of ports. Allowed port value between 0 and 65535.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the rule.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol. This should be either TCP or UDP.",
            enum={"TCP": "TCP", "UDP": "UDP"},
        )
        _element.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range.",
        )

        applies_on = cls._args_schema.rules.Element.applies_on
        applies_on.Element = AAZStrArg()

        destination_port_ranges = cls._args_schema.rules.Element.destination_port_ranges
        destination_port_ranges.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.InboundSecurityRuleCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class InboundSecurityRuleCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/inboundSecurityRules/{ruleCollectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkVirtualApplianceName", self.ctx.args.nva_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleCollectionName", self.ctx.args.rule_collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("id", AAZStrType, ".id")
            _builder.set_prop("name", AAZStrType, ".rule_collection_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("ruleType", AAZStrType, ".rule_type")
                properties.set_prop("rules", AAZListType, ".rules")

            rules = _builder.get(".properties.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rules[]")
            if _elements is not None:
                _elements.set_prop("appliesOn", AAZListType, ".applies_on")
                _elements.set_prop("destinationPortRange", AAZIntType, ".destination_port_range")
                _elements.set_prop("destinationPortRanges", AAZListType, ".destination_port_ranges")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("protocol", AAZStrType, ".protocol")
                _elements.set_prop("sourceAddressPrefix", AAZStrType, ".source_address_prefix")

            applies_on = _builder.get(".properties.rules[].appliesOn")
            if applies_on is not None:
                applies_on.set_elements(AAZStrType, ".")

            destination_port_ranges = _builder.get(".properties.rules[].destinationPortRanges")
            if destination_port_ranges is not None:
                destination_port_ranges.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.name = AAZStrType()
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.rule_type = AAZStrType(
                serialized_name="ruleType",
            )
            properties.rules = AAZListType()

            rules = cls._schema_on_200_201.properties.rules
            rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.rules.Element
            _element.applies_on = AAZListType(
                serialized_name="appliesOn",
            )
            _element.destination_port_range = AAZIntType(
                serialized_name="destinationPortRange",
            )
            _element.destination_port_ranges = AAZListType(
                serialized_name="destinationPortRanges",
            )
            _element.name = AAZStrType()
            _element.protocol = AAZStrType()
            _element.source_address_prefix = AAZStrType(
                serialized_name="sourceAddressPrefix",
            )

            applies_on = cls._schema_on_200_201.properties.rules.Element.applies_on
            applies_on.Element = AAZStrType()

            destination_port_ranges = cls._schema_on_200_201.properties.rules.Element.destination_port_ranges
            destination_port_ranges.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
