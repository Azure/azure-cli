# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network custom-ip prefix",
)
class __CMDGroup(AAZCommandGroup):
    """Manage custom IP prefix resources.
    """
    pass


@register_command(
    "network custom-ip prefix create",
)
class Create(AAZCommand):
    """Create a custom IP prefix resource.

    :example: Create a custom IP prefix resource.
        az network custom-ip prefix create --location westus2 --name MyCustomIpPrefix --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/customipprefixes/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the custom IP prefix.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.asn = AAZStrArg(
            options=["--asn"],
            help="The ASN for CIDR advertising. Should be an integer as string.",
        )
        _args_schema.authorization_message = AAZStrArg(
            options=["--authorization-message"],
            help="Authorization message for WAN validation.",
        )
        _args_schema.cidr = AAZStrArg(
            options=["--cidr"],
            help="The prefix range in CIDR notation. Should include the start address and the prefix length.",
        )
        _args_schema.cip_prefix_parent = AAZStrArg(
            options=["-c", "--cip-prefix-parent"],
            help="The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.",
        )
        _args_schema.express_route_advertise = AAZBoolArg(
            options=["--is-advertised", "--express-route-advertise"],
            help="Whether to do express route advertise.",
        )
        _args_schema.geo = AAZStrArg(
            options=["--geo"],
            help="The Geo for CIDR advertising. Should be an Geo code.",
            enum={"AFRI": "AFRI", "APAC": "APAC", "AQ": "AQ", "EURO": "EURO", "GLOBAL": "GLOBAL", "LATAM": "LATAM", "ME": "ME", "NAM": "NAM", "OCEANIA": "OCEANIA"},
        )
        _args_schema.signed_message = AAZStrArg(
            options=["--signed-message"],
            help="Signed message for WAN validation.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Space-separated tags: key[=value] [key[=value] ...].",
        )
        _args_schema.zone = AAZListArg(
            options=["-z", "--zone"],
            help="Space-separated list of availability zones into which to provision the resource.  Allowed values: 1, 2, 3.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        zone = cls._args_schema.zone
        zone.Element = AAZStrArg()

        # define Arg Group "Parameters"

        # define Arg Group "Properties"
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.CustomIPPrefixesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CustomIPPrefixesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customIpPrefixName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")
            _builder.set_prop("zones", AAZListType, ".zone")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("asn", AAZStrType, ".asn")
                properties.set_prop("authorizationMessage", AAZStrType, ".authorization_message")
                properties.set_prop("cidr", AAZStrType, ".cidr")
                properties.set_prop("customIpPrefixParent", AAZObjectType)
                properties.set_prop("expressRouteAdvertise", AAZBoolType, ".express_route_advertise")
                properties.set_prop("geo", AAZStrType, ".geo")
                properties.set_prop("signedMessage", AAZStrType, ".signed_message")

            custom_ip_prefix_parent = _builder.get(".properties.customIpPrefixParent")
            if custom_ip_prefix_parent is not None:
                custom_ip_prefix_parent.set_prop("id", AAZStrType, ".cip_prefix_parent")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            zones = _builder.get(".zones")
            if zones is not None:
                zones.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.zones = AAZListType()

            extended_location = cls._schema_on_200_201.extended_location
            extended_location.name = AAZStrType()
            extended_location.type = AAZStrType()

            properties = cls._schema_on_200_201.properties
            properties.asn = AAZStrType()
            properties.authorization_message = AAZStrType(
                serialized_name="authorizationMessage",
            )
            properties.child_custom_ip_prefixes = AAZListType(
                serialized_name="childCustomIpPrefixes",
                flags={"read_only": True},
            )
            properties.cidr = AAZStrType()
            properties.commissioned_state = AAZStrType(
                serialized_name="commissionedState",
            )
            properties.custom_ip_prefix_parent = AAZObjectType(
                serialized_name="customIpPrefixParent",
            )
            _CreateHelper._build_schema_sub_resource_read(properties.custom_ip_prefix_parent)
            properties.express_route_advertise = AAZBoolType(
                serialized_name="expressRouteAdvertise",
            )
            properties.failed_reason = AAZStrType(
                serialized_name="failedReason",
                flags={"read_only": True},
            )
            properties.geo = AAZStrType()
            properties.no_internet_advertise = AAZBoolType(
                serialized_name="noInternetAdvertise",
            )
            properties.prefix_type = AAZStrType(
                serialized_name="prefixType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_ip_prefixes = AAZListType(
                serialized_name="publicIpPrefixes",
                flags={"read_only": True},
            )
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )
            properties.signed_message = AAZStrType(
                serialized_name="signedMessage",
            )

            child_custom_ip_prefixes = cls._schema_on_200_201.properties.child_custom_ip_prefixes
            child_custom_ip_prefixes.Element = AAZObjectType()
            _CreateHelper._build_schema_sub_resource_read(child_custom_ip_prefixes.Element)

            public_ip_prefixes = cls._schema_on_200_201.properties.public_ip_prefixes
            public_ip_prefixes.Element = AAZObjectType()
            _CreateHelper._build_schema_sub_resource_read(public_ip_prefixes.Element)

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200_201.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200_201


@register_command(
    "network custom-ip prefix delete",
)
class Delete(AAZCommand):
    """Delete a custom IP prefix resource.

    :example: Delete a custom IP prefix resource.
        az network custom-ip prefix delete --name MyCustomIpPrefix --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/customipprefixes/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the custom IP prefix.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.CustomIPPrefixesDelete(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class CustomIPPrefixesDelete(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [204]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_204,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "DELETE"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customIpPrefixName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        def on_200(self, session):
            pass

        def on_204(self, session):
            pass


@register_command(
    "network custom-ip prefix list",
)
class List(AAZCommand):
    """List custom IP prefix resources.

    :example: List custom IP prefix resources.
        az network custom-ip prefix list --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.network/customipprefixes", "2022-05-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/customipprefixes", "2022-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        condition_1 = has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        if condition_0:
            self.CustomIPPrefixesList(ctx=self.ctx)()
        if condition_1:
            self.CustomIPPrefixesListAll(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class CustomIPPrefixesList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _element.id = AAZStrType()
            _element.location = AAZStrType()
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )
            _element.zones = AAZListType()

            extended_location = cls._schema_on_200.value.Element.extended_location
            extended_location.name = AAZStrType()
            extended_location.type = AAZStrType()

            properties = cls._schema_on_200.value.Element.properties
            properties.asn = AAZStrType()
            properties.authorization_message = AAZStrType(
                serialized_name="authorizationMessage",
            )
            properties.child_custom_ip_prefixes = AAZListType(
                serialized_name="childCustomIpPrefixes",
                flags={"read_only": True},
            )
            properties.cidr = AAZStrType()
            properties.commissioned_state = AAZStrType(
                serialized_name="commissionedState",
            )
            properties.custom_ip_prefix_parent = AAZObjectType(
                serialized_name="customIpPrefixParent",
            )
            _ListHelper._build_schema_sub_resource_read(properties.custom_ip_prefix_parent)
            properties.express_route_advertise = AAZBoolType(
                serialized_name="expressRouteAdvertise",
            )
            properties.failed_reason = AAZStrType(
                serialized_name="failedReason",
                flags={"read_only": True},
            )
            properties.geo = AAZStrType()
            properties.no_internet_advertise = AAZBoolType(
                serialized_name="noInternetAdvertise",
            )
            properties.prefix_type = AAZStrType(
                serialized_name="prefixType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_ip_prefixes = AAZListType(
                serialized_name="publicIpPrefixes",
                flags={"read_only": True},
            )
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )
            properties.signed_message = AAZStrType(
                serialized_name="signedMessage",
            )

            child_custom_ip_prefixes = cls._schema_on_200.value.Element.properties.child_custom_ip_prefixes
            child_custom_ip_prefixes.Element = AAZObjectType()
            _ListHelper._build_schema_sub_resource_read(child_custom_ip_prefixes.Element)

            public_ip_prefixes = cls._schema_on_200.value.Element.properties.public_ip_prefixes
            public_ip_prefixes.Element = AAZObjectType()
            _ListHelper._build_schema_sub_resource_read(public_ip_prefixes.Element)

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200.value.Element.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200

    class CustomIPPrefixesListAll(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Network/customIpPrefixes",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _element.id = AAZStrType()
            _element.location = AAZStrType()
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )
            _element.zones = AAZListType()

            extended_location = cls._schema_on_200.value.Element.extended_location
            extended_location.name = AAZStrType()
            extended_location.type = AAZStrType()

            properties = cls._schema_on_200.value.Element.properties
            properties.asn = AAZStrType()
            properties.authorization_message = AAZStrType(
                serialized_name="authorizationMessage",
            )
            properties.child_custom_ip_prefixes = AAZListType(
                serialized_name="childCustomIpPrefixes",
                flags={"read_only": True},
            )
            properties.cidr = AAZStrType()
            properties.commissioned_state = AAZStrType(
                serialized_name="commissionedState",
            )
            properties.custom_ip_prefix_parent = AAZObjectType(
                serialized_name="customIpPrefixParent",
            )
            _ListHelper._build_schema_sub_resource_read(properties.custom_ip_prefix_parent)
            properties.express_route_advertise = AAZBoolType(
                serialized_name="expressRouteAdvertise",
            )
            properties.failed_reason = AAZStrType(
                serialized_name="failedReason",
                flags={"read_only": True},
            )
            properties.geo = AAZStrType()
            properties.no_internet_advertise = AAZBoolType(
                serialized_name="noInternetAdvertise",
            )
            properties.prefix_type = AAZStrType(
                serialized_name="prefixType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_ip_prefixes = AAZListType(
                serialized_name="publicIpPrefixes",
                flags={"read_only": True},
            )
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )
            properties.signed_message = AAZStrType(
                serialized_name="signedMessage",
            )

            child_custom_ip_prefixes = cls._schema_on_200.value.Element.properties.child_custom_ip_prefixes
            child_custom_ip_prefixes.Element = AAZObjectType()
            _ListHelper._build_schema_sub_resource_read(child_custom_ip_prefixes.Element)

            public_ip_prefixes = cls._schema_on_200.value.Element.properties.public_ip_prefixes
            public_ip_prefixes.Element = AAZObjectType()
            _ListHelper._build_schema_sub_resource_read(public_ip_prefixes.Element)

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200.value.Element.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200


@register_command(
    "network custom-ip prefix show",
)
class Show(AAZCommand):
    """Get the details of a custom IP prefix resource.

    :example: Get the details of a custom IP prefix resource.
        az network custom-ip prefix show --name MyCustomIpPrefix --resource-group MyResourceGroup --subscription MySubscription
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/customipprefixes/{}", "2022-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the custom IP prefix.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.expand = AAZStrArg(
            options=["--expand"],
            help="Expand referenced resources. Default value is None.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CustomIPPrefixesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CustomIPPrefixesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customIpPrefixName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$expand", self.ctx.args.expand,
                ),
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200.id = AAZStrType()
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.zones = AAZListType()

            extended_location = cls._schema_on_200.extended_location
            extended_location.name = AAZStrType()
            extended_location.type = AAZStrType()

            properties = cls._schema_on_200.properties
            properties.asn = AAZStrType()
            properties.authorization_message = AAZStrType(
                serialized_name="authorizationMessage",
            )
            properties.child_custom_ip_prefixes = AAZListType(
                serialized_name="childCustomIpPrefixes",
                flags={"read_only": True},
            )
            properties.cidr = AAZStrType()
            properties.commissioned_state = AAZStrType(
                serialized_name="commissionedState",
            )
            properties.custom_ip_prefix_parent = AAZObjectType(
                serialized_name="customIpPrefixParent",
            )
            _ShowHelper._build_schema_sub_resource_read(properties.custom_ip_prefix_parent)
            properties.express_route_advertise = AAZBoolType(
                serialized_name="expressRouteAdvertise",
            )
            properties.failed_reason = AAZStrType(
                serialized_name="failedReason",
                flags={"read_only": True},
            )
            properties.geo = AAZStrType()
            properties.no_internet_advertise = AAZBoolType(
                serialized_name="noInternetAdvertise",
            )
            properties.prefix_type = AAZStrType(
                serialized_name="prefixType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_ip_prefixes = AAZListType(
                serialized_name="publicIpPrefixes",
                flags={"read_only": True},
            )
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )
            properties.signed_message = AAZStrType(
                serialized_name="signedMessage",
            )

            child_custom_ip_prefixes = cls._schema_on_200.properties.child_custom_ip_prefixes
            child_custom_ip_prefixes.Element = AAZObjectType()
            _ShowHelper._build_schema_sub_resource_read(child_custom_ip_prefixes.Element)

            public_ip_prefixes = cls._schema_on_200.properties.public_ip_prefixes
            public_ip_prefixes.Element = AAZObjectType()
            _ShowHelper._build_schema_sub_resource_read(public_ip_prefixes.Element)

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200


@register_command(
    "network custom-ip prefix update",
)
class Update(AAZCommand):
    """Update a custom IP prefix resource.

    :example: Update a custom IP prefix resource.
        az network custom-ip prefix update --name MyCustomIpPrefix --resource-group MyResourceGroup --tags foo=bar
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/customipprefixes/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the custom IP prefix.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.authorization_message = AAZStrArg(
            options=["--authorization-message"],
            help="Authorization message for WAN validation.",
            nullable=True,
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            help="Commissioned State of the custom ip prefix.",
            nullable=True,
            enum={"Commissioned": "Commissioned", "CommissionedNoInternetAdvertise": "CommissionedNoInternetAdvertise", "Commissioning": "Commissioning", "Decommissioning": "Decommissioning", "Deprovisioned": "Deprovisioned", "Deprovisioning": "Deprovisioning", "Provisioned": "Provisioned", "Provisioning": "Provisioning"},
        )
        _args_schema.no_internet_advertise = AAZBoolArg(
            options=["--no-internet-advertise"],
            help="Whether to Advertise the range to Internet.",
            nullable=True,
        )
        _args_schema.signed_message = AAZStrArg(
            options=["--signed-message"],
            help="Signed message for WAN validation.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Space-separated tags: key[=value] [key[=value] ...].",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Parameters"

        # define Arg Group "Properties"
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CustomIPPrefixesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.CustomIPPrefixesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CustomIPPrefixesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customIpPrefixName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_custom_ip_prefix_read(cls._schema_on_200)

            return cls._schema_on_200

    class CustomIPPrefixesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customIpPrefixName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_custom_ip_prefix_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("authorizationMessage", AAZStrType, ".authorization_message")
                properties.set_prop("commissionedState", AAZStrType, ".state")
                properties.set_prop("noInternetAdvertise", AAZBoolType, ".no_internet_advertise")
                properties.set_prop("signedMessage", AAZStrType, ".signed_message")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


@register_command(
    "network custom-ip prefix wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/customipprefixes/{}", "2022-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the custom IP prefix.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.expand = AAZStrArg(
            options=["--expand"],
            help="Expand referenced resources. Default value is None.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CustomIPPrefixesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class CustomIPPrefixesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customIpPrefixName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$expand", self.ctx.args.expand,
                ),
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200.id = AAZStrType()
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.zones = AAZListType()

            extended_location = cls._schema_on_200.extended_location
            extended_location.name = AAZStrType()
            extended_location.type = AAZStrType()

            properties = cls._schema_on_200.properties
            properties.asn = AAZStrType()
            properties.authorization_message = AAZStrType(
                serialized_name="authorizationMessage",
            )
            properties.child_custom_ip_prefixes = AAZListType(
                serialized_name="childCustomIpPrefixes",
                flags={"read_only": True},
            )
            properties.cidr = AAZStrType()
            properties.commissioned_state = AAZStrType(
                serialized_name="commissionedState",
            )
            properties.custom_ip_prefix_parent = AAZObjectType(
                serialized_name="customIpPrefixParent",
            )
            _WaitHelper._build_schema_sub_resource_read(properties.custom_ip_prefix_parent)
            properties.express_route_advertise = AAZBoolType(
                serialized_name="expressRouteAdvertise",
            )
            properties.failed_reason = AAZStrType(
                serialized_name="failedReason",
                flags={"read_only": True},
            )
            properties.geo = AAZStrType()
            properties.no_internet_advertise = AAZBoolType(
                serialized_name="noInternetAdvertise",
            )
            properties.prefix_type = AAZStrType(
                serialized_name="prefixType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_ip_prefixes = AAZListType(
                serialized_name="publicIpPrefixes",
                flags={"read_only": True},
            )
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )
            properties.signed_message = AAZStrType(
                serialized_name="signedMessage",
            )

            child_custom_ip_prefixes = cls._schema_on_200.properties.child_custom_ip_prefixes
            child_custom_ip_prefixes.Element = AAZObjectType()
            _WaitHelper._build_schema_sub_resource_read(child_custom_ip_prefixes.Element)

            public_ip_prefixes = cls._schema_on_200.properties.public_ip_prefixes
            public_ip_prefixes.Element = AAZObjectType()
            _WaitHelper._build_schema_sub_resource_read(public_ip_prefixes.Element)

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200


class _Helper:

    @staticmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


@link_helper(
    __package__,
    ("_build_schema_sub_resource_read", _Helper),
)
class _CreateHelper:
    _schema_sub_resource_read = None



@link_helper(
    __package__,
    ("_build_schema_sub_resource_read", _Helper),
)
class _ListHelper:
    _schema_sub_resource_read = None



@link_helper(
    __package__,
    ("_build_schema_sub_resource_read", _Helper),
)
class _ShowHelper:
    _schema_sub_resource_read = None



@link_helper(
    __package__,
    ("_build_schema_sub_resource_read", _Helper),
)
class _UpdateHelper:
    _schema_custom_ip_prefix_read = None

    _schema_sub_resource_read = None


    @classmethod
    def _build_schema_custom_ip_prefix_read(cls, _schema):
        if cls._schema_custom_ip_prefix_read is not None:
            _schema.etag = cls._schema_custom_ip_prefix_read.etag
            _schema.extended_location = cls._schema_custom_ip_prefix_read.extended_location
            _schema.id = cls._schema_custom_ip_prefix_read.id
            _schema.location = cls._schema_custom_ip_prefix_read.location
            _schema.name = cls._schema_custom_ip_prefix_read.name
            _schema.properties = cls._schema_custom_ip_prefix_read.properties
            _schema.tags = cls._schema_custom_ip_prefix_read.tags
            _schema.type = cls._schema_custom_ip_prefix_read.type
            _schema.zones = cls._schema_custom_ip_prefix_read.zones
            return

        cls._schema_custom_ip_prefix_read = _schema_custom_ip_prefix_read = AAZObjectType()

        custom_ip_prefix_read = _schema_custom_ip_prefix_read
        custom_ip_prefix_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        custom_ip_prefix_read.extended_location = AAZObjectType(
            serialized_name="extendedLocation",
        )
        custom_ip_prefix_read.id = AAZStrType()
        custom_ip_prefix_read.location = AAZStrType()
        custom_ip_prefix_read.name = AAZStrType(
            flags={"read_only": True},
        )
        custom_ip_prefix_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        custom_ip_prefix_read.tags = AAZDictType()
        custom_ip_prefix_read.type = AAZStrType(
            flags={"read_only": True},
        )
        custom_ip_prefix_read.zones = AAZListType()

        extended_location = _schema_custom_ip_prefix_read.extended_location
        extended_location.name = AAZStrType()
        extended_location.type = AAZStrType()

        properties = _schema_custom_ip_prefix_read.properties
        properties.asn = AAZStrType()
        properties.authorization_message = AAZStrType(
            serialized_name="authorizationMessage",
        )
        properties.child_custom_ip_prefixes = AAZListType(
            serialized_name="childCustomIpPrefixes",
            flags={"read_only": True},
        )
        properties.cidr = AAZStrType()
        properties.commissioned_state = AAZStrType(
            serialized_name="commissionedState",
        )
        properties.custom_ip_prefix_parent = AAZObjectType(
            serialized_name="customIpPrefixParent",
        )
        cls._build_schema_sub_resource_read(properties.custom_ip_prefix_parent)
        properties.express_route_advertise = AAZBoolType(
            serialized_name="expressRouteAdvertise",
        )
        properties.failed_reason = AAZStrType(
            serialized_name="failedReason",
            flags={"read_only": True},
        )
        properties.geo = AAZStrType()
        properties.no_internet_advertise = AAZBoolType(
            serialized_name="noInternetAdvertise",
        )
        properties.prefix_type = AAZStrType(
            serialized_name="prefixType",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_ip_prefixes = AAZListType(
            serialized_name="publicIpPrefixes",
            flags={"read_only": True},
        )
        properties.resource_guid = AAZStrType(
            serialized_name="resourceGuid",
            flags={"read_only": True},
        )
        properties.signed_message = AAZStrType(
            serialized_name="signedMessage",
        )

        child_custom_ip_prefixes = _schema_custom_ip_prefix_read.properties.child_custom_ip_prefixes
        child_custom_ip_prefixes.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(child_custom_ip_prefixes.Element)

        public_ip_prefixes = _schema_custom_ip_prefix_read.properties.public_ip_prefixes
        public_ip_prefixes.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(public_ip_prefixes.Element)

        tags = _schema_custom_ip_prefix_read.tags
        tags.Element = AAZStrType()

        zones = _schema_custom_ip_prefix_read.zones
        zones.Element = AAZStrType()

        _schema.etag = cls._schema_custom_ip_prefix_read.etag
        _schema.extended_location = cls._schema_custom_ip_prefix_read.extended_location
        _schema.id = cls._schema_custom_ip_prefix_read.id
        _schema.location = cls._schema_custom_ip_prefix_read.location
        _schema.name = cls._schema_custom_ip_prefix_read.name
        _schema.properties = cls._schema_custom_ip_prefix_read.properties
        _schema.tags = cls._schema_custom_ip_prefix_read.tags
        _schema.type = cls._schema_custom_ip_prefix_read.type
        _schema.zones = cls._schema_custom_ip_prefix_read.zones


@link_helper(
    __package__,
    ("_build_schema_sub_resource_read", _Helper),
)
class _WaitHelper:
    _schema_sub_resource_read = None



__all__ = ["Create","Delete","List","Show","Update","Wait","__CMDGroup"]
