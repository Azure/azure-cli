# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor tenant-action-group notification-statu show",
)
class Show(AAZCommand):
    """Get the test notifications by the notification id
    """

    _aaz_info = {
        "version": "2023-05-01-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.management/managementgroups/{}/providers/microsoft.insights/tenantactiongroups/{}/notificationstatus/{}", "2023-05-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.x_ms_client_tenant_id = AAZStrArg(
            options=["--x-ms-client-tenant-id"],
            help="The tenant ID of the client making the request.",
            required=True,
        )
        _args_schema.management_group_id = AAZStrArg(
            options=["--management-group-id"],
            help="The management group id.",
            required=True,
        )
        _args_schema.notification_id = AAZStrArg(
            options=["--notification-id"],
            help="The notification id",
            required=True,
        )
        _args_schema.tenant_action_group_name = AAZStrArg(
            options=["--tenant-action-group-name"],
            help="The name of the action group.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z][A-Za-z0-9]*$",
                max_length=260,
                min_length=1,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.GetTestNotificationsAtTenantActionGroupResourceLevel(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class GetTestNotificationsAtTenantActionGroupResourceLevel(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}/notificationStatus/{notificationId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "managementGroupId", self.ctx.args.management_group_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "notificationId", self.ctx.args.notification_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "tenantActionGroupName", self.ctx.args.tenant_action_group_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "x-ms-client-tenant-id", self.ctx.args.x_ms_client_tenant_id,
                    required=True,
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.action_details = AAZListType(
                serialized_name="actionDetails",
            )
            _schema_on_200.completed_time = AAZStrType(
                serialized_name="completedTime",
            )
            _schema_on_200.context = AAZObjectType()
            _schema_on_200.created_time = AAZStrType(
                serialized_name="createdTime",
            )
            _schema_on_200.state = AAZStrType(
                flags={"required": True},
            )

            action_details = cls._schema_on_200.action_details
            action_details.Element = AAZObjectType()

            _element = cls._schema_on_200.action_details.Element
            _element.mechanism_type = AAZStrType(
                serialized_name="mechanismType",
            )
            _element.message = AAZStrType()
            _element.name = AAZStrType()
            _element.send_time = AAZStrType(
                serialized_name="sendTime",
            )
            _element.status = AAZStrType()
            _element.sub_state = AAZStrType(
                serialized_name="subState",
            )

            context = cls._schema_on_200.context
            context.context_type = AAZStrType(
                serialized_name="contextType",
            )
            context.notification_source = AAZStrType(
                serialized_name="notificationSource",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""


__all__ = ["Show"]
