# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.
    """

    _aaz_info = {
        "version": "2024-05-01",
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.authorization/policyassignments/{}", "2024-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the policy assignment.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[^<>*%&:\\?.+/]*[^<>*%&:\\?.+/ ]+$",
            ),
        )
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
            required=True,
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="The location of the policy assignment. Only required when utilizing managed identity.",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.assignment_type = AAZStrArg(
            options=["--assignment-type"],
            arg_group="Properties",
            help="The type of policy assignment. Possible values are NotSpecified, System, SystemHidden, and Custom. Immutable.",
            enum={"Custom": "Custom", "NotSpecified": "NotSpecified", "System": "System", "SystemHidden": "SystemHidden"},
        )
        _args_schema.definition_version = AAZStrArg(
            options=["--definition-version"],
            arg_group="Properties",
            help="The version of the policy definition to use.",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="This message will be part of response in case of policy violation.",
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The display name of the policy assignment.",
        )
        _args_schema.enforcement_mode = AAZStrArg(
            options=["-e", "--enforcement-mode"],
            arg_group="Properties",
            help="The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.",
            default="Default",
            enum={"Default": "Default", "DoNotEnforce": "DoNotEnforce"},
        )
        _args_schema.metadata = AAZDictArg(
            options=["--metadata"],
            arg_group="Properties",
            help="The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.",
        )
        _args_schema.non_compliance_messages = AAZListArg(
            options=["--non-compliance-messages"],
            arg_group="Properties",
            help="The messages that describe why a resource is non-compliant with the policy.",
        )
        _args_schema.not_scopes = AAZListArg(
            options=["--not-scopes"],
            arg_group="Properties",
            help="The policy's excluded scopes.",
        )
        _args_schema.overrides = AAZListArg(
            options=["--overrides"],
            arg_group="Properties",
            help="The policy property value override.",
        )
        _args_schema.params = AAZDictArg(
            options=["-p", "--params"],
            arg_group="Properties",
            help="The parameter values for the assigned policy rule. The keys are the parameter names.",
        )
        _args_schema.policy_set_definition = AAZStrArg(
            options=["-d", "--policy", "--policy-set-definition"],
            arg_group="Properties",
            help="The ID of the policy definition or policy set definition being assigned.",
        )
        _args_schema.resource_selectors = AAZListArg(
            options=["--resource-selectors"],
            arg_group="Properties",
            help="The resource selector list to filter policies by resource properties.",
        )

        metadata = cls._args_schema.metadata
        metadata.Element = AAZAnyTypeArg()

        non_compliance_messages = cls._args_schema.non_compliance_messages
        non_compliance_messages.Element = AAZObjectArg()

        _element = cls._args_schema.non_compliance_messages.Element
        _element.message = AAZStrArg(
            options=["message"],
            help="A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.",
            required=True,
        )
        _element.policy_definition_reference_id = AAZStrArg(
            options=["policy-definition-reference-id"],
            help="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.",
        )

        not_scopes = cls._args_schema.not_scopes
        not_scopes.Element = AAZStrArg()

        overrides = cls._args_schema.overrides
        overrides.Element = AAZObjectArg()

        _element = cls._args_schema.overrides.Element
        _element.kind = AAZStrArg(
            options=["kind"],
            help="The override kind.",
            enum={"definitionVersion": "definitionVersion", "policyEffect": "policyEffect"},
        )
        _element.selectors = AAZListArg(
            options=["selectors"],
            help="The list of the selector expressions.",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value to override the policy property.",
        )

        selectors = cls._args_schema.overrides.Element.selectors
        selectors.Element = AAZObjectArg()
        cls._build_args_selector_create(selectors.Element)

        params = cls._args_schema.params
        params.Element = AAZObjectArg()

        _element = cls._args_schema.params.Element
        _element.value = AAZDictArg(
            options=["value"],
            help="The value of the parameter.",
        )

        value = cls._args_schema.params.Element.value
        value.Element = AAZAnyTypeArg()

        resource_selectors = cls._args_schema.resource_selectors
        resource_selectors.Element = AAZObjectArg()

        _element = cls._args_schema.resource_selectors.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource selector.",
        )
        _element.selectors = AAZListArg(
            options=["selectors"],
            help="The list of the selector expressions.",
        )

        selectors = cls._args_schema.resource_selectors.Element.selectors
        selectors.Element = AAZObjectArg()
        cls._build_args_selector_create(selectors.Element)
        return cls._args_schema

    _args_selector_create = None

    @classmethod
    def _build_args_selector_create(cls, _schema):
        if cls._args_selector_create is not None:
            _schema.in_ = cls._args_selector_create.in_
            _schema.kind = cls._args_selector_create.kind
            _schema.not_in = cls._args_selector_create.not_in
            return

        cls._args_selector_create = AAZObjectArg()

        selector_create = cls._args_selector_create
        selector_create.in_ = AAZListArg(
            options=["in"],
            help="The list of values to filter in.",
        )
        selector_create.kind = AAZStrArg(
            options=["kind"],
            help="The selector kind.",
            enum={"policyDefinitionReferenceId": "policyDefinitionReferenceId", "resourceLocation": "resourceLocation", "resourceType": "resourceType", "resourceWithoutLocation": "resourceWithoutLocation"},
        )
        selector_create.not_in = AAZListArg(
            options=["not-in"],
            help="The list of values to filter out.",
        )

        in_ = cls._args_selector_create.in_
        in_.Element = AAZStrArg()

        not_in = cls._args_selector_create.not_in
        not_in.Element = AAZStrArg()

        _schema.in_ = cls._args_selector_create.in_
        _schema.kind = cls._args_selector_create.kind
        _schema.not_in = cls._args_selector_create.not_in

    def _execute_operations(self):
        self.pre_operations()
        self.PolicyAssignmentsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PolicyAssignmentsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [201]:
                return self.on_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyAssignmentName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("assignmentType", AAZStrType, ".assignment_type")
                properties.set_prop("definitionVersion", AAZStrType, ".definition_version")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("enforcementMode", AAZStrType, ".enforcement_mode")
                properties.set_prop("metadata", AAZDictType, ".metadata")
                properties.set_prop("nonComplianceMessages", AAZListType, ".non_compliance_messages")
                properties.set_prop("notScopes", AAZListType, ".not_scopes")
                properties.set_prop("overrides", AAZListType, ".overrides")
                properties.set_prop("parameters", AAZDictType, ".params")
                properties.set_prop("policyDefinitionId", AAZStrType, ".policy_set_definition")
                properties.set_prop("resourceSelectors", AAZListType, ".resource_selectors")

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_elements(AAZAnyType, ".")

            non_compliance_messages = _builder.get(".properties.nonComplianceMessages")
            if non_compliance_messages is not None:
                non_compliance_messages.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.nonComplianceMessages[]")
            if _elements is not None:
                _elements.set_prop("message", AAZStrType, ".message", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("policyDefinitionReferenceId", AAZStrType, ".policy_definition_reference_id")

            not_scopes = _builder.get(".properties.notScopes")
            if not_scopes is not None:
                not_scopes.set_elements(AAZStrType, ".")

            overrides = _builder.get(".properties.overrides")
            if overrides is not None:
                overrides.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.overrides[]")
            if _elements is not None:
                _elements.set_prop("kind", AAZStrType, ".kind")
                _elements.set_prop("selectors", AAZListType, ".selectors")
                _elements.set_prop("value", AAZStrType, ".value")

            selectors = _builder.get(".properties.overrides[].selectors")
            if selectors is not None:
                _CreateHelper._build_schema_selector_create(selectors.set_elements(AAZObjectType, "."))

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                parameters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.parameters{}")
            if _elements is not None:
                _elements.set_prop("value", AAZDictType, ".value")

            value = _builder.get(".properties.parameters{}.value")
            if value is not None:
                value.set_elements(AAZAnyType, ".")

            resource_selectors = _builder.get(".properties.resourceSelectors")
            if resource_selectors is not None:
                resource_selectors.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSelectors[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("selectors", AAZListType, ".selectors")

            selectors = _builder.get(".properties.resourceSelectors[].selectors")
            if selectors is not None:
                _CreateHelper._build_schema_selector_create(selectors.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_201
            )

        _schema_on_201 = None

        @classmethod
        def _build_schema_on_201(cls):
            if cls._schema_on_201 is not None:
                return cls._schema_on_201

            cls._schema_on_201 = AAZObjectType()

            _schema_on_201 = cls._schema_on_201
            _schema_on_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_201.identity = AAZIdentityObjectType()
            _schema_on_201.location = AAZStrType()
            _schema_on_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType()
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_201.properties
            properties.assignment_type = AAZStrType(
                serialized_name="assignmentType",
            )
            properties.definition_version = AAZStrType(
                serialized_name="definitionVersion",
            )
            properties.description = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.effective_definition_version = AAZStrType(
                serialized_name="effectiveDefinitionVersion",
                flags={"read_only": True},
            )
            properties.enforcement_mode = AAZStrType(
                serialized_name="enforcementMode",
            )
            properties.latest_definition_version = AAZStrType(
                serialized_name="latestDefinitionVersion",
                flags={"read_only": True},
            )
            properties.metadata = AAZDictType()
            properties.non_compliance_messages = AAZListType(
                serialized_name="nonComplianceMessages",
            )
            properties.not_scopes = AAZListType(
                serialized_name="notScopes",
            )
            properties.overrides = AAZListType()
            properties.parameters = AAZDictType()
            properties.policy_definition_id = AAZStrType(
                serialized_name="policyDefinitionId",
            )
            properties.resource_selectors = AAZListType(
                serialized_name="resourceSelectors",
            )
            properties.scope = AAZStrType(
                flags={"read_only": True},
            )

            metadata = cls._schema_on_201.properties.metadata
            metadata.Element = AAZAnyType()

            non_compliance_messages = cls._schema_on_201.properties.non_compliance_messages
            non_compliance_messages.Element = AAZObjectType()

            _element = cls._schema_on_201.properties.non_compliance_messages.Element
            _element.message = AAZStrType(
                flags={"required": True},
            )
            _element.policy_definition_reference_id = AAZStrType(
                serialized_name="policyDefinitionReferenceId",
            )

            not_scopes = cls._schema_on_201.properties.not_scopes
            not_scopes.Element = AAZStrType()

            overrides = cls._schema_on_201.properties.overrides
            overrides.Element = AAZObjectType()

            _element = cls._schema_on_201.properties.overrides.Element
            _element.kind = AAZStrType()
            _element.selectors = AAZListType()
            _element.value = AAZStrType()

            selectors = cls._schema_on_201.properties.overrides.Element.selectors
            selectors.Element = AAZObjectType()
            _CreateHelper._build_schema_selector_read(selectors.Element)

            parameters = cls._schema_on_201.properties.parameters
            parameters.Element = AAZObjectType()

            _element = cls._schema_on_201.properties.parameters.Element
            _element.value = AAZDictType()

            value = cls._schema_on_201.properties.parameters.Element.value
            value.Element = AAZAnyType()

            resource_selectors = cls._schema_on_201.properties.resource_selectors
            resource_selectors.Element = AAZObjectType()

            _element = cls._schema_on_201.properties.resource_selectors.Element
            _element.name = AAZStrType()
            _element.selectors = AAZListType()

            selectors = cls._schema_on_201.properties.resource_selectors.Element.selectors
            selectors.Element = AAZObjectType()
            _CreateHelper._build_schema_selector_read(selectors.Element)

            system_data = cls._schema_on_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_selector_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("in", AAZListType, ".in_")
        _builder.set_prop("kind", AAZStrType, ".kind")
        _builder.set_prop("notIn", AAZListType, ".not_in")

        in_ = _builder.get(".in")
        if in_ is not None:
            in_.set_elements(AAZStrType, ".")

        not_in = _builder.get(".notIn")
        if not_in is not None:
            not_in.set_elements(AAZStrType, ".")

    _schema_selector_read = None

    @classmethod
    def _build_schema_selector_read(cls, _schema):
        if cls._schema_selector_read is not None:
            _schema["in"] = cls._schema_selector_read["in"]
            _schema.kind = cls._schema_selector_read.kind
            _schema.not_in = cls._schema_selector_read.not_in
            return

        cls._schema_selector_read = _schema_selector_read = AAZObjectType()

        selector_read = _schema_selector_read
        selector_read["in"] = AAZListType()
        selector_read.kind = AAZStrType()
        selector_read.not_in = AAZListType(
            serialized_name="notIn",
        )

        in_ = _schema_selector_read["in"]
        in_.Element = AAZStrType()

        not_in = _schema_selector_read.not_in
        not_in.Element = AAZStrType()

        _schema["in"] = cls._schema_selector_read["in"]
        _schema.kind = cls._schema_selector_read.kind
        _schema.not_in = cls._schema_selector_read.not_in


__all__ = ["Create"]
