# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network watcher connection-monitor endpoint add",
    is_preview=True,
)
class Add(AAZCommand):
    """Create a connection monitor endpoint object.

    :example: Create an external address as a destination endpoint
        az network watcher connection-monitor endpoint create --name Google --type ExternalAddress --address google.com

    :example: Add an Azure VM as a source endpoint
        az network watcher connection-monitor endpoint create --name MyVm --type AzureVM --resource-id MyResourceId

    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/connectionmonitors/{}", "2022-01-01", "properties.endpoints[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.InstanceCreateByJson(ctx=self.ctx)()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address = AAZStrArg(
            options=["--address"],
            help="Address of the connection monitor endpoint (IP or domain name).",
        )
        _args_schema.coverage_level = AAZStrArg(
            options=["--coverage-level"],
            help="Test coverage for the endpoint. Allowed values: AboveAverage, Average, BelowAverage, Default, Full, Low",
            enum={"AboveAverage": "AboveAverage", "Average": "Average", "BelowAverage": "BelowAverage", "Default": "Default", "Full": "Full", "Low": "Low"},
        )
        _args_schema.endpoint_name = AAZStrArg(
            options=["-n", "--name", "--endpoint-name"],
            help="The name of the connection monitor endpoint.",
            required=True,
        )
        _args_schema.resource_id = AAZStrArg(
            options=["--resource-id"],
            help="Resource ID of the connection monitor endpoint.",
        )
        _args_schema.scope_exclude = AAZListArg(
            options=["--scope-exclude"],
            help="List of items which needs to be excluded from the endpoint scope.",
        )
        _args_schema.scope_include = AAZListArg(
            options=["--scope-include"],
            help="List of items which needs to be included to the endpoint scope.",
        )
        _args_schema.type = AAZStrArg(
            options=["--type"],
            help="The endpoint type.  Allowed values: AzureArcVM, AzureSubnet, AzureVM, AzureVMSS, AzureVNet, ExternalAddress, MMAWorkspaceMachine, MMAWorkspaceNetwork.",
            enum={"AzureArcVM": "AzureArcVM", "AzureSubnet": "AzureSubnet", "AzureVM": "AzureVM", "AzureVMSS": "AzureVMSS", "AzureVNet": "AzureVNet", "ExternalAddress": "ExternalAddress", "MMAWorkspaceMachine": "MMAWorkspaceMachine", "MMAWorkspaceNetwork": "MMAWorkspaceNetwork"},
        )

        scope_exclude = cls._args_schema.scope_exclude
        scope_exclude.Element = AAZObjectArg()

        _element = cls._args_schema.scope_exclude.Element
        _element.address = AAZStrArg(
            options=["address"],
            help="The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.",
        )

        scope_include = cls._args_schema.scope_include
        scope_include.Element = AAZObjectArg()

        _element = cls._args_schema.scope_include.Element
        _element.address = AAZStrArg(
            options=["address"],
            help="The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.",
        )
        return cls._args_schema

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
           return self._create_instance()

        def clean_dict(self, d):
            clean = {}
            for k, v in d.items():
                if isinstance(v, dict):
                    v = self.clean_dict(v)
                    if not any(v.values()):  # if all values in the dictionary are considered "empty", skip this key-value pair
                        continue
                elif isinstance(v, str):
                    v = v.strip()
                if v not in [None, 'Undefined', {}, '']:
                    clean[k] = v
            return clean

        def _create_instance(self):
            data = {
                "name": str(self.ctx.args.endpoint_name),
                "address": str(self.ctx.args.address),
                "coverageLevel": str(self.ctx.args.coverage_level),
                "resourceId": str(self.ctx.args.resource_id),
                "type": str(self.ctx.args.type),
                "scope": {}
            }

           # Populate scope
            if hasattr(self.ctx.args, "scope_exclude") and self.ctx.args.scope_exclude:
                data["scope"]["exclude"] = []
                scope_exclude = getattr(self.ctx.args, "scope_exclude", [])
                for exclude_item in scope_exclude:
                        data["scope"]["exclude"].append({
                           "address": exclude_item['address']})

            if hasattr(self.ctx.args, "scope_include") and self.ctx.args.scope_include:
                data["scope"]["include"] = []
                scope_include = getattr(self.ctx.args, "scope_include", [])
                for include_item in scope_include:
                        data["scope"]["include"].append({
                            "address": include_item['address']})

            #It keeps a key-value pair if: The value v is not None.The value v is not the string 'Undefined'.The value v is not an empty dictionary.
            #data = {k: v for k, v in data.items() if v is not None and v != 'Undefined' and (not isinstance(v, dict) or any(v.values()))}
            data = self.clean_dict(data)
            data_str = str(data)
            data_str = data_str.replace(" ", "")

            return data_str


__all__ = ["Add"]
