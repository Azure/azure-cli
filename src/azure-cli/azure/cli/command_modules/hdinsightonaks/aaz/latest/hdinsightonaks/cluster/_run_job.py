# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "hdinsightonaks cluster run-job",
    is_preview=True,
)
class RunJob(AAZCommand):
    """Operations on jobs of HDInsight on AKS cluster.
    """

    _aaz_info = {
        "version": "2023-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}/runjob", "2023-06-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            help="The name of the HDInsight cluster.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.cluster_pool_name = AAZStrArg(
            options=["--cluster-pool-name"],
            help="The name of the cluster pool.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.flink_job = AAZObjectArg(
            options=["--flink-job"],
            arg_group="Properties",
        )

        flink_job = cls._args_schema.flink_job
        flink_job.action = AAZStrArg(
            options=["action"],
            help="A string property that indicates the action to be performed on the Flink job. It can have one of the following enum values => NEW, UPDATE, STATELESS_UPDATE, STOP, START, CANCEL, SAVEPOINT, LIST_SAVEPOINT, or DELETE.",
            enum={"CANCEL": "CANCEL", "DELETE": "DELETE", "LIST_SAVEPOINT": "LIST_SAVEPOINT", "NEW": "NEW", "SAVEPOINT": "SAVEPOINT", "START": "START", "STATELESS_UPDATE": "STATELESS_UPDATE", "STOP": "STOP", "UPDATE": "UPDATE"},
        )
        flink_job.args = AAZStrArg(
            options=["args"],
            help="A string property representing additional JVM arguments for the Flink job. It should be space separated value.",
        )
        flink_job.entry_class = AAZStrArg(
            options=["entry-class"],
            help="A string property that specifies the entry class for the Flink job.",
        )
        flink_job.flink_configuration = AAZDictArg(
            options=["flink-configuration"],
            help="Additional properties used to configure Flink jobs. It allows users to set properties such as parallelism and jobSavePointDirectory. It accepts additional key-value pairs as properties, where the keys are strings and the values are strings as well.",
        )
        flink_job.jar_name = AAZStrArg(
            options=["jar-name"],
            help="A string property that represents the name of the job JAR.",
        )
        flink_job.type = AAZStrArg(
            options=["type"],
            help="A string property that run job type",
        )
        flink_job.job_jar_directory = AAZStrArg(
            options=["job-jar-directory"],
            help="A string property that specifies the directory where the job JAR is located.",
        )
        flink_job.job_name = AAZStrArg(
            options=["job-name"],
            help="Name of job",
            required=True,
        )
        flink_job.save_point_name = AAZStrArg(
            options=["save-point-name"],
            help="A string property that represents the name of the savepoint for the Flink job",
        )

        flink_configuration = cls._args_schema.flink_job.flink_configuration
        flink_configuration.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ClusterJobsRunJob(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ClusterJobsRunJob(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}/runJob",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "clusterPoolName", self.ctx.args.cluster_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_const("jobType", "FlinkJob", AAZStrType, ".flink_job", typ_kwargs={"flags": {"required": True}})
                properties.discriminate_by("jobType", "FlinkJob")

            disc_flink_job = _builder.get(".properties{jobType:FlinkJob}")
            if disc_flink_job is not None:
                disc_flink_job.set_prop("action", AAZStrType, ".flink_job.action")
                disc_flink_job.set_prop("args", AAZStrType, ".flink_job.args")
                disc_flink_job.set_prop("entryClass", AAZStrType, ".flink_job.entry_class")
                disc_flink_job.set_prop("flinkConfiguration", AAZDictType, ".flink_job.flink_configuration")
                disc_flink_job.set_prop("jarName", AAZStrType, ".flink_job.jar_name")
                disc_flink_job.set_prop("jobJarDirectory", AAZStrType, ".flink_job.job_jar_directory")
                disc_flink_job.set_prop("jobName", AAZStrType, ".flink_job.job_name", typ_kwargs={"flags": {"required": True}})
                disc_flink_job.set_prop("savePointName", AAZStrType, ".flink_job.save_point_name")

            flink_configuration = _builder.get(".properties{jobType:FlinkJob}.flinkConfiguration")
            if flink_configuration is not None:
                flink_configuration.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.job_type = AAZStrType(
                serialized_name="jobType",
                flags={"required": True},
            )

            disc_flink_job = cls._schema_on_200.properties.discriminate_by("job_type", "FlinkJob")
            disc_flink_job.action = AAZStrType()
            disc_flink_job.action_result = AAZStrType(
                serialized_name="actionResult",
                flags={"read_only": True},
            )
            disc_flink_job.args = AAZStrType()
            disc_flink_job.entry_class = AAZStrType(
                serialized_name="entryClass",
            )
            disc_flink_job.flink_configuration = AAZDictType(
                serialized_name="flinkConfiguration",
            )
            disc_flink_job.jar_name = AAZStrType(
                serialized_name="jarName",
            )
            disc_flink_job.job_id = AAZStrType(
                serialized_name="jobId",
                flags={"read_only": True},
            )
            disc_flink_job.job_jar_directory = AAZStrType(
                serialized_name="jobJarDirectory",
            )
            disc_flink_job.job_name = AAZStrType(
                serialized_name="jobName",
                flags={"required": True},
            )
            disc_flink_job.job_output = AAZStrType(
                serialized_name="jobOutput",
                flags={"read_only": True},
            )
            disc_flink_job.last_save_point = AAZStrType(
                serialized_name="lastSavePoint",
                flags={"read_only": True},
            )
            disc_flink_job.save_point_name = AAZStrType(
                serialized_name="savePointName",
            )
            disc_flink_job.status = AAZStrType(
                flags={"read_only": True},
            )

            flink_configuration = cls._schema_on_200.properties.discriminate_by("job_type", "FlinkJob").flink_configuration
            flink_configuration.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _RunJobHelper:
    """Helper class for RunJob"""


__all__ = ["RunJob"]
