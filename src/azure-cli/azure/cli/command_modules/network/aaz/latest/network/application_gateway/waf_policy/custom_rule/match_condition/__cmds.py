# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network application-gateway waf-policy custom-rule match-condition",
)
class __CMDGroup(AAZCommandGroup):
    """Manage match conditions in an application gateway web application firewall (WAF) policy custom rule.
    """
    pass


@register_command(
    "network application-gateway waf-policy custom-rule match-condition add",
)
class Add(AAZCommand):
    """Add a match condition to an application gateway WAF policy custom rule.

    :example: Add application gateway WAF policy custom rule match condition with contains.
        az network application-gateway waf-policy custom-rule match-condition add --resource-group MyResourceGroup --policy-name MyPolicy --name MyWAFPolicyRule --match-variables RequestHeaders.value --operator contains --values foo boo --transform lowercase

    :example: Add application gateway WAF policy custom rule match condition with equal.
        az network application-gateway waf-policy custom-rule match-condition add --resource-group MyResourceGroup --policy-name MyPolicy --name MyWAFPolicyRule --match-variables RequestHeaders.Content-Type --operator Equal --values application/csp-report
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[].matchConditions[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.index = AAZIntArg(
            options=["--index"],
            help="Index of match condition. If no index is provided, the default behavior is `append`.",
        )
        _args_schema.values = AAZListArg(
            options=["--values"],
            help="Space-separated list of values to match.",
        )
        _args_schema.variables = AAZListArg(
            options=["--variables"],
            help="Space-separated list of variables to use when matching. Variable values: RemoteAddr, RequestMethod, QueryString, PostArgs, RequestUri, RequestHeaders, RequestBody, RequestCookies.",
            required=True,
        )
        _args_schema.negate = AAZBoolArg(
            options=["--negate"],
            help="Match the negative of the condition.",
        )
        _args_schema.operator = AAZStrArg(
            options=["--operator"],
            help="Operator for matching.",
            required=True,
            enum={"Any": "Any", "BeginsWith": "BeginsWith", "Contains": "Contains", "EndsWith": "EndsWith", "Equal": "Equal", "GeoMatch": "GeoMatch", "GreaterThan": "GreaterThan", "GreaterThanOrEqual": "GreaterThanOrEqual", "IPMatch": "IPMatch", "LessThan": "LessThan", "LessThanOrEqual": "LessThanOrEqual", "Regex": "Regex"},
        )
        _args_schema.transforms = AAZListArg(
            options=["--transforms"],
            help="Space-separated list of transforms to apply when matching. Allowed values: HtmlEntityDecode, Uppercase, Lowercase, RemoveNulls, Trim, UrlDecode, UrlEncode.",
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )

        values = cls._args_schema.values
        values.Element = AAZStrArg()

        variables = cls._args_schema.variables
        variables.Element = AAZObjectArg()

        _element = cls._args_schema.variables.Element
        _element.selector = AAZStrArg(
            options=["selector"],
            help="The selector of match variable.",
        )
        _element.variable_name = AAZStrArg(
            options=["variable-name"],
            help="Match Variable.",
            required=True,
            enum={"PostArgs": "PostArgs", "QueryString": "QueryString", "RemoteAddr": "RemoteAddr", "RequestBody": "RequestBody", "RequestCookies": "RequestCookies", "RequestHeaders": "RequestHeaders", "RequestMethod": "RequestMethod", "RequestUri": "RequestUri"},
        )

        transforms = cls._args_schema.transforms
        transforms.Element = AAZStrArg(
            enum={"HtmlEntityDecode": "HtmlEntityDecode", "Lowercase": "Lowercase", "RemoveNulls": "RemoveNulls", "Trim": "Trim", "Uppercase": "Uppercase", "UrlDecode": "UrlDecode", "UrlEncode": "UrlEncode"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        self.WebApplicationFirewallPoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.matchConditions
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.matchConditions
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.index = idx
            result[idx] = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AddHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class WebApplicationFirewallPoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _AddHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("matchValues", AAZListType, ".values")
            _builder.set_prop("matchVariables", AAZListType, ".variables", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("negationConditon", AAZBoolType, ".negate")
            _builder.set_prop("operator", AAZStrType, ".operator", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("transforms", AAZListType, ".transforms")

            match_values = _builder.get(".matchValues")
            if match_values is not None:
                match_values.set_elements(AAZStrType, ".")

            match_variables = _builder.get(".matchVariables")
            if match_variables is not None:
                match_variables.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".matchVariables[]")
            if _elements is not None:
                _elements.set_prop("selector", AAZStrType, ".selector")
                _elements.set_prop("variableName", AAZStrType, ".variable_name", typ_kwargs={"flags": {"required": True}})

            transforms = _builder.get(".transforms")
            if transforms is not None:
                transforms.set_elements(AAZStrType, ".")

            return _instance_value


@register_command(
    "network application-gateway waf-policy custom-rule match-condition list",
)
class List(AAZCommand):
    """List application gateway WAF policy custom rule match conditions.

    :example: List application gateway WAF policy custom rule match conditions.
        az network application-gateway waf-policy custom-rule match-condition list --name MyWAFPolicyRule --policy-name MyPolicy --resource-group MyResourceGroup --subscription MySubscription
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[].matchConditions"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            return result.matchConditions

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result.matchConditions = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ListHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway waf-policy custom-rule match-condition remove",
)
class Remove(AAZCommand):
    """Remove a match condition from an application gateway WAF policy custom rule.

    :example: Remove a match condition from an application gateway WAF policy custom rule.
        az network application-gateway waf-policy custom-rule match-condition remove -n MyRule -g MyResourceGroup --policy-name MyPolicy --index 0
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgatewaywebapplicationfirewallpolicies/{}", "2022-05-01", "properties.customRules[].matchConditions[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="Name of the application gateway WAF policy.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.index = AAZIntArg(
            options=["--index"],
            help="Index of the match condition to remove.",
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the WAF policy rule.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WebApplicationFirewallPoliciesGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        self.WebApplicationFirewallPoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.matchConditions
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.customRules
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.matchConditions
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.index = idx
            result[idx] = value
            return

    class WebApplicationFirewallPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _RemoveHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class WebApplicationFirewallPoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _RemoveHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "....__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "....__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "....__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "....__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "....__cmds"),
    ("_build_schema_application_security_group_read", "....__cmds"),
    ("_build_schema_extended_location_read", "....__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "....__cmds"),
    ("_build_schema_ip_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_read", "....__cmds"),
    ("_build_schema_network_security_group_read", "....__cmds"),
    ("_build_schema_private_endpoint_read", "....__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "....__cmds"),
    ("_build_schema_private_link_service_connection_read", "....__cmds"),
    ("_build_schema_public_ip_address_read", "....__cmds"),
    ("_build_schema_security_rule_read", "....__cmds"),
    ("_build_schema_sub_resource_read", "....__cmds"),
    ("_build_schema_subnet_read", "....__cmds"),
    ("_build_schema_virtual_network_tap_read", "....__cmds"),
    ("_build_schema_web_application_firewall_policy_read", "..__cmds"),
)
class _AddHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "....__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "....__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "....__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "....__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "....__cmds"),
    ("_build_schema_application_security_group_read", "....__cmds"),
    ("_build_schema_extended_location_read", "....__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "....__cmds"),
    ("_build_schema_ip_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_read", "....__cmds"),
    ("_build_schema_network_security_group_read", "....__cmds"),
    ("_build_schema_private_endpoint_read", "....__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "....__cmds"),
    ("_build_schema_private_link_service_connection_read", "....__cmds"),
    ("_build_schema_public_ip_address_read", "....__cmds"),
    ("_build_schema_security_rule_read", "....__cmds"),
    ("_build_schema_sub_resource_read", "....__cmds"),
    ("_build_schema_subnet_read", "....__cmds"),
    ("_build_schema_virtual_network_tap_read", "....__cmds"),
    ("_build_schema_web_application_firewall_policy_read", "..__cmds"),
)
class _ListHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "....__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "....__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "....__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "....__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "....__cmds"),
    ("_build_schema_application_security_group_read", "....__cmds"),
    ("_build_schema_extended_location_read", "....__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "....__cmds"),
    ("_build_schema_ip_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "....__cmds"),
    ("_build_schema_network_interface_read", "....__cmds"),
    ("_build_schema_network_security_group_read", "....__cmds"),
    ("_build_schema_private_endpoint_read", "....__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "....__cmds"),
    ("_build_schema_private_link_service_connection_read", "....__cmds"),
    ("_build_schema_public_ip_address_read", "....__cmds"),
    ("_build_schema_security_rule_read", "....__cmds"),
    ("_build_schema_sub_resource_read", "....__cmds"),
    ("_build_schema_subnet_read", "....__cmds"),
    ("_build_schema_virtual_network_tap_read", "....__cmds"),
    ("_build_schema_web_application_firewall_policy_read", "..__cmds"),
)
class _RemoveHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None

    _schema_web_application_firewall_policy_read = None



__all__ = ["Add","List","Remove","__CMDGroup"]
