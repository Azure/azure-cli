# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "elastic monitor monitored-subscription update",
)
class Update(AAZCommand):
    """Update the subscriptions that should be monitored by the Elastic monitor resource.
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.elastic/monitors/{}/monitoredsubscriptions/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.configuration_name = AAZStrArg(
            options=["-n", "--name", "--configuration-name"],
            help="The configuration name. Only 'default' value is supported.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Monitor resource name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.monitored_subscription_list = AAZListArg(
            options=["--monitored-subscription-list"],
            arg_group="Properties",
            help="List of subscriptions and the state of the monitoring.",
            nullable=True,
        )
        _args_schema.operation = AAZStrArg(
            options=["--operation"],
            arg_group="Properties",
            help="The operation for the patch on the resource.",
            nullable=True,
            enum={"Active": "Active", "AddBegin": "AddBegin", "AddComplete": "AddComplete", "DeleteBegin": "DeleteBegin", "DeleteComplete": "DeleteComplete"},
        )

        monitored_subscription_list = cls._args_schema.monitored_subscription_list
        monitored_subscription_list.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.monitored_subscription_list.Element
        _element.error = AAZStrArg(
            options=["error"],
            help="The reason of not monitoring the subscription.",
            nullable=True,
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="The state of monitoring.",
            nullable=True,
            enum={"Active": "Active", "Deleting": "Deleting", "Failed": "Failed", "InProgress": "InProgress"},
        )
        _element.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="The subscriptionId to be monitored.",
            nullable=True,
        )
        _element.tag_rules = AAZObjectArg(
            options=["tag-rules"],
            help="Definition of the properties for a TagRules resource.",
            nullable=True,
        )

        tag_rules = cls._args_schema.monitored_subscription_list.Element.tag_rules
        tag_rules.log_rules = AAZObjectArg(
            options=["log-rules"],
            help="Rules for sending logs.",
            nullable=True,
        )

        log_rules = cls._args_schema.monitored_subscription_list.Element.tag_rules.log_rules
        log_rules.filtering_tags = AAZListArg(
            options=["filtering-tags"],
            help="List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.",
            nullable=True,
        )
        log_rules.send_aad_logs = AAZBoolArg(
            options=["send-aad-logs"],
            help="Flag specifying if AAD logs should be sent for the Monitor resource.",
            nullable=True,
        )
        log_rules.send_activity_logs = AAZBoolArg(
            options=["send-activity-logs"],
            help="Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.",
            nullable=True,
        )
        log_rules.send_subscription_logs = AAZBoolArg(
            options=["send-subscription-logs"],
            help="Flag specifying if subscription logs should be sent for the Monitor resource.",
            nullable=True,
        )

        filtering_tags = cls._args_schema.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags
        filtering_tags.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="Valid actions for a filtering tag.",
            nullable=True,
            enum={"Exclude": "Exclude", "Include": "Include"},
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name (also known as the key) of the tag.",
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value of the tag.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MonitoredSubscriptionsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.MonitoredSubscriptionsCreateorUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitoredSubscriptionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_monitored_subscription_properties_read(cls._schema_on_200)

            return cls._schema_on_200

    class MonitoredSubscriptionsCreateorUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_monitored_subscription_properties_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("monitoredSubscriptionList", AAZListType, ".monitored_subscription_list")
                properties.set_prop("operation", AAZStrType, ".operation")

            monitored_subscription_list = _builder.get(".properties.monitoredSubscriptionList")
            if monitored_subscription_list is not None:
                monitored_subscription_list.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.monitoredSubscriptionList[]")
            if _elements is not None:
                _elements.set_prop("error", AAZStrType, ".error")
                _elements.set_prop("status", AAZStrType, ".status")
                _elements.set_prop("subscriptionId", AAZStrType, ".subscription_id")
                _elements.set_prop("tagRules", AAZObjectType, ".tag_rules")

            tag_rules = _builder.get(".properties.monitoredSubscriptionList[].tagRules")
            if tag_rules is not None:
                tag_rules.set_prop("logRules", AAZObjectType, ".log_rules")

            log_rules = _builder.get(".properties.monitoredSubscriptionList[].tagRules.logRules")
            if log_rules is not None:
                log_rules.set_prop("filteringTags", AAZListType, ".filtering_tags")
                log_rules.set_prop("sendAadLogs", AAZBoolType, ".send_aad_logs")
                log_rules.set_prop("sendActivityLogs", AAZBoolType, ".send_activity_logs")
                log_rules.set_prop("sendSubscriptionLogs", AAZBoolType, ".send_subscription_logs")

            filtering_tags = _builder.get(".properties.monitoredSubscriptionList[].tagRules.logRules.filteringTags")
            if filtering_tags is not None:
                filtering_tags.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.monitoredSubscriptionList[].tagRules.logRules.filteringTags[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_monitored_subscription_properties_read = None

    @classmethod
    def _build_schema_monitored_subscription_properties_read(cls, _schema):
        if cls._schema_monitored_subscription_properties_read is not None:
            _schema.id = cls._schema_monitored_subscription_properties_read.id
            _schema.name = cls._schema_monitored_subscription_properties_read.name
            _schema.properties = cls._schema_monitored_subscription_properties_read.properties
            _schema.type = cls._schema_monitored_subscription_properties_read.type
            return

        cls._schema_monitored_subscription_properties_read = _schema_monitored_subscription_properties_read = AAZObjectType()

        monitored_subscription_properties_read = _schema_monitored_subscription_properties_read
        monitored_subscription_properties_read.id = AAZStrType(
            flags={"read_only": True},
        )
        monitored_subscription_properties_read.name = AAZStrType(
            flags={"read_only": True},
        )
        monitored_subscription_properties_read.properties = AAZObjectType()
        monitored_subscription_properties_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_monitored_subscription_properties_read.properties
        properties.monitored_subscription_list = AAZListType(
            serialized_name="monitoredSubscriptionList",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        monitored_subscription_list = _schema_monitored_subscription_properties_read.properties.monitored_subscription_list
        monitored_subscription_list.Element = AAZObjectType()

        _element = _schema_monitored_subscription_properties_read.properties.monitored_subscription_list.Element
        _element.error = AAZStrType()
        _element.status = AAZStrType()
        _element.subscription_id = AAZStrType(
            serialized_name="subscriptionId",
        )
        _element.tag_rules = AAZObjectType(
            serialized_name="tagRules",
        )

        tag_rules = _schema_monitored_subscription_properties_read.properties.monitored_subscription_list.Element.tag_rules
        tag_rules.log_rules = AAZObjectType(
            serialized_name="logRules",
        )
        tag_rules.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        log_rules = _schema_monitored_subscription_properties_read.properties.monitored_subscription_list.Element.tag_rules.log_rules
        log_rules.filtering_tags = AAZListType(
            serialized_name="filteringTags",
        )
        log_rules.send_aad_logs = AAZBoolType(
            serialized_name="sendAadLogs",
        )
        log_rules.send_activity_logs = AAZBoolType(
            serialized_name="sendActivityLogs",
        )
        log_rules.send_subscription_logs = AAZBoolType(
            serialized_name="sendSubscriptionLogs",
        )

        filtering_tags = _schema_monitored_subscription_properties_read.properties.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags
        filtering_tags.Element = AAZObjectType()

        _element = _schema_monitored_subscription_properties_read.properties.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags.Element
        _element.action = AAZStrType()
        _element.name = AAZStrType()
        _element.value = AAZStrType()

        _schema.id = cls._schema_monitored_subscription_properties_read.id
        _schema.name = cls._schema_monitored_subscription_properties_read.name
        _schema.properties = cls._schema_monitored_subscription_properties_read.properties
        _schema.type = cls._schema_monitored_subscription_properties_read.type


__all__ = ["Update"]
