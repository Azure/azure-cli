interactions:
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      CommandName:
      - storage account keys list
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      ParameterSetName:
      - -n -g --query -o
      User-Agent:
      - python/3.8.5 (Windows-10-10.0.19041-SP0) msrest/0.6.18 msrest_azure/0.6.3
        azure-mgmt-storage/11.1.0 Azure-SDK-For-Python AZURECLI/2.11.1
      accept-language:
      - en-US
    method: POST
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002/listKeys?api-version=2019-06-01&$expand=kerb
  response:
    body:
      string: '{"keys":[{"keyName":"key1","value":"veryFakedStorageAccountKey==","permissions":"FULL"},{"keyName":"key2","value":"veryFakedStorageAccountKey==","permissions":"FULL"}]}'
    headers:
      cache-control:
      - no-cache
      content-length:
      - '288'
      content-type:
      - application/json
      date:
      - Tue, 29 Sep 2020 05:53:47 GMT
      expires:
      - '-1'
      pragma:
      - no-cache
      server:
      - Microsoft-Azure-Storage-Resource-Provider/1.0,Microsoft-HTTPAPI/2.0 Microsoft-HTTPAPI/2.0
      strict-transport-security:
      - max-age=31536000; includeSubDomains
      transfer-encoding:
      - chunked
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
      x-ms-ratelimit-remaining-subscription-resource-requests:
      - '11999'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      User-Agent:
      - Azure-Storage/2.0.0-2.0.1 (Python CPython 3.8.5; Windows 10) AZURECLI/2.11.1
      x-ms-date:
      - Tue, 29 Sep 2020 05:53:47 GMT
      x-ms-version:
      - '2018-11-09'
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003?restype=container
  response:
    body:
      string: ''
    headers:
      content-length:
      - '0'
      date:
      - Tue, 29 Sep 2020 05:53:48 GMT
      etag:
      - '"0x8D8643C090B0EB6"'
      last-modified:
      - Tue, 29 Sep 2020 05:53:48 GMT
      server:
      - Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
      x-ms-version:
      - '2018-11-09'
    status:
      code: 201
      message: Created
- request:
    body: "# --------------------------------------------------------------------------------------------\r\n#
      Copyright (c) Microsoft Corporation. All rights reserved.\r\n# Licensed under
      the MIT License. See License.txt in the project root for license information.\r\n#
      --------------------------------------------------------------------------------------------\r\n\r\nimport
      os\r\nimport re\r\nimport unittest\r\nfrom datetime import datetime, timedelta\r\nfrom
      azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer, StorageAccountPreparer,\r\n
      \                              JMESPathCheck, JMESPathCheckExists, NoneCheck,
      api_version_constraint)\r\nfrom knack.util import CLIError\r\nfrom azure.cli.core.profiles
      import ResourceType\r\n\r\nfrom azure.cli.command_modules.storage._client_factory
      import MISSING_CREDENTIALS_ERROR_MESSAGE\r\nfrom ..storage_test_util import
      StorageScenarioMixin\r\nfrom azure_devtools.scenario_tests import AllowLargeResponse\r\n\r\n\r\n@api_version_constraint(ResourceType.MGMT_STORAGE,
      min_api='2016-12-01')\r\nclass StorageBlobUploadTests(StorageScenarioMixin,
      ScenarioTest):\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer(parameter_name='source_account')\r\n
      \   @StorageAccountPreparer(parameter_name='target_account')\r\n    def test_storage_blob_incremental_copy(self,
      resource_group, source_account, target_account):\r\n        source_file = self.create_temp_file(16)\r\n
      \       source_account_info = self.get_account_info(resource_group, source_account)\r\n
      \       source_container = self.create_container(source_account_info)\r\n        self.storage_cmd('storage
      blob upload -c {} -n src -f \"{}\" -t page', source_account_info,\r\n                         source_container,
      source_file)\r\n\r\n        snapshot = self.storage_cmd('storage blob snapshot
      -c {} -n src', source_account_info,\r\n                                    source_container).get_output_in_json()['snapshot']\r\n\r\n
      \       target_account_info = self.get_account_info(resource_group, target_account)\r\n
      \       target_container = self.create_container(target_account_info)\r\n        self.storage_cmd('storage
      blob incremental-copy start --source-container {} --source-blob '\r\n                         'src
      --source-account-name {} --source-account-key {} --source-snapshot '\r\n                         '{}
      --destination-container {} --destination-blob backup',\r\n                         target_account_info,
      source_container, source_account,\r\n                         source_account_info[1],
      snapshot, target_container)\r\n\r\n    def test_storage_blob_no_credentials_scenario(self):\r\n
      \       source_file = self.create_temp_file(1)\r\n        self.cmd('storage
      blob upload -c foo -n bar -f \"' + source_file + '\"', expect_failure=CLIError)\r\n\r\n
      \   @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n    def test_storage_blob_upload_small_file(self,
      resource_group, storage_account):\r\n        for blob_type in ['block', 'page']:\r\n
      \           self.verify_blob_upload_and_download(resource_group, storage_account,
      1, blob_type, 0)\r\n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n
      \   def test_storage_blob_upload_midsize_file(self, resource_group, storage_account):\r\n
      \       for blob_type in ['block', 'page']:\r\n            self.verify_blob_upload_and_download(resource_group,
      storage_account, 4096, 'block', 0)\r\n\r\n    def verify_blob_upload_and_download(self,
      group, account, file_size_kb, blob_type,\r\n                                        block_count=0,
      skip_download=False):\r\n        local_dir = self.create_temp_dir()\r\n        local_file
      = self.create_temp_file(file_size_kb)\r\n        blob_name = self.create_random_name(prefix='blob',
      length=24)\r\n        account_info = self.get_account_info(group, account)\r\n\r\n
      \       container = self.create_container(account_info)\r\n\r\n        self.storage_cmd('storage
      blob exists -n {} -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('exists',
      False))\r\n\r\n        self.storage_cmd('storage blob upload -c {} -f \"{}\"
      -n {} --type {}', account_info,\r\n                         container, local_file,
      blob_name, blob_type)\r\n        self.storage_cmd('storage blob exists -n {}
      -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('exists',
      True))\r\n        self.storage_cmd('storage blob list -c {} -otable --num-results
      1', account_info, container)\r\n\r\n        show_result = self.storage_cmd('storage
      blob show -n {} -c {}', account_info, blob_name,\r\n                                       container).get_output_in_json()\r\n
      \       self.assertEqual(show_result.get('name'), blob_name)\r\n        if blob_type
      == 'page':\r\n            self.assertEqual(type(show_result.get('properties').get('pageRanges')),
      list)\r\n        else:\r\n            self.assertEqual(show_result.get('properties').get('pageRanges'),
      None)\r\n\r\n        expiry = (datetime.utcnow() + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%MZ')\r\n
      \       sas = self.storage_cmd('storage blob generate-sas -n {} -c {} --expiry
      {} --permissions '\r\n                               'r --https-only', account_info,
      blob_name, container, expiry).output\r\n        self.assertTrue(sas)\r\n        self.assertIn('sig',
      sas)\r\n\r\n        self.storage_cmd('storage blob update -n {} -c {} --content-type
      application/test-content',\r\n                         account_info, blob_name,
      container)\r\n\r\n        self.storage_cmd('storage blob show -n {} -c {}',
      account_info, blob_name, container) \\\r\n            .assert_with_checks(\r\n
      \           [JMESPathCheck('properties.contentSettings.contentType', 'application/test-content'),\r\n
      \            JMESPathCheck('properties.contentLength', file_size_kb * 1024)])\r\n\r\n
      \       # check that blob properties can be set back to null\r\n        self.storage_cmd('storage
      blob update -n {} -c {} --content-type \"\"',\r\n                         account_info,
      blob_name, container)\r\n\r\n        self.storage_cmd('storage blob show -n
      {} -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('properties.contentSettings.contentType',
      None))\r\n\r\n        self.storage_cmd('storage blob service-properties show',
      account_info) \\\r\n            .assert_with_checks(JMESPathCheck('hourMetrics.enabled',
      True))\r\n\r\n        if not skip_download:\r\n            downloaded = os.path.join(local_dir,
      'test.file')\r\n\r\n            self.storage_cmd('storage blob download -n {}
      -c {} --file \"{}\"',\r\n                             account_info, blob_name,
      container, downloaded)\r\n            self.assertTrue(os.path.isfile(downloaded),
      'The file is not downloaded.')\r\n            self.assertEqual(file_size_kb
      * 1024, os.stat(downloaded).st_size,\r\n                             'The download
      file size is not right.')\r\n            self.storage_cmd('storage blob download
      -n {} -c {} --file \"{}\" --start-range 10 --end-range 499',\r\n                             account_info,
      blob_name, container, downloaded)\r\n            self.assertEqual(490, os.stat(downloaded).st_size,\r\n
      \                            'The download file size is not right.')\r\n\r\n
      \       # Verify the requests in cassette to ensure the count of the block requests
      is expected\r\n        # This portion of validation doesn't verify anything
      during playback because the recording\r\n        # is fixed.\r\n\r\n        def
      is_block_put_req(request):\r\n            if request.method != 'PUT':\r\n                return
      False\r\n\r\n            if not re.search('/cont[0-9]+/blob[0-9]+', request.path):\r\n
      \               return False\r\n\r\n            comp_block = False\r\n            has_blockid
      = False\r\n            for key, value in request.query:\r\n                if
      key == 'comp' and value == 'block':\r\n                    comp_block = True\r\n
      \               elif key == 'blockid':\r\n                    has_blockid =
      True\r\n\r\n            return comp_block and has_blockid\r\n\r\n        requests
      = self.cassette.requests\r\n        put_blocks = [request for request in requests
      if is_block_put_req(request)]\r\n        self.assertEqual(block_count, len(put_blocks),\r\n
      \                        'The expected number of block put requests is {} but
      the actual '\r\n                         'number is {}.'.format(block_count,
      len(put_blocks)))\r\n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n
      \   def test_storage_blob_socket_timeout(self, resource_group, storage_account):\r\n
      \       local_dir = self.create_temp_dir()\r\n        local_file = self.create_temp_file(1)\r\n
      \       blob_name = self.create_random_name(prefix='blob', length=24)\r\n        account_info
      = self.get_account_info(resource_group, storage_account)\r\n\r\n        container
      = self.create_container(account_info)\r\n\r\n        from azure.common import
      AzureException\r\n        with self.assertRaises(AzureException):\r\n            self.storage_cmd('storage
      blob upload -c {} -f \"{}\" -n {} --type block --socket-timeout -11',\r\n                             account_info,
      container, local_file, blob_name)\r\n\r\n        self.storage_cmd('storage blob
      exists -n {} -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('exists',
      False))\r\n\r\n        self.storage_cmd('storage blob upload -c {} -f \"{}\"
      -n {} --type block --socket-timeout 10',\r\n                         account_info,
      container, local_file, blob_name)\r\n        self.storage_cmd('storage blob
      exists -n {} -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('exists',
      True))\r\n\r\n        self.storage_cmd('storage blob show -n {} -c {}', account_info,
      blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('name',
      blob_name))\r\n\r\n        downloaded = os.path.join(local_dir, 'test.file')\r\n\r\n
      \       self.storage_cmd('storage blob download -n {} -c {} --file \"{}\" --socket-timeout
      10',\r\n                         account_info, blob_name, container, downloaded)\r\n
      \       self.assertTrue(os.path.isfile(downloaded), 'The file is not downloaded.')\r\n\r\n
      \   @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n    def test_storage_blob_lease_operations(self,
      resource_group, storage_account):\r\n        account_info = self.get_account_info(resource_group,
      storage_account)\r\n        local_file = self.create_temp_file(128)\r\n        c
      = self.create_container(account_info)\r\n        b = self.create_random_name('blob',
      24)\r\n        proposed_lease_id = 'abcdabcd-abcd-abcd-abcd-abcdabcdabcd'\r\n
      \       new_lease_id = 'dcbadcba-dcba-dcba-dcba-dcbadcbadcba'\r\n        date
      = '2016-04-01t12:00z'\r\n\r\n        self.storage_cmd('storage blob upload -c
      {} -n {} -f \"{}\"', account_info, c, b, local_file)\r\n\r\n        # test lease
      operations\r\n        self.storage_cmd('storage blob lease acquire --lease-duration
      60 -b {} -c {} '\r\n                         '--if-modified-since {} --proposed-lease-id
      {}', account_info, b, c, date,\r\n                         proposed_lease_id)\r\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\r\n                                JMESPathCheck('properties.lease.state',
      'leased'),\r\n                                JMESPathCheck('properties.lease.status',
      'locked'))\r\n        self.storage_cmd('storage blob lease change -b {} -c {}
      --lease-id {} '\r\n                         '--proposed-lease-id {}', account_info,
      b, c, proposed_lease_id,\r\n                         new_lease_id)\r\n        self.storage_cmd('storage
      blob lease renew -b {} -c {} --lease-id {}', account_info, b, c,\r\n                         new_lease_id)\r\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\r\n                                JMESPathCheck('properties.lease.state',
      'leased'),\r\n                                JMESPathCheck('properties.lease.status',
      'locked'))\r\n        self.storage_cmd('storage blob lease break -b {} -c {}
      --lease-break-period 30',\r\n                         account_info, b, c)\r\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\r\n                                JMESPathCheck('properties.lease.state',
      'breaking'),\r\n                                JMESPathCheck('properties.lease.status',
      'locked'))\r\n        self.storage_cmd('storage blob lease release -b {} -c
      {} --lease-id {}', account_info, b, c,\r\n                         new_lease_id)\r\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\r\n                                JMESPathCheck('properties.lease.state',
      'available'),\r\n                                JMESPathCheck('properties.lease.status',
      'unlocked'))\r\n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n
      \   def test_storage_blob_snapshot_operations(self, resource_group, storage_account):\r\n
      \       account_info = self.get_account_info(resource_group, storage_account)\r\n
      \       local_file = self.create_temp_file(128)\r\n        c = self.create_container(account_info)\r\n
      \       b = self.create_random_name('blob', 24)\r\n\r\n        self.storage_cmd('storage
      blob upload -c {} -n {} -f \"{}\"', account_info, c, b, local_file)\r\n\r\n
      \       snapshot_dt = self.storage_cmd('storage blob snapshot -c {} -n {}',
      account_info, c, b) \\\r\n            .get_output_in_json()['snapshot']\r\n
      \       self.storage_cmd('storage blob exists -n {} -c {} --snapshot {}', account_info,
      b, c,\r\n                         snapshot_dt) \\\r\n            .assert_with_checks(JMESPathCheck('exists',
      True))\r\n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n
      \   def test_storage_blob_metadata_operations(self, resource_group, storage_account):\r\n
      \       account_info = self.get_account_info(resource_group, storage_account)\r\n
      \       c = self.create_container(account_info)\r\n        b = self.create_random_name('blob',
      24)\r\n\r\n        self.storage_cmd('storage blob upload -c {} -n {} -f \"{}\"',
      account_info, c, b, __file__)\r\n        self.storage_cmd('storage blob metadata
      update -n {} -c {} --metadata a=b c=d',\r\n                         account_info,
      b, c)\r\n        self.storage_cmd('storage blob metadata show -n {} -c {}',
      account_info, b, c) \\\r\n            .assert_with_checks(JMESPathCheck('a',
      'b'), JMESPathCheck('c', 'd'))\r\n        self.storage_cmd('storage blob metadata
      update -n {} -c {}', account_info, b, c)\r\n        self.storage_cmd('storage
      blob metadata show -n {} -c {}', account_info, b, c) \\\r\n            .assert_with_checks(NoneCheck())\r\n\r\n
      \   @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n    def test_storage_blob_container_operations(self,
      resource_group, storage_account):\r\n        account_info = self.get_account_info(resource_group,
      storage_account)\r\n        c = self.create_container(account_info)\r\n        proposed_lease_id
      = 'abcdabcd-abcd-abcd-abcd-abcdabcdabcd'\r\n        new_lease_id = 'dcbadcba-dcba-dcba-dcba-dcbadcbadcba'\r\n
      \       date = '2016-04-01t12:00z'\r\n\r\n        self.storage_cmd('storage
      container exists -n {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('exists',
      True))\r\n\r\n        self.storage_cmd('storage container set-permission -n
      {} --public-access blob',\r\n                         account_info, c)\r\n        self.storage_cmd('storage
      container show-permission -n {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('publicAccess',
      'blob'))\r\n        self.storage_cmd('storage container set-permission -n {}
      --public-access off', account_info,\r\n                         c)\r\n        self.storage_cmd('storage
      container show-permission -n {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('publicAccess',
      'off'))\r\n\r\n        self.storage_cmd('storage container show -n {}', account_info,
      c) \\\r\n            .assert_with_checks(JMESPathCheck('name', c))\r\n\r\n        self.assertIn(c,
      self.storage_cmd('storage container list --query \"[].name\"',\r\n                                          account_info).get_output_in_json())\r\n\r\n
      \       self.storage_cmd('storage container metadata update -n {} --metadata
      foo=bar moo=bak',\r\n                         account_info, c)\r\n        self.storage_cmd('storage
      container metadata show -n {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('foo',
      'bar'), JMESPathCheck('moo', 'bak'))\r\n        self.storage_cmd('storage container
      metadata update -n {}', account_info, c)\r\n        self.storage_cmd('storage
      container metadata show -n {}', account_info, c) \\\r\n            .assert_with_checks(NoneCheck())\r\n\r\n
      \       # test lease operations\r\n        self.storage_cmd('storage container
      lease acquire --lease-duration 60 -c {} '\r\n                         '--if-modified-since
      {} --proposed-lease-id {}', account_info, c, date,\r\n                         proposed_lease_id)\r\n
      \       self.storage_cmd('storage container show --name {}', account_info, c)
      \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\r\n                                JMESPathCheck('properties.lease.state',
      'leased'),\r\n                                JMESPathCheck('properties.lease.status',
      'locked'))\r\n        self.storage_cmd('storage container lease change -c {}
      --lease-id {} '\r\n                         '--proposed-lease-id {}', account_info,
      c, proposed_lease_id, new_lease_id)\r\n        self.storage_cmd('storage container
      lease renew -c {} --lease-id {}',\r\n                         account_info,
      c, new_lease_id)\r\n        self.storage_cmd('storage container show -n {}',
      account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\r\n                                JMESPathCheck('properties.lease.state',
      'leased'),\r\n                                JMESPathCheck('properties.lease.status',
      'locked'))\r\n        self.storage_cmd('storage container lease break -c {}
      --lease-break-period 30',\r\n                         account_info, c)\r\n        self.storage_cmd('storage
      container show --name {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\r\n                                JMESPathCheck('properties.lease.state',
      'breaking'),\r\n                                JMESPathCheck('properties.lease.status',
      'locked'))\r\n        self.storage_cmd('storage container lease release -c {}
      --lease-id {}', account_info, c,\r\n                         new_lease_id)\r\n
      \       self.storage_cmd('storage container show --name {}', account_info, c)
      \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\r\n                                JMESPathCheck('properties.lease.state',
      'available'),\r\n                                JMESPathCheck('properties.lease.status',
      'unlocked'))\r\n\r\n        from datetime import datetime, timedelta\r\n        expiry
      = (datetime.utcnow() + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%MZ')\r\n        self.assertIn('sig=',
      self.storage_cmd('storage container generate-sas -n {} --permissions r --expiry
      {}',\r\n                                               account_info, c, expiry).output)\r\n\r\n
      \       # verify delete operation\r\n        self.storage_cmd('storage container
      delete --name {} --fail-not-exist', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('deleted',
      True))\r\n        self.storage_cmd('storage container exists -n {}', account_info,
      c) \\\r\n            .assert_with_checks(JMESPathCheck('exists', False))\r\n\r\n
      \   @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n    def test_storage_blob_append(self,
      resource_group, storage_account):\r\n        account_info = self.get_account_info(resource_group,
      storage_account)\r\n        container = self.create_container(account_info)\r\n\r\n
      \       # create an append blob\r\n        local_file = self.create_temp_file(1)\r\n
      \       blob_name = self.create_random_name(prefix='blob', length=24)\r\n\r\n
      \       self.storage_cmd('storage blob upload -c {} -f \"{}\" -n {} --type append
      --if-none-match *', account_info,\r\n                         container, local_file,
      blob_name)\r\n        self.assertEqual(len(self.storage_cmd('storage blob list
      -c {}',\r\n                                              account_info, container).get_output_in_json()),
      1)\r\n\r\n        # append if-none-match should throw exception\r\n        with
      self.assertRaises(Exception):\r\n            self.storage_cmd('storage blob
      upload -c {} -f \"{}\" -n {} --type append --if-none-match *', account_info,\r\n
      \                            container, local_file, blob_name)\r\n\r\n    @AllowLargeResponse()\r\n
      \   @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n    @api_version_constraint(resource_type=ResourceType.DATA_STORAGE,
      max_api='2018-11-09')\r\n    def test_storage_blob_suppress_400(self, resource_group,
      storage_account):\r\n        # test for azure.cli.command_modules.storage.StorageCommandGroup.get_handler_suppress_some_400\r\n
      \       # test 404\r\n        with self.assertRaises(SystemExit) as ex:\r\n
      \           self.cmd('storage blob show --account-name {} -c foo -n bar.txt
      --auth-mode key'.format(storage_account))\r\n        self.assertEqual(ex.exception.code,
      3)\r\n\r\n        # test 403\r\n        from azure.common import AzureException\r\n
      \       with self.assertRaisesRegexp(AzureException, \"Authentication failure\"):\r\n
      \           self.cmd('storage blob show --account-name {} --account-key=\"YQ==\"
      -c foo -n bar.txt '.format(storage_account))\r\n\r\n\r\nif __name__ == '__main__':\r\n
      \   unittest.main()\r\n"
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '21413'
      User-Agent:
      - Azure-Storage/2.0.0-2.0.1 (Python CPython 3.8.5; Windows 10) AZURECLI/2.11.1
      x-ms-blob-content-type:
      - text/x-python
      x-ms-blob-type:
      - BlockBlob
      x-ms-date:
      - Tue, 29 Sep 2020 05:53:48 GMT
      x-ms-version:
      - '2018-11-09'
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004
  response:
    body:
      string: ''
    headers:
      content-length:
      - '0'
      content-md5:
      - 090kLOcBQ5YC1LSW8lRzuA==
      date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      etag:
      - '"0x8D8643C096EDEEA"'
      last-modified:
      - Tue, 29 Sep 2020 05:53:49 GMT
      server:
      - Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
      x-ms-request-server-encrypted:
      - 'true'
      x-ms-version:
      - '2018-11-09'
    status:
      code: 201
      message: Created
- request:
    body: null
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      User-Agent:
      - Azure-Storage/2.0.0-2.0.1 (Python CPython 3.8.5; Windows 10) AZURECLI/2.11.1
      x-ms-date:
      - Tue, 29 Sep 2020 05:53:48 GMT
      x-ms-meta-a:
      - b
      x-ms-meta-c:
      - d
      x-ms-version:
      - '2018-11-09'
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body:
      string: ''
    headers:
      content-length:
      - '0'
      date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      etag:
      - '"0x8D8643C09A9D386"'
      last-modified:
      - Tue, 29 Sep 2020 05:53:49 GMT
      server:
      - Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
      x-ms-request-server-encrypted:
      - 'true'
      x-ms-version:
      - '2018-11-09'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Connection:
      - keep-alive
      User-Agent:
      - Azure-Storage/2.0.0-2.0.1 (Python CPython 3.8.5; Windows 10) AZURECLI/2.11.1
      x-ms-date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      x-ms-version:
      - '2018-11-09'
    method: GET
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body:
      string: ''
    headers:
      content-length:
      - '0'
      date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      etag:
      - '"0x8D8643C09A9D386"'
      last-modified:
      - Tue, 29 Sep 2020 05:53:49 GMT
      server:
      - Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
      x-ms-meta-a:
      - b
      x-ms-meta-c:
      - d
      x-ms-version:
      - '2018-11-09'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      User-Agent:
      - Azure-Storage/2.0.0-2.0.1 (Python CPython 3.8.5; Windows 10) AZURECLI/2.11.1
      x-ms-date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      x-ms-version:
      - '2018-11-09'
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body:
      string: ''
    headers:
      content-length:
      - '0'
      date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      etag:
      - '"0x8D8643C0A13ABF9"'
      last-modified:
      - Tue, 29 Sep 2020 05:53:50 GMT
      server:
      - Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
      x-ms-request-server-encrypted:
      - 'true'
      x-ms-version:
      - '2018-11-09'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Connection:
      - keep-alive
      User-Agent:
      - Azure-Storage/2.0.0-2.0.1 (Python CPython 3.8.5; Windows 10) AZURECLI/2.11.1
      x-ms-date:
      - Tue, 29 Sep 2020 05:53:49 GMT
      x-ms-version:
      - '2018-11-09'
    method: GET
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body:
      string: ''
    headers:
      content-length:
      - '0'
      date:
      - Tue, 29 Sep 2020 05:53:50 GMT
      etag:
      - '"0x8D8643C0A13ABF9"'
      last-modified:
      - Tue, 29 Sep 2020 05:53:50 GMT
      server:
      - Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
      x-ms-version:
      - '2018-11-09'
    status:
      code: 200
      message: OK
version: 1
