#pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
from msrestazure.azure_operation import AzureOperationPoller
import uuid

from .. import models


class VMOperations(object):
    """VMOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An objec model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def create_or_update(
            self, resource_group_name, deployment_name, admin_password, admin_user_name, dns_name_for_public_ip, name, content_version=None, os=None, os_publisher=None, ip_address_type=None, storage_type=None, size=None, os_sku=None, os_offer=None, os_version=None, auth_method=None, ssh_key_value=None, ssh_key_path=None, add_to_availability_set=None, availability_set_id=None, subnet_name=None, vnet_name=None, new_or_existing_vnet=None, vnet_ip_address_type=None, subnet_ip_address_prefix=None, custom_headers={}, raw=False, **operation_config):
        """
        Create or update a virtual machine.

        :param resource_group_name: The name of the resource group. The name
         is case insensitive.
        :type resource_group_name: str
        :param deployment_name: The name of the deployment.
        :type deployment_name: str
        :param admin_password: Password for the Virtual Machine.
        :type admin_password: str
        :param admin_user_name: Username for the Virtual Machine.
        :type admin_user_name: str
        :param dns_name_for_public_ip: Globally unique DNS Name for the
         Public IP used to access the Virtual Machine.
        :type dns_name_for_public_ip: str
        :param name: The Virtual Machine name.
        :type name: str
        :param content_version: If included it must match the ContentVersion
         in the template.
        :type content_version: str
        :param os: Common OS choices.
        :type os: str
        :param os_publisher: The OS publisher of the OS image.
        :type os_publisher: str
        :param ip_address_type: Dynamic or Static IP address allocation.
         Possible values include: 'Dynamic', 'Static'
        :type ip_address_type: str
        :param storage_type: The VM storage type.
        :type storage_type: str
        :param size: The VM Size that should be created.  Values:
         standard_A0-standard_A7, standard_D1-standard_D4,
         standard_D11-standard_D14
        :type size: str
        :param os_sku: The OS SKU to install.
        :type os_sku: str
        :param os_offer: The OS Offer to install.
        :type os_offer: str
        :param os_version: The OS version to install.
        :type os_version: str
        :param auth_method: The VM authentication type.  Password is
         available on Windows and Linux.  SSH is only available on Linux.
         Possible values include: 'password', 'sshkey'
        :type auth_method: str
        :param ssh_key_value: The string value for an SSH public key.
        :type ssh_key_value: str
        :param ssh_key_path: The VM file path to save the SSh key to.
        :type ssh_key_path: str
        :param add_to_availability_set: Whether or not to add the VM to an
         availability set. Possible values include: 'none', 'existing'
        :type add_to_availability_set: str
        :param availability_set_id: ID of the availability set the VM should
         be added to.
        :type availability_set_id: str
        :param subnet_name: The subnet name.
        :type subnet_name: str
        :param vnet_name: Name of virtual network to add VM to.
        :type vnet_name: str
        :param new_or_existing_vnet: Whether to use an existing VNet or
         create a new one.
        :type new_or_existing_vnet: str
        :param vnet_ip_address_type: Dynamic or Static IP address allocation.
        :type vnet_ip_address_type: str
        :param subnet_ip_address_prefix: The subnet address prefix.
        :type subnet_ip_address_prefix: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :rtype:
         :class:`AzureOperationPoller<msrestazure.azure_operation.AzureOperationPoller>`
         instance that returns :class:`DeploymentExtended
         <mynamespace.models.DeploymentExtended>`
        :rtype: :class:`ClientRawResponse<msrest.pipeline.ClientRawResponse>`
         if raw=true
        """
        parameters = models.DeploymentVM(content_version=content_version, os=os, os_publisher=os_publisher, admin_password=admin_password, ip_address_type=ip_address_type, storage_type=storage_type, size=size, admin_user_name=admin_user_name, dns_name_for_public_ip=dns_name_for_public_ip, name=name, os_sku=os_sku, os_offer=os_offer, os_version=os_version, auth_method=auth_method, ssh_key_value=ssh_key_value, ssh_key_path=ssh_key_path, add_to_availability_set=add_to_availability_set, availability_set_id=availability_set_id, subnet_name=subnet_name, vnet_name=vnet_name, new_or_existing_vnet=new_or_existing_vnet, vnet_ip_address_type=vnet_ip_address_type, subnet_ip_address_prefix=subnet_ip_address_prefix)

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}'
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=64, min_length=1, pattern='^[-\w\._]+$'),
            'deploymentName': self._serialize.url("deployment_name", deployment_name, 'str', max_length=64, min_length=1, pattern='^[-\w\._]+$'),
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.config.api_version", self.config.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(parameters, 'DeploymentVM')

        # Construct and send request
        def long_running_send():

            request = self._client.put(url, query_parameters)
            return self._client.send(
                request, header_parameters, body_content, **operation_config)

        def get_long_running_status(status_link, headers={}):

            request = self._client.get(status_link)
            request.headers.update(headers)
            return self._client.send(
                request, header_parameters, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 201]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            deserialized = None

            if response.status_code == 200:
                deserialized = self._deserialize('DeploymentExtended', response)
            if response.status_code == 201:
                deserialized = self._deserialize('DeploymentExtended', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response

            return deserialized

        if raw:
            response = long_running_send()
            return get_long_running_output(response)

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)
