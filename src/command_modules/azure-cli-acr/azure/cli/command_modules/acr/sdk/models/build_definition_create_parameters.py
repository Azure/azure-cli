# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class BuildDefinitionCreateParameters(Model):
    """The parameters for creating a build definition.

    :param source_repository: The properties that describes the source(code)
     for the build definition.
    :type source_repository:
     ~containerregistrybuild.models.SourceRepositoryCreateParameters
    :param steps: The list of build steps in a build definition.
    :type steps:
     list[~containerregistrybuild.models.BuildStepCreateParameters]
    :param triggers: A collection of custom triggers for this build
     definition.
    :type triggers:
     list[~containerregistrybuild.models.BuildTriggerParameters]
    :param alias: The alternative updatable name for a build definition.
    :type alias: str
    :param status: The current status of build definition. Possible values
     include: 'Disabled', 'Enabled'
    :type status: str or ~containerregistrybuild.models.BuildDefinitionStatus
    :param platform: The platform properties against which the build has to
     happen.
    :type platform: ~containerregistrybuild.models.PlatformProperties
    :param timeout: Build timeout in seconds.
    :type timeout: int
    :param is_base_image_triggers_enabled: The value of this property
     indicates whether auto triggers of the build items trigger a build against
     this definition. Default value: False .
    :type is_base_image_triggers_enabled: bool
    :param location: The region of the resource.
    :type location: str
    :param tags: The ARM resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'steps': {'required': True},
    }

    _attribute_map = {
        'source_repository': {'key': 'properties.sourceRepository', 'type': 'SourceRepositoryCreateParameters'},
        'steps': {'key': 'properties.steps', 'type': '[BuildStepCreateParameters]'},
        'triggers': {'key': 'properties.triggers', 'type': '[BuildTriggerParameters]'},
        'alias': {'key': 'properties.alias', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'platform': {'key': 'properties.platform', 'type': 'PlatformProperties'},
        'timeout': {'key': 'properties.timeout', 'type': 'int'},
        'is_base_image_triggers_enabled': {'key': 'properties.isBaseImageTriggersEnabled', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, steps, source_repository=None, triggers=None, alias=None, status=None, platform=None, timeout=None, is_base_image_triggers_enabled=False, location=None, tags=None):
        super(BuildDefinitionCreateParameters, self).__init__()
        self.source_repository = source_repository
        self.steps = steps
        self.triggers = triggers
        self.alias = alias
        self.status = status
        self.platform = platform
        self.timeout = timeout
        self.is_base_image_triggers_enabled = is_base_image_triggers_enabled
        self.location = location
        self.tags = tags
