# coding=utf-8
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from knack.help_files import helps  # pylint: disable=unused-import
# pylint: disable=line-too-long, too-many-lines

helps['acr'] = """
type: group
short-summary: Manage private registries with Azure Container Registries.
"""

helps['acr build'] = """
type: command
short-summary: Queues a quick build, providing streaming logs for an Azure Container Registry.
examples:
  - name: Queue a local context as a Linux build, tag it, and push it to the registry.
    text: >
        az acr build -t sample/hello-world:{{.Run.ID}} -r MyRegistry .
  - name: Queue a local context as a Linux build, tag it, and push it to the registry without streaming logs.
    text: >
        az acr build -t sample/hello-world:{{.Run.ID}} -r MyRegistry --no-logs .
  - name: Queue a local context as a Linux build without pushing it to the registry.
    text: >
        az acr build -t sample/hello-world:{{.Run.ID}} -r MyRegistry --no-push .
  - name: Queue a local context as a Linux build without pushing it to the registry.
    text: >
        az acr build -r MyRegistry .
  - name: Queue a remote GitHub context as a Windows build and x86 architecture, tag it, and push it to the registry.
    text: >
        az acr build -r MyRegistry https://github.com/Azure/acr-builder.git -f Windows.Dockerfile --platform Windows/x86
  - name: Queue a local context as a Linux build on arm/v7 architecture, tag it, and push it to the registry.
    text: >
        az acr build -t sample/hello-world:{{.Run.ID}} -r MyRegistry . --platform linux/arm/v7
"""

helps['acr check-health'] = """
type: command
short-summary: Gets health information on the environment and optionally a target registry.
examples:
  - name: Gets health state with target registry 'MyRegistry', skipping confirmation for pulling image.
    text: >
        az acr check-health -n MyRegistry -y
  - name: Gets health state of the environment, without stopping on first error.
    text: >
        az acr check-health --ignore-errors
"""

helps['acr check-name'] = """
type: command
short-summary: Checks if an Azure Container Registry name is valid and available for use.
examples:
  - name: Check if a registry name already exists.
    text: >
        az acr check-name -n doesthisnameexist
"""

helps['acr config'] = """
type: group
short-summary: Configure policies for Azure Container Registries.
"""

helps['acr config content-trust'] = """
type: group
short-summary: Manage content-trust policy for Azure Container Registries.
"""

helps['acr config content-trust show'] = """
type: command
short-summary: Show the configured content-trust policy for an Azure Container Registry.
examples:
  - name: Show the configured content-trust policy for an Azure Container Registry
    text: >
        az acr config content-trust show -n MyRegistry
"""

helps['acr config content-trust update'] = """
type: command
short-summary: Update content-trust policy for an Azure Container Registry.
examples:
  - name: Update content-trust policy for an Azure Container Registry
    text: >
        az acr config content-trust update -n MyRegistry --status Enabled
  - name: Update content-trust policy for an Azure Container Registry. (autogenerated)
    text: az acr config content-trust update --name MyRegistry --resource-group MyResourceGroup --status enabled
    crafted: true
"""

helps['acr create'] = """
type: command
short-summary: Creates an Azure Container Registry.
examples:
  - name: Create a managed container registry with the Standard SKU.
    text: >
        az acr create -n MyRegistry -g MyResourceGroup --sku Standard
"""

helps['acr credential'] = """
type: group
short-summary: Manage login credentials for Azure Container Registries.
"""

helps['acr credential renew'] = """
type: command
short-summary: Regenerate login credentials for an Azure Container Registry.
examples:
  - name: Renew the second password for an Azure Container Registry.
    text: >
        az acr credential renew -n MyRegistry --password-name password2
  - name: Regenerate login credentials for an Azure Container Registry. (autogenerated)
    text: az acr credential renew --name MyRegistry --password-name password --resource-group MyResourceGroup
    crafted: true
"""

helps['acr credential show'] = """
type: command
short-summary: Get the login credentials for an Azure Container Registry.
examples:
  - name: Get the login credentials for an Azure Container Registry.
    text: >
        az acr credential show -n MyRegistry
  - name: Get the username used to log in to an Azure Container Registry.
    text: >
        az acr credential show -n MyRegistry --query username
  - name: Get a password used to log in to an Azure Container Registry.
    text: >
        az acr credential show -n MyRegistry --query passwords[0].value
"""

helps['acr delete'] = """
type: command
short-summary: Deletes an Azure Container Registry.
examples:
  - name: Delete an Azure Container Registry.
    text: >
        az acr delete -n MyRegistry
"""

helps['acr helm'] = """
type: group
short-summary: Manage helm charts for Azure Container Registries.
"""

helps['acr helm delete'] = """
type: command
short-summary: Delete a helm chart version in an Azure Container Registry.
examples:
  - name: Delete all versions of a helm chart in an Azure Container Registry
    text: >
        az acr helm delete -n MyRegistry mychart
  - name: Delete a helm chart version in an Azure Container Registry
    text: >
        az acr helm delete -n MyRegistry mychart --version 0.3.2
"""

helps['acr helm list'] = """
type: command
short-summary: List all helm charts in an Azure Container Registry.
examples:
  - name: List all helm charts in an Azure Container Registry
    text: >
        az acr helm list -n MyRegistry
"""

helps['acr helm push'] = """
type: command
short-summary: Push a helm chart package to an Azure Container Registry.
examples:
  - name: Push a chart package to an Azure Container Registry
    text: >
        az acr helm push -n MyRegistry mychart-0.3.2.tgz
  - name: Push a chart package to an Azure Container Registry, overwriting the existing one.
    text: >
        az acr helm push -n MyRegistry mychart-0.3.2.tgz --force
"""

helps['acr helm repo'] = """
type: group
short-summary: Manage helm chart repositories for Azure Container Registries.
"""

helps['acr helm repo add'] = """
type: command
short-summary: Add a helm chart repository from an Azure Container Registry through the Helm CLI.
long-summary: Helm must be installed on your machine.
examples:
  - name: Add a helm chart repository from an Azure Container Registry to manage helm charts.
    text: >
        az acr helm repo add -n MyRegistry
"""

helps['acr helm show'] = """
type: command
short-summary: Describe a helm chart in an Azure Container Registry.
examples:
  - name: Show all versions of a helm chart in an Azure Container Registry
    text: >
        az acr helm show -n MyRegistry mychart
  - name: Show a helm chart version in an Azure Container Registry
    text: >
        az acr helm show -n MyRegistry mychart --version 0.3.2
"""

helps['acr import'] = """
type: command
short-summary: Imports an image to an Azure Container Registry from another Container Registry. Import removes the need to docker pull, docker tag, docker push.
examples:
  - name: Import an image to the target registry and inherits sourcerepository:sourcetag from the source registry.
    text: >
        az acr import -n MyRegistry --source sourceregistry.azurecr.io/sourcerepository:sourcetag
  - name: Import an image from a registry in a different subscription.
    text: |
        az acr import -n MyRegistry --source sourcerepository:sourcetag -t targetrepository:targettag \\
            -r /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry
  - name: Import an image from a public repository in Docker Hub
    text: >
        az acr import -n MyRegistry --source docker.io/library/hello-world:latest -t targetrepository:targettag
"""

helps['acr list'] = """
type: command
short-summary: Lists all the container registries under the current subscription.
examples:
  - name: List container registries and show the results in a table, across multiple resource groups.
    text: >
        az acr list -o table
  - name: List container registries in a resource group and show the results in a table.
    text: >
        az acr list -g MyResourceGroup -o table
"""

helps['acr login'] = """
type: command
short-summary: Log in to an Azure Container Registry through the Docker CLI.
long-summary: Docker must be installed on your machine.
examples:
  - name: Log in to an Azure Container Registry
    text: >
        az acr login -n MyRegistry
"""

helps['acr network-rule'] = """
type: group
short-summary: Manage network rules for Azure Container Registries.
"""

helps['acr network-rule add'] = """
type: command
short-summary: Add a network rule.
examples:
  - name: Add a rule to allow access for a subnet in the same resource group as the registry.
    text: >
        az acr network-rule add -n MyRegistry --vnet-name myvnet --subnet mysubnet
  - name: Add a rule to allow access for a subnet in a different subscription or resource group.
    text: >
        az acr network-rule add -n MyRegistry --subnet /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet
  - name: Add a rule to allow access for a specific IP address-range.
    text: >
        az acr network-rule add -n MyRegistry --ip-address 23.45.1.0/24
"""

helps['acr network-rule list'] = """
type: command
short-summary: List network rules.
examples:
  - name: List network rules for a registry.
    text: >
        az acr network-rule list -n MyRegistry
"""

helps['acr network-rule remove'] = """
type: command
short-summary: Remove a network rule.
examples:
  - name: Remove a rule that allows access for a subnet in the same resource group as the registry.
    text: >
        az acr network-rule remove -n MyRegistry --vnet-name myvnet --subnet mysubnet
  - name: Remove a rule that allows access for a subnet in a different subscription or resource group.
    text: >
        az acr network-rule remove -n MyRegistry --subnet /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet
  - name: Remove a rule that allows access for a specific IP address-range.
    text: >
        az acr network-rule remove -n MyRegistry --ip-address 23.45.1.0/24
"""

helps['acr pack'] = """
type: group
short-summary: Manage Azure Container Registry Tasks that use Cloud Native Buildpacks.
"""

helps['acr pack build'] = """
type: command
short-summary: Queues a quick build task that builds an app and pushes it into an Azure Container Registry.
examples:
  - name: Queue a build for the current directory with the CloudFoundry builder.
    text: az acr pack build -r MyRegistry -t {{.Run.Registry}}/node-app:{{.Run.ID}} --builder cloudfoundry/cnb:bionic .
  - name: Queue a build for the given GitHub repository with the Heroku builder.
    text: az acr pack build -r MyRegistry -t {{.Run.Registry}}/node-app:{{.Run.ID}} --pull --builder heroku/buildpacks:18 https://github.com/Azure-Samples/nodejs-docs-hello-world.git
"""

helps['acr replication'] = """
type: group
short-summary: Manage geo-replicated regions of Azure Container Registries.
"""

helps['acr replication create'] = """
type: command
short-summary: Create a replicated region for an Azure Container Registry.
examples:
  - name: Create a replicated region for an Azure Container Registry.
    text: >
        az acr replication create -r MyRegistry -l westus
  - name: Create a replicated region for an Azure Container Registry. (autogenerated)
    text: az acr replication create --location westus --registry MyRegistry --resource-group MyResourceGroup
    crafted: true
"""

helps['acr replication delete'] = """
type: command
short-summary: Delete a replicated region from an Azure Container Registry.
examples:
  - name: Delete a replicated region from an Azure Container Registry.
    text: >
        az acr replication delete -n MyReplication -r MyRegistry
"""

helps['acr replication list'] = """
type: command
short-summary: List all of the regions for a geo-replicated Azure Container Registry.
examples:
  - name: List replications and show the results in a table.
    text: >
        az acr replication list -r MyRegistry -o table
"""

helps['acr replication show'] = """
type: command
short-summary: Get the details of a replicated region.
examples:
  - name: Get the details of a replicated region
    text: >
        az acr replication show -n MyReplication -r MyRegistry
"""

helps['acr replication update'] = """
type: command
short-summary: Updates a replication.
examples:
  - name: Update tags for a replication
    text: >
        az acr replication update -n MyReplication -r MyRegistry --tags key1=value1 key2=value2
"""

helps['acr repository'] = """
type: group
short-summary: Manage repositories (image names) for Azure Container Registries.
"""

helps['acr repository delete'] = """
type: command
short-summary: Delete a repository or image in an Azure Container Registry.
long-summary: This command deletes all associated layer data that are not referenced by any other manifest in the container registry.
examples:
  - name: Delete an image manifest by tag. This deletes the manifest referenced by 'hello-world:latest' and all other tags referencing the same manifest.
    text: az acr repository delete -n MyRegistry --image hello-world:latest
  - name: Delete an image manifest by sha256-based manifest digest. This deletes the manifest identified by 'hello-world@sha256:abc123' and all tags referencing the manifest.
    text: az acr repository delete -n MyRegistry --image hello-world@sha256:abc123
  - name: Delete a repository from an Azure Container Registry. This deletes all manifests and tags under 'hello-world'.
    text: az acr repository delete -n MyRegistry --repository hello-world
"""

helps['acr repository list'] = """
type: command
short-summary: List repositories in an Azure Container Registry.
examples:
  - name: List repositories in a given Azure Container Registry.
    text: az acr repository list -n MyRegistry
"""

helps['acr repository show'] = """
type: command
short-summary: Get the attributes of a repository or image in an Azure Container Registry.
examples:
  - name: Get the attributes of the repository 'hello-world'.
    text: az acr repository show -n MyRegistry --repository hello-world
  - name: Get the attributes of the image referenced by tag 'hello-world:latest'.
    text: az acr repository show -n MyRegistry --image hello-world:latest
  - name: Get the attributes of the image referenced by digest 'hello-world@sha256:abc123'.
    text: az acr repository show -n MyRegistry --image hello-world@sha256:abc123
"""

helps['acr repository show-manifests'] = """
type: command
short-summary: Show manifests of a repository in an Azure Container Registry.
examples:
  - name: Show manifests of a repository in an Azure Container Registry.
    text: az acr repository show-manifests -n MyRegistry --repository MyRepository
  - name: Show the latest 10 manifests ordered by timestamp of a repository in an Azure Container Registry.
    text: az acr repository show-manifests -n MyRegistry --repository MyRepository --top 10 --orderby time_desc
  - name: Show the detailed information of the latest 10 manifests ordered by timestamp of a repository in an Azure Container Registry.
    text: az acr repository show-manifests -n MyRegistry --repository MyRepository --top 10 --orderby time_desc --detail
"""

helps['acr repository show-tags'] = """
type: command
short-summary: Show tags for a repository in an Azure Container Registry.
examples:
  - name: Show tags of a repository in an Azure Container Registry.
    text: az acr repository show-tags -n MyRegistry --repository MyRepository
  - name: Show the detailed information of tags of a repository in an Azure Container Registry.
    text: az acr repository show-tags -n MyRegistry --repository MyRepository --detail
  - name: Show the detailed information of the latest 10 tags ordered by timestamp of a repository in an Azure Container Registry.
    text: az acr repository show-tags -n MyRegistry --repository MyRepository --top 10 --orderby time_desc --detail
"""

helps['acr repository untag'] = """
type: command
short-summary: Untag an image in an Azure Container Registry.
long-summary: This command does not delete the manifest referenced by the tag or any associated layer data.
examples:
  - name: Untag an image from a repository.
    text: az acr repository untag -n MyRegistry --image hello-world:latest
"""

helps['acr repository update'] = """
type: command
short-summary: Update the attributes of a repository or image in an Azure Container Registry.
examples:
  - name: Update the attributes of the repository 'hello-world' to disable write operation.
    text: az acr repository update -n MyRegistry --repository hello-world --write-enabled false
  - name: Update the attributes of the image referenced by tag 'hello-world:latest' to disable write operation.
    text: az acr repository update -n MyRegistry --image hello-world:latest --write-enabled false
  - name: Update the attributes of the image referenced by digest 'hello-world@sha256:abc123' to disable write operation.
    text: az acr repository update -n MyRegistry --image hello-world@sha256:abc123 --write-enabled false
"""

helps['acr run'] = """
type: command
short-summary: Queues a quick run providing streamed logs for an Azure Container Registry.
examples:
  - name: Queue a run to execute a container command.
    text: >
        az acr run -r MyRegistry --cmd MyImage /dev/null
  - name: Queue a run with the task definition from the standard input. Either 'Ctrl + Z'(Windows) or 'Ctrl + D'(Linux) terminates the input stream.
    text: >
        az acr run -r MyRegistry -f - /dev/null
  - name: Queue a run to execute the tasks passed through the pipe.
    text: >
        cat task.yaml | az acr run -r MyRegistry -f - /dev/null
  - name: Queue a local context, pushed to ACR with streaming logs.
    text: >
        az acr run -r MyRegistry -f bash-echo.yaml .
  - name: Queue a remote git context with streaming logs.
    text: >
        az acr run -r MyRegistry https://github.com/Azure-Samples/acr-tasks.git -f hello-world.yaml
  - name: Queue a remote git context with streaming logs and runs the task on Linux platform.
    text: >
        az acr run -r MyRegistry https://github.com/Azure-Samples/acr-tasks.git -f build-hello-world.yaml --platform linux
"""

helps['acr show'] = """
type: command
short-summary: Get the details of an Azure Container Registry.
examples:
  - name: Get the login server for an Azure Container Registry.
    text: >
        az acr show -n MyRegistry --query loginServer
  - name: Get the details of an Azure Container Registry
    text: az acr show --name MyRegistry --resource-group MyResourceGroup
    crafted: true
"""

helps['acr show-usage'] = """
type: command
short-summary: Get the storage usage for an Azure Container Registry.
examples:
  - name: Get the storage usage for an Azure Container Registry.
    text: >
        az acr show-usage -n MyRegistry
"""

helps['acr task'] = """
type: group
short-summary: Manage a collection of steps for building, testing and OS & Framework patching container images using Azure Container Registries.
"""

helps['acr task cancel-run'] = """
type: command
short-summary: Cancel a specified run of an Azure Container Registry.
examples:
  - name: Cancel a run
    text: >
        az acr task cancel-run -r MyRegistry --run-id runId
"""

helps['acr task create'] = """
type: command
short-summary: Creates a series of steps for building, testing and OS & Framework patching containers. Tasks support triggers from git commits and base image updates.
examples:
  - name: Create a task without the source location.
    text: >
        az acr task create -n hello-world -r MyRegistry --cmd MyImage -c /dev/null
  - name: Create a task without the source location and with a timer trigger that runs the image `MyImage` at the top of every hour using the default trigger name.
    text: >
        az acr task create -n hello-world -r MyRegistry --cmd MyImage -c /dev/null --schedule "0 */1 * * *"
  - name: Create a task with the definition from the standard input. Either 'Ctrl + Z'(Windows) or 'Ctrl + D'(Linux) terminates the input stream.
    text: >
        az acr task create -n hello-world -r MyRegistry -f - -c /dev/null
  - name: Create a task with the definition from the pipe.
    text: >
        cat task.yaml | az acr task create -n hello-world -r MyRegistry -f - -c /dev/null
  - name: Create a Linux task from a public GitHub repository which builds the hello-world image without triggers.
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-build-helloworld-node.git -f Dockerfile --commit-trigger-enabled false \\
            --pull-request-trigger-enabled false
  - name: Create a Linux task from a public GitHub repository which builds the hello-world image without triggers and uses a build argument.
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure/acr-builder.git -f Dockerfile --commit-trigger-enabled false \\
            --pull-request-trigger-enabled false --arg DOCKER_CLI_BASE_IMAGE=docker:18.03.0-ce-git
  - name: Create a Linux task using a private GitHub repository which builds the hello-world image without triggers on Arm architecture (V7 variant)
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-build-helloworld-node.git -f Dockerfile --commit-trigger-enabled false \\
            --pull-request-trigger-enabled false --git-access-token 0000000000000000000000000000000000000000 --platform linux/arm/v7
  - name: Create a Linux task from a public GitHub repository which builds the hello-world image with a git commit trigger. Note that this task does not use Source Registry (MyRegistry), so we can explicitly set Auth mode as None for it.
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            --auth-mode None -c https://github.com/Azure-Samples/acr-build-helloworld-node.git -f Dockerfile \\
            --git-access-token 0000000000000000000000000000000000000000
  - name: Create a Windows task from a public GitHub repository which builds the Azure Container Builder image on Amd64 architecture.
    text: |
        az acr task create -t acb:{{.Run.ID}} -n acb-win -r MyRegistry \\
            -c https://github.com/Azure/acr-builder.git -f Windows.Dockerfile \\
            --commit-trigger-enabled false --pull-request-trigger-enabled false --platform Windows/amd64
  - name: Create a Linux multi-step task from a public GitHub repository with a git commit trigger and with the system-assigned managed identity
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-tasks.git#:multipleRegistries -f testtask.yaml \\
            --assign-identity
  - name: Create a Linux multi-step task from a public GitHub repository with a git commit trigger and with a user-assigned managed identity
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-tasks.git#:multipleRegistries -f testtask.yaml \\
            --assign-identity "/subscriptions/<SUBSCRIPTON ID>/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentitiy"
  - name: Create a Linux multi-step task from a public GitHub repository with a git commit trigger and with both system-assigned and user-assigned managed identities
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-tasks.git#:multipleRegistries -f testtask.yaml \\
            --assign-identity [system] "/subscriptions/<SUBSCRIPTON ID>/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentitiy"
  - name: Create a Linux multi-step task from a public GitHub repository with a system-assigned managed identity and a timer trigger that runs that task at noon on Mondays through Fridays using the default trigger name.
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-tasks.git#:multipleRegistries -f testtask.yaml \\
            --commit-trigger-enabled false --pull-request-trigger-enabled false \\
            --assign-identity --schedule "0 12 * * Mon-Fri"
  - name: Create a Linux task from a public GitHub repository which builds the hello-world image with a git commit trigger and a timer trigger that runs that task at noon on Mondays through Fridays with the trigger name provided.
    text: |
        az acr task create -t hello-world:{{.Run.ID}} -n hello-world -r MyRegistry \\
            -c https://github.com/Azure-Samples/acr-build-helloworld-node.git -f Dockerfile \\
            --schedule "dailyTimer:0 12 * * Mon-Fri"
"""

helps['acr task credential'] = """
type: group
short-summary: Manage credentials for a task
"""

helps['acr task credential add'] = """
type: command
short-summary: Add a custom registry login credential to the task
examples:
  - name: Add a registry login credential to a task using a plain text username and password.
    text: |
        az acr task credential add -n taskname -r registryname --login-server myregistry.docker.io \\
            -u 'myusername' -p 'mysecret'
  - name: Add a registry login credential to a task using key vault secret URIs for the username and password and the task system-assigned identity.
    text: |
        az acr task credential add -n taskname -r registryname --login-server myregistry.docker.io \\
            -u 'https://mykeyvault.vault.azure.net/secrets/secretusername' -p 'https://mykeyvault.vault.azure.net/secrets/secretpassword' \\
            --use-identity [system]
  - name: Add a registry login credential to a task using key vault secret URIs for the username and password and a task user-assigned identity given by its client id.
    text: |
        az acr task credential add -n taskname -r registryname --login-server myregistry.docker.io \\
            -u 'https://mykeyvault.vault.azure.net/secrets/secretusername' -p 'https://mykeyvault.vault.azure.net/secrets/secretpassword' \\
            --use-identity 00000000-0000-0000-0000-000000000000
  - name: Add a registry login credential to a task using a plain text username and key vault secret URI for the password and the task user-assigned identity given by its client id.
    text: |
        az acr task credential add -n taskname -r registryname --login-server myregistry.docker.io \\
            -u 'myusername' -p 'https://mykeyvault.vault.azure.net/secrets/secretpassword' \\
            --use-identity 00000000-0000-0000-0000-000000000000
  - name: Add a registry login credential to a task using a plain text username and key vault secret URI for the password and the default managed identity for the task if one exists.
    text: |
        az acr task credential add -n taskname -r registryname --login-server myregistry.docker.io \\
            -u 'myusername' -p 'https://mykeyvault.vault.azure.net/secrets/secretpassword'
  - name: Add a registry login credential to a task that uses only the task system-assigned identity to authenticate to the registry.
    text: |
        az acr task credential add -n taskname -r registryname --login-server myregistry.docker.io \\
            --use-identity [system]
"""

helps['acr task credential list'] = """
type: command
short-summary: List all the custom registry credentials for task.
examples:
  - name: List the Credentials for a task.
    text: >
        az acr task credential list -n taskname -r registryname
"""

helps['acr task credential remove'] = """
type: command
short-summary: Remove credential for a task.
examples:
  - name: Remove a registry login credential from a task.
    text: >
        az acr task credential remove -n taskname -r registryname --login-server myregistry.docker.io
"""

helps['acr task credential update'] = """
type: command
short-summary: Update the registry login credential for a task.
examples:
  - name: Update the credential for a task
    text: |
        az acr task credential update -n taskname -r registryname --login-server myregistry.docker.io \\
            -u 'myusername2' -p 'mysecret'
"""

helps['acr task delete'] = """
type: command
short-summary: Delete a task from an Azure Container Registry.
examples:
  - name: Delete a task from an Azure Container Registry.
    text: >
        az acr task delete -n MyTask -r MyRegistry
"""

helps['acr task identity'] = """
type: group
short-summary: Managed Service Identities for Task.
"""

helps['acr task identity assign'] = """
type: command
short-summary: Update the managed service identity for a task.
examples:
  - name: Enable the system-assigned identity on an existing task. This will replace all existing user-assigned identities for that task.
    text: >
        az acr task identity assign -n MyTask -r MyRegistry
  - name: Assign user-assigned managed identities to an existing task. This will remove the existing system-assigned identity.
    text: |
        az acr task identity assign -n MyTask -r MyRegistry \\
            --identities "/subscriptions/<SUBSCRIPTON ID>/resourcegroups/<RESOURCE GROUP>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentitiy"
  - name: Assign both system-assigned and user-assigned managed identities to an existing task.
    text: |
        az acr task identity assign -n MyTask -r MyRegistry \\
            --identities [system] "/subscriptions/<SUBSCRIPTON ID>/resourcegroups/<RESOURCE GROUP>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentitiy"
"""

helps['acr task identity remove'] = """
type: command
short-summary: Remove managed service identities for a task.
examples:
  - name: Remove the system-assigned identity from a task.
    text: >
        az acr task identity remove -n MyTask -r MyRegistry
  - name: Remove a user-assigned identity from a task.
    text: |
        az acr task identity remove -n MyTask -r MyRegistry \\
            --identities "/subscriptions/<SUBSCRIPTON ID>/resourcegroups/<RESOURCE GROUP>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentitiy"
  - name: Remove all managed identities from a task.
    text: >
        az acr task identity remove -n MyTask -r MyRegistry --identities [all]
"""

helps['acr task identity show'] = """
type: command
short-summary: Display the managed service identities for task.
examples:
  - name: Display the managed service identities for a task.
    text: >
        az acr task identity show -n MyTask -r MyRegistry
"""

helps['acr task list'] = """
type: command
short-summary: List the tasks for an Azure Container Registry.
examples:
  - name: List tasks and show the results in a table.
    text: >
        az acr task list -r MyRegistry -o table
"""

helps['acr task list-runs'] = """
type: command
short-summary: List all of the executed runs for an Azure Container Registry, with the ability to filter by a specific Task.
examples:
  - name: List all of the runs for a registry and show the results in a table.
    text: >
        az acr task list-runs -r MyRegistry -o table
  - name: List runs for a task and show the results in a table.
    text: >
        az acr task list-runs -r MyRegistry -n MyTask -o table
  - name: List the last 10 successful runs for a registry and show the results in a table.
    text: >
        az acr task list-runs -r MyRegistry --run-status Succeeded --top 10 -o table
  - name: List all of the runs that built the image 'hello-world' for a registry and show the results in a table.
    text: >
        az acr task list-runs -r MyRegistry --image hello-world -o table
"""

helps['acr task logs'] = """
type: command
short-summary: Show logs for a particular run. If no run-id is supplied, show logs for the last created run.
examples:
  - name: Show logs for the last created run in the registry.
    text: >
        az acr task logs -r MyRegistry
  - name: Show logs for the last created run in the registry, filtered by task.
    text: >
        az acr task logs -r MyRegistry -n MyTask
  - name: Show logs for a particular run.
    text: >
        az acr task logs -r MyRegistry --run-id runId
  - name: Show logs for the last created run in the registry that built the image 'hello-world'.
    text: >
        az acr task logs -r MyRegistry --image hello-world
"""

helps['acr task run'] = """
type: command
short-summary: Manually trigger a task that might otherwise be waiting for git commits or base image update triggers.
examples:
  - name: Trigger a task run.
    text: >
        az acr task run -n MyTask -r MyRegistry
  - name: Trigger a task run by overriding the context and file passed during Task create.
    text: >
        az acr task run -n MyTask -r MyRegistry -c https://github.com/Azure-Samples/acr-build-helloworld-node.git -f Dockerfile
  - name: Trigger a task run by adding or overriding build arguments set during Task create.
    text: |
        az acr task run -n MyTask -r MyRegistry --arg DOCKER_CLI_BASE_IMAGE=docker:18.03.0-ce-git
"""

helps['acr task show'] = """
type: command
short-summary: Get the properties of a named task for an Azure Container Registry.
examples:
  - name: Get the properties of a task, displaying the results in a table.
    text: >
        az acr task show -n MyTask -r MyRegistry -o table

  - name: Get the properties of a task, including secure properties.
    text: >
        az acr task show -n MyTask -r MyRegistry --with-secure-properties
"""

helps['acr task show-run'] = """
type: command
short-summary: Get the properties of a specified run of an Azure Container Registry Task.
examples:
  - name: Get the details of a run, displaying the results in a table.
    text: >
        az acr task show-run -r MyRegistry --run-id runId -o table
"""

helps['acr task timer'] = """
type: group
short-summary: Manage timer triggers for a task
"""

helps['acr task timer add'] = """
type: command
short-summary: Add a timer trigger to a task.
examples:
  - name: Add a timer trigger to a task.
    text: >
        az acr task timer add -n taskname -r registryname --timer-name t2 --schedule "30 9 * * 1-5"
"""

helps['acr task timer list'] = """
type: command
short-summary: List all timer triggers for a task.
examples:
  - name: List all timer triggers for a task.
    text: >
        az acr task timer list -n taskname -r registryname
"""

helps['acr task timer remove'] = """
type: command
short-summary: Remove a timer trigger from a task.
examples:
  - name: Remove a timer trigger from a task.
    text: >
        az acr task timer remove -n taskname -r registryname --timer-name t2
"""

helps['acr task timer update'] = """
type: command
short-summary: Update the timer trigger for a task.
examples:
  - name: Update the schedule of a timer trigger for a task.
    text: >
        az acr task timer update -n taskname -r registryname --timer-name t2 --schedule "0 12 * * *"
  - name: Update the status of a timer trigger for a task.
    text: >
        az acr task timer update -n taskname -r registryname --timer-name t2 --enabled False
"""

helps['acr task update'] = """
type: command
short-summary: Update a task for an Azure Container Registry.
examples:
  - name: Update base image updates to trigger on all dependent images of a multi-stage dockerfile, and status of a task in an Azure Container Registry.
    text: >
        az acr task update -n MyTask -r MyRegistry --base-image-trigger-type All --status Disabled
  - name: Update platform for the Build step of your Task to Windows (prev Linux).
    text: >
        az acr task update -n MyTask -r MyRegistry --platform Windows
  - name: Update a task for an Azure Container Registry. (autogenerated)
    text: az acr task update --context https://github.com/Azure-Samples/acr-build-helloworld-node.git --image MyImage --name MyTask --registry MyRegistry
    crafted: true
"""

helps['acr task update-run'] = """
type: command
short-summary: Patch the run properties of an Azure Container Registry Task.
examples:
  - name: Update an existing run to be archived.
    text: >
        az acr task update-run -r MyRegistry --run-id runId --no-archive false
"""

helps['acr update'] = """
type: command
short-summary: Update an Azure Container Registry.
examples:
  - name: Update tags for an Azure Container Registry.
    text: >
        az acr update -n MyRegistry --tags key1=value1 key2=value2
  - name: Enable the administrator user account for an Azure Container Registry.
    text: >
        az acr update -n MyRegistry --admin-enabled true
"""

helps['acr webhook'] = """
type: group
short-summary: Manage webhooks for Azure Container Registries.
"""

helps['acr webhook create'] = """
type: command
short-summary: Create a webhook for an Azure Container Registry.
examples:
  - name: Create a webhook for an Azure Container Registry that will deliver docker push and delete events to a service URI.
    text: >
        az acr webhook create -n MyWebhook -r MyRegistry --uri http://myservice.com --actions push delete
  - name: Create a webhook for an Azure Container Registry that will deliver docker push events to a service URI with a basic authentication header.
    text: >
        az acr webhook create -n MyWebhook -r MyRegistry --uri http://myservice.com --actions push --headers "Authorization=Basic 000000"
  - name: Create a webhook for an Azure Container Registry that will deliver helm chart push and delete events to a service URI.
    text: >
        az acr webhook create -n MyWebhook -r MyRegistry --uri http://myservice.com --actions chart_push chart_delete
"""

helps['acr webhook delete'] = """
type: command
short-summary: Delete a webhook from an Azure Container Registry.
examples:
  - name: Delete a webhook from an Azure Container Registry.
    text: >
        az acr webhook delete -n MyWebhook -r MyRegistry
"""

helps['acr webhook get-config'] = """
type: command
short-summary: Get the service URI and custom headers for the webhook.
examples:
  - name: Get the configuration information for a webhook.
    text: >
        az acr webhook get-config -n MyWebhook -r MyRegistry
"""

helps['acr webhook list'] = """
type: command
short-summary: List all of the webhooks for an Azure Container Registry.
examples:
  - name: List webhooks and show the results in a table.
    text: >
        az acr webhook list -r MyRegistry -o table
"""

helps['acr webhook list-events'] = """
type: command
short-summary: List recent events for a webhook.
examples:
  - name: List recent events for a webhook.
    text: >
        az acr webhook list-events -n MyWebhook -r MyRegistry
"""

helps['acr webhook ping'] = """
type: command
short-summary: Trigger a ping event for a webhook.
examples:
  - name: Trigger a ping event for a webhook.
    text: >
        az acr webhook ping -n MyWebhook -r MyRegistry
"""

helps['acr webhook show'] = """
type: command
short-summary: Get the details of a webhook.
examples:
  - name: Get the details of a webhook.
    text: >
        az acr webhook show -n MyWebhook -r MyRegistry
"""

helps['acr webhook update'] = """
type: command
short-summary: Update a webhook.
examples:
  - name: Update headers for a webhook.
    text: >
        az acr webhook update -n MyWebhook -r MyRegistry --headers "Authorization=Basic 000000"
  - name: Update the service URI and actions for a webhook.
    text: >
        az acr webhook update -n MyWebhook -r MyRegistry --uri http://myservice.com --actions push delete
  - name: Disable a webhook.
    text: >
        az acr webhook update -n MyWebhook -r MyRegistry --status disabled
"""

helps['acs'] = """
type: group
short-summary: Manage Azure Container Services.
long-summary: |
    ACS will be retired as a standalone service on January 31, 2020.

    If you use the Kubernetes orchestrator, please migrate to AKS by January 31, 2020.
"""

helps['acs browse'] = """
type: command
short-summary: Show the dashboard for a service container's orchestrator in a web browser.
examples:
  - name: Show the dashboard for a service container's orchestrator in a web browser. (autogenerated)
    text: az acs browse --name MyContainerService --resource-group MyResourceGroup
    crafted: true
"""

helps['acs create'] = """
type: command
short-summary: Create a new container service.
parameters:
  - name: --service-principal
    type: string
    short-summary: Service principal used for authentication to Azure APIs.
    long-summary: If not specified, a new service principal with the contributor role is created and cached at $HOME/.azure/acsServicePrincipal.json to be used by subsequent `az acs` commands.
  - name: --client-secret
    type: string
    short-summary: Secret associated with the service principal. This argument is required if `--service-principal` is specified.
  - name: --agent-count
    short-summary: Set the default number of agents for the agent pools.
    long-summary: Note that DC/OS clusters will have 1 or 2 additional public agents.
examples:
  - name: Create a DCOS cluster with an existing SSH key.
    text: |-
        az acs create --orchestrator-type DCOS -g MyResourceGroup -n MyContainerService \\
          --ssh-key-value /path/to/publickey
  - name: Create a DCOS cluster with two agent pools.
    text: |-
        az acs create -g MyResourceGroup -n MyContainerService --agent-profiles '[ \\
          { \\
            "name": "agentpool1" \\
          }, \\
          { \\
            "name": "agentpool2" \\
          }]'
  - name: Create a DCOS cluster where the second agent pool has a vmSize specified.
    text: |-
        az acs create -g MyResourceGroup -n MyContainerService --agent-profiles '[ \\
          { \\
            "name": "agentpool1" \\
          }, \\
          { \\
            "name": "agentpool2", \\
            "vmSize": "Standard_D2" \\
          }]'
  - name: Create a DCOS cluster with agent-profiles specified from a file.
    text: az acs create -g MyResourceGroup -n MyContainerService --agent-profiles MyAgentProfiles.json
"""

helps['acs dcos'] = """
type: group
short-summary: Commands to manage a DC/OS-orchestrated Azure Container Service.
"""

helps['acs dcos install-cli'] = """
type: command
short-summary: Download and install the DC/OS command-line tool for a cluster.
"""

helps['acs delete'] = """
type: command
short-summary: Delete a container service.
examples:
  - name: Delete a container service. (autogenerated)
    text: az acs delete --name MyContainerService --resource-group MyResourceGroup
    crafted: true
"""

helps['acs kubernetes'] = """
type: group
short-summary: Commands to manage a Kubernetes-orchestrated Azure Container Service.
"""

helps['acs kubernetes get-credentials'] = """
type: command
short-summary: Download and install credentials to access a cluster.  This command requires the same private-key used to create the cluster.
parameters:
  - name: --output -o
    type: string
    long-summary: Credentials are always in YAML format, so this argument is effectively ignored.
examples:
  - name: Download and install credentials to access a cluster.  This command requires the same private-key used to create the cluster. (autogenerated)
    text: az acs kubernetes get-credentials --name MyContainerService --resource-group MyResourceGroup
    crafted: true
"""

helps['acs kubernetes install-cli'] = """
type: command
short-summary: Download and install the Kubernetes command-line tool for a cluster.
"""

helps['acs list'] = """
type: command
short-summary: List container services.
"""

helps['acs list-locations'] = """
type: command
short-summary: List locations where Azure Container Service is in preview and in production.
"""

helps['acs scale'] = """
type: command
short-summary: Change the private agent count of a container service.
parameters:
  - name: --new-agent-count
    type: int
    short-summary: The number of agents for the container service.
examples:
  - name: Change the private agent count of a container service. (autogenerated)
    text: az acs scale --name MyContainerService --new-agent-count 10 --resource-group MyResourceGroup
    crafted: true
"""

helps['acs show'] = """
type: command
short-summary: Show the details for a container service.
examples:
  - name: Show the details for a container service. (autogenerated)
    text: az acs show --name MyContainerService --resource-group MyResourceGroup
    crafted: true
"""

helps['acs wait'] = """
type: command
short-summary: Wait for a container service to reach a desired state.
long-summary: If an operation on a container service was interrupted or was started with `--no-wait`, use this command to wait for it to complete.
"""

helps['advisor'] = """
type: group
short-summary: Manage Azure Advisor.
"""

helps['advisor configuration'] = """
type: group
short-summary: Manage Azure Advisor configuration.
"""

helps['advisor configuration list'] = """
type: command
short-summary: List Azure Advisor configuration for the entire subscription.
"""

helps['advisor configuration show'] = """
type: command
short-summary: Show Azure Advisor configuration for the given subscription or resource group.
"""

helps['advisor configuration update'] = """
type: command
short-summary: Update Azure Advisor configuration.
examples:
  - name: Update low CPU threshold for a given subscription to 20%.
    text: >
        az advisor configuration update -l 20
  - name: Exclude a given resource group from recommendation generation.
    text: >
        az advisor configuration update -g myRG -e
"""

helps['advisor recommendation'] = """
type: group
short-summary: Review Azure Advisor recommendations.
"""

helps['advisor recommendation disable'] = """
type: command
short-summary: Disable Azure Advisor recommendations.
"""

helps['advisor recommendation enable'] = """
type: command
short-summary: Enable Azure Advisor recommendations.
"""

helps['advisor recommendation list'] = """
type: command
short-summary: List Azure Advisor recommendations.
"""

helps['aks'] = """
type: group
short-summary: Manage Azure Kubernetes Services.
"""

helps['aks browse'] = """
type: command
short-summary: Show the dashboard for a Kubernetes cluster in a web browser.
parameters:
  - name: --disable-browser
    type: bool
    short-summary: Don't launch a web browser after establishing port-forwarding.
    long-summary: Add this argument when launching a web browser manually, or for automated testing.
  - name: --listen-port
    short-summary: The listening port for the dashboard.
    long-summary: Add this argument when the default listening port is used by another process or unavailable.
  - name: --listen-address
    short-summary: The listening address for the dashboard.
    long-summary: Add this argument to listen on a specific IP address.
examples:
  - name: Show the dashboard for a Kubernetes cluster in a web browser. (autogenerated)
    text: az aks browse --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks create'] = """
type: command
short-summary: Create a new managed Kubernetes cluster.
parameters:
  - name: --generate-ssh-keys
    type: string
    short-summary: Generate SSH public and private key files if missing. The keys will be stored in the ~/.ssh directory.
  - name: --service-principal
    type: string
    short-summary: Service principal used for authentication to Azure APIs.
    long-summary: If not specified, a new service principal is created and cached at $HOME/.azure/aksServicePrincipal.json to be used by subsequent `az aks` commands.
  - name: --skip-subnet-role-assignment
    type: bool
    short-summary: Skip role assignment for subnet (advanced networking).
    long-summary: If specified, please make sure your service principal has the access to your subnet.
  - name: --client-secret
    type: string
    short-summary: Secret associated with the service principal. This argument is required if `--service-principal` is specified.
  - name: --node-vm-size -s
    type: string
    short-summary: Size of Virtual Machines to create as Kubernetes nodes.
  - name: --dns-name-prefix -p
    type: string
    short-summary: Prefix for hostnames that are created. If not specified, generate a hostname using the managed cluster and resource group names.
  - name: --node-count -c
    type: int
    short-summary: Number of nodes in the Kubernetes node pool. After creating a cluster, you can change the size of its node pool with `az aks scale`.
  - name: --node-osdisk-size
    type: int
    short-summary: Size in GB of the OS disk for each node in the node pool. Minimum 30 GB.
  - name: --kubernetes-version -k
    type: string
    short-summary: Version of Kubernetes to use for creating the cluster, such as "1.11.8" or "1.12.6".
    populator-commands:
      - "`az aks get-versions`"
  - name: --ssh-key-value
    type: string
    short-summary: Public key path or key contents to install on node VMs for SSH access. For example, 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'.
  - name: --admin-username -u
    type: string
    short-summary: User account to create on node VMs for SSH access.
  - name: --aad-client-app-id
    type: string
    short-summary: The ID of an Azure Active Directory client application of type "Native". This application is for user login via kubectl.
  - name: --aad-server-app-id
    type: string
    short-summary: The ID of an Azure Active Directory server application of type "Web app/API". This application represents the managed cluster's apiserver (Server application).
  - name: --aad-server-app-secret
    type: string
    short-summary: The secret of an Azure Active Directory server application.
  - name: --aad-tenant-id
    type: string
    short-summary: The ID of an Azure Active Directory tenant.
  - name: --dns-service-ip
    type: string
    short-summary: An IP address assigned to the Kubernetes DNS service.
    long-summary: This address must be within the Kubernetes service address range specified by "--service-cidr". For example, 10.0.0.10.
  - name: --docker-bridge-address
    type: string
    short-summary: A specific IP address and netmask for the Docker bridge, using standard CIDR notation.
    long-summary: This address must not be in any Subnet IP ranges, or the Kubernetes service address range. For example, 172.17.0.1/16.
  - name: --enable-addons -a
    type: string
    short-summary: Enable the Kubernetes addons in a comma-separated list.
    long-summary: |-
        These addons are available:
            http_application_routing - configure ingress with automatic public DNS name creation.
            monitoring - turn on Log Analytics monitoring. Uses the Log Analytics Default Workspace if it exists, else creates one. Specify "--workspace-resource-id" to use an existing workspace.
            virtual-node - enable AKS Virtual Node (PREVIEW). Requires --subnet-name to provide the name of an existing subnet for the Virtual Node to use.
  - name: --disable-rbac
    type: bool
    short-summary: Disable Kubernetes Role-Based Access Control.
  - name: --enable-rbac -r
    type: bool
    short-summary: "Enable Kubernetes Role-Based Access Control. Default: enabled."
  - name: --max-pods -m
    type: int
    short-summary: The maximum number of pods deployable to a node.
    long-summary: If not specified, defaults to 110, or 30 for advanced networking configurations.
  - name: --network-plugin
    type: string
    short-summary: The Kubernetes network plugin to use.
    long-summary: Specify "azure" for advanced networking configurations. Defaults to "kubenet".
  - name: --network-policy
    type: string
    short-summary: The Kubernetes network policy to use.
    long-summary: |
        Using together with "azure" network plugin.
        Specify "azure" for Azure network policy manager and "calico" for calico network policy controller.
        Defaults to "" (network policy disabled).
  - name: --no-ssh-key -x
    type: string
    short-summary: Do not use or create a local SSH key.
    long-summary: To access nodes after creating a cluster with this option, use the Azure Portal.
  - name: --pod-cidr
    type: string
    short-summary: A CIDR notation IP range from which to assign pod IPs when kubenet is used.
    long-summary: This range must not overlap with any Subnet IP ranges. For example, 172.244.0.0/16.
  - name: --service-cidr
    type: string
    short-summary: A CIDR notation IP range from which to assign service cluster IPs.
    long-summary: This range must not overlap with any Subnet IP ranges. For example, 10.0.0.0/16.
  - name: --vnet-subnet-id
    type: string
    short-summary: The ID of a subnet in an existing VNet into which to deploy the cluster.
  - name: --workspace-resource-id
    type: string
    short-summary: The resource ID of an existing Log Analytics Workspace to use for storing monitoring data. If not specified, uses the default Log Analytics Workspace if it exists, otherwise creates one.

examples:
  - name: Create a Kubernetes cluster with an existing SSH public key.
    text: az aks create -g MyResourceGroup -n MyManagedCluster --ssh-key-value /path/to/publickey
  - name: Create a Kubernetes cluster with a specific version.
    text: az aks create -g MyResourceGroup -n MyManagedCluster --kubernetes-version 1.12.6
  - name: Create a Kubernetes cluster with a larger node pool.
    text: az aks create -g MyResourceGroup -n MyManagedCluster --node-count 7
"""

helps['aks delete'] = """
type: command
short-summary: Delete a managed Kubernetes cluster.
examples:
  - name: Delete a managed Kubernetes cluster. (autogenerated)
    text: az aks delete --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks disable-addons'] = """
type: command
short-summary: Disable Kubernetes addons.
parameters:
  - name: --addons -a
    type: string
    short-summary: Disable the Kubernetes addons in a comma-separated list.
examples:
  - name: Disable Kubernetes addons. (autogenerated)
    text: az aks disable-addons --addons virtual-node --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks enable-addons'] = """
type: command
short-summary: Enable Kubernetes addons.
long-summary: |-
    These addons are available:
        http_application_routing - configure ingress with automatic public DNS name creation.
        monitoring - turn on Log Analytics monitoring. Requires "--workspace-resource-id".
        virtual-node - enable AKS Virtual Node (PREVIEW). Requires --subnet-name to provide the name of an existing subnet for the Virtual Node to use.
parameters:
  - name: --addons -a
    type: string
    short-summary: Enable the Kubernetes addons in a comma-separated list.
  - name: --workspace-resource-id
    type: string
    short-summary: The resource ID of an existing Log Analytics Workspace to use for storing monitoring data.
examples:
  - name: Enable Kubernetes addons. (autogenerated)
    text: az aks enable-addons --addons virtual-node --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks get-credentials'] = """
type: command
short-summary: Get access credentials for a managed Kubernetes cluster.
parameters:
  - name: --admin -a
    type: bool
    short-summary: "Get cluster administrator credentials.  Default: cluster user credentials."
  - name: --file -f
    type: string
    short-summary: Kubernetes configuration file to update. Use "-" to print YAML to stdout instead.
  - name: --overwrite-existing
    type: bool
    short-summary: Overwrite any existing cluster entry with the same name.
  - name: --output -o
    type: string
    long-summary: Credentials are always in YAML format, so this argument is effectively ignored.
examples:
  - name: Get access credentials for a managed Kubernetes cluster. (autogenerated)
    text: az aks get-credentials --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks get-upgrades'] = """
type: command
short-summary: Get the upgrade versions available for a managed Kubernetes cluster.
examples:
  - name: Get the upgrade versions available for a managed Kubernetes cluster
    text: az aks get-upgrades --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks get-versions'] = """
type: command
short-summary: Get the versions available for creating a managed Kubernetes cluster.
examples:
  - name: Get the versions available for creating a managed Kubernetes cluster
    text: az aks get-versions --location westus2
    crafted: true
"""

helps['aks install-cli'] = """
type: command
short-summary: Download and install kubectl, the Kubernetes command-line tool.
"""

helps['aks install-connector'] = """
type: command
short-summary: Install the ACI Connector on a managed Kubernetes cluster.
parameters:
  - name: --chart-url
    type: string
    short-summary: URL of a Helm chart that installs ACI Connector.
  - name: --connector-name
    type: string
    short-summary: Name of the ACI Connector.
  - name: --os-type
    type: string
    short-summary: Install support for deploying ACIs of this operating system type.
  - name: --service-principal
    type: string
    short-summary: Service principal used for authentication to Azure APIs.
    long-summary: If not specified, use the AKS service principal defined in the file /etc/kubernetes/azure.json on the node which runs the virtual kubelet pod.
  - name: --client-secret
    type: string
    short-summary: Secret associated with the service principal. This argument is required if `--service-principal` is specified.
  - name: --image-tag
    type: string
    short-summary: The image tag of the virtual kubelet. Use 'latest' if it is not specified
  - name: --aci-resource-group
    type: string
    short-summary: The resource group to create the ACI container groups. Use the MC_* resource group if it is not specified.
  - name: --location -l
    type: string
    short-summary: The location to create the ACI container groups. Use the location of the MC_* resource group if it is not specified.
examples:
  - name: Install the ACI Connector for Linux to a managed Kubernetes cluster.
    text: |-
        az aks install-connector --name MyManagedCluster --resource-group MyResourceGroup
  - name: Install the ACI Connector for Windows to a managed Kubernetes cluster.
    text: |-
        az aks install-connector --name MyManagedCluster --resource-group MyResourceGroup \\
           --connector-name aci-connector --os-type Windows
  - name: Install the ACI Connector for both Windows and Linux to a managed Kubernetes cluster.
    text: |-
        az aks install-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector --os-type Both
  - name: Install the ACI Connector using a specific service principal in a specific resource group.
    text: |-
        az aks install-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector --service-principal {SPN_ID} --client-secret {SPN_SECRET} \\
          --aci-resource-group ACI-resource-group
  - name: Install the ACI Connector from a custom Helm chart with custom tag.
    text: |-
        az aks install-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector --chart-url {CustomURL} --image-tag {VirtualKubeletImageTag}
"""

helps['aks list'] = """
type: command
short-summary: List managed Kubernetes clusters.
"""

helps['aks remove-connector'] = """
type: command
short-summary: Remove the ACI Connector from a managed Kubernetes cluster.
parameters:
  - name: --connector-name
    type: string
    short-summary: Name of the ACI Connector.
  - name: --graceful
    type: bool
    short-summary: Use a "cordon and drain" strategy to evict pods safely before removing the ACI node.
  - name: --os-type
    type: string
    short-summary: Remove support for deploying ACIs of this operating system type.
examples:
  - name: Remove the ACI Connector from a cluster using the graceful mode.
    text: |-
        az aks remove-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name MyConnector --graceful
"""

helps['aks remove-dev-spaces'] = """
type: command
short-summary: Remove Azure Dev Spaces from a managed Kubernetes cluster.
examples:
  - name: Remove Azure Dev Spaces from a managed Kubernetes cluster.
    text: |-
        az aks remove-dev-spaces -g my-aks-group -n my-aks
  - name: Remove Azure Dev Spaces from a managed Kubernetes cluster without prompting.
    text: |-
        az aks remove-dev-spaces -g my-aks-group -n my-aks --yes
"""

helps['aks scale'] = """
type: command
short-summary: Scale the node pool in a managed Kubernetes cluster.
parameters:
  - name: --node-count -c
    type: int
    short-summary: Number of nodes in the Kubernetes node pool.
examples:
  - name: Scale the node pool in a managed Kubernetes cluster. (autogenerated)
    text: az aks scale --name MyManagedCluster --node-count 3 --resource-group MyResourceGroup
    crafted: true
"""

helps['aks show'] = """
type: command
short-summary: Show the details for a managed Kubernetes cluster.
examples:
  - name: Show the details for a managed Kubernetes cluster
    text: az aks show --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks update-credentials'] = """
type: command
short-summary: Update credentials for a managed Kubernetes cluster, like service principal.
parameters:
  - name: --reset-service-principal
    type: bool
    short-summary: Reset service principal for a managed cluster.
  - name: --service-principal
    type: string
    short-summary: Service principal used for authentication to Azure APIs. This argument is required if `--reset-service-principal` is specified.
  - name: --client-secret
    type: string
    short-summary: Secret associated with the service principal. This argument is required if `--service-principal` is specified.
  - name: --reset-aad
    type: string
    short-summary: Reset Azure Active Directory configuration for a managed cluster.
  - name: --aad-server-app-id
    type: string
    short-summary: The ID of an Azure Active Directory server application. This argument is required if `--reset-aad` is specified.
  - name: --aad-server-app-secret
    type: string
    short-summary: The secret of an Azure Active Directory server application. This argument is required if `--reset-aad` is specified.
  - name: --aad-client-app-id
    type: string
    short-summary: The ID of an Azure Active Directory client application. This argument is required if `--reset-aad` is specified.
  - name: --aad-tenant-id
    type: string
    short-summary: Tenant ID associated with Azure Active Directory.

examples:
  - name: Update an existing Kubernetes cluster with new service principal.
    text: az aks update-credentials -g MyResourceGroup -n MyManagedCluster --reset-service-principal --service-principal MyNewServicePrincipalID --client-secret MyNewServicePrincipalSecret
  - name: Update an existing Azure Active Directory Kubernetes cluster with new server app secret key.
    text: az aks update-credentials -g MyResourceGroup -n MyManagedCluster --reset-aad --aad-server-app-id MyExistingAADServerAppID --aad-server-app-secret MyNewAADServerAppSecret --aad-client-app-id MyExistingAADClientAppID --aad-tenant-id MyAADTenantID
"""

helps['aks upgrade'] = """
type: command
short-summary: Upgrade a managed Kubernetes cluster to a newer version.
long-summary: "Kubernetes will be unavailable during cluster upgrades."
parameters:
  - name: --kubernetes-version -k
    type: string
    short-summary: Version of Kubernetes to upgrade the cluster to, such as "1.11.8" or "1.12.6".
    populator-commands:
      - "`az aks get-upgrades`"
examples:
  - name: Upgrade a managed Kubernetes cluster to a newer version. (autogenerated)
    text: az aks upgrade --kubernetes-version 1.12.6 --name MyManagedCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['aks upgrade-connector'] = """
type: command
short-summary: Upgrade the ACI Connector on a managed Kubernetes cluster.
parameters:
  - name: --chart-url
    type: string
    short-summary: URL of a Helm chart that installs ACI Connector.
  - name: --connector-name
    type: string
    short-summary: Name of the ACI Connector.
  - name: --os-type
    type: string
    short-summary: Install support for deploying ACIs of this operating system type.
  - name: --service-principal
    type: string
    short-summary: Service principal used for authentication to Azure APIs.
    long-summary: If not specified, use the AKS service principal defined in the file /etc/kubernetes/azure.json on the node which runs the virtual kubelet pod.
  - name: --client-secret
    type: string
    short-summary: Secret associated with the service principal. This argument is required if `--service-principal` is specified.
  - name: --image-tag
    type: string
    short-summary: The image tag of the virtual kubelet. Use 'latest' if it is not specified
  - name: --aci-resource-group
    type: string
    short-summary: The resource group to create the ACI container groups. Use the MC_* resource group if it is not specified.
  - name: --location -l
    type: string
    short-summary: The location to create the ACI container groups. Use the location of the MC_* resource group if it is not specified.
examples:
  - name: Upgrade the ACI Connector for Linux to a managed Kubernetes cluster.
    text: |-
        az aks upgrade-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector
  - name: Upgrade the ACI Connector for Windows to a managed Kubernetes cluster.
    text: |-
        az aks upgrade-connector --name MyManagedCluster --resource-group MyResourceGroup \\
           --connector-name aci-connector --os-type Windows
  - name: Upgrade the ACI Connector for both Windows and Linux to a managed Kubernetes cluster.
    text: |-
        az aks upgrade-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector --os-type Both
  - name: Upgrade the ACI Connector to use a specific service principal in a specific resource group.
    text: |-
        az aks upgrade-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector --service-principal {SPN_ID} --client-secret {SPN_SECRET} \\
          --aci-resource-group ACI-resource-group
  - name: Upgrade the ACI Connector from a custom Helm chart with custom tag.
    text: |-
        az aks upgrade-connector --name MyManagedCluster --resource-group MyResourceGroup \\
          --connector-name aci-connector --chart-url {CustomURL} --image-tag {VirtualKubeletImageTag}
"""

helps['aks use-dev-spaces'] = """
type: command
short-summary: Use Azure Dev Spaces with a managed Kubernetes cluster.
parameters:
  - name: --update
    type: bool
    short-summary: Update to the latest Azure Dev Spaces client components.
  - name: --space -s
    type: string
    short-summary: Name of the new or existing dev space to select. Defaults to an interactive selection experience.
examples:
  - name: Use Azure Dev Spaces with a managed Kubernetes cluster, interactively selecting a dev space.
    text: |-
        az aks use-dev-spaces -g my-aks-group -n my-aks
  - name: Use Azure Dev Spaces with a managed Kubernetes cluster, updating to the latest Azure Dev Spaces \\ client components and selecting a new or existing dev space 'my-space'.
    text: |-
        az aks use-dev-spaces -g my-aks-group -n my-aks --update --space my-space
  - name: Use Azure Dev Spaces with a managed Kubernetes cluster, selecting a new or existing dev space \\ 'develop/my-space' without prompting for confirmation.
    text: |-
        az aks use-dev-spaces -g my-aks-group -n my-aks -s develop/my-space -y
"""

helps['aks wait'] = """
type: command
short-summary: Wait for a managed Kubernetes cluster to reach a desired state.
long-summary: If an operation on a cluster was interrupted or was started with `--no-wait`, use this command to wait for it to complete.
examples:
  - name: Wait for a cluster to be upgraded, polling every minute for up to thirty minutes.
    text: |-
        az aks wait -g MyResourceGroup -n MyManagedCluster --updated --interval 60 --timeout 1800
"""

helps['ams'] = """
type: group
short-summary: Manage Azure Media Services resources.
"""

helps['ams account'] = """
type: group
short-summary: Manage Azure Media Services accounts.
"""

helps['ams account check-name'] = """
type: command
short-summary: Checks whether the Media Service resource name is available.
"""

helps['ams account create'] = """
type: command
short-summary: Create an Azure Media Services account.
"""

helps['ams account delete'] = """
type: command
short-summary: Delete an Azure Media Services account.
"""

helps['ams account list'] = """
type: command
short-summary: List Azure Media Services accounts for the entire subscription.
"""

helps['ams account mru'] = """
type: group
short-summary: Manage media reserved units for an Azure Media Services account.
"""

helps['ams account mru set'] = """
type: command
short-summary: Set the type and number of media reserved units for an Azure Media Services account.
"""

helps['ams account mru show'] = """
type: command
short-summary: Show the details of media reserved units for an Azure Media Services account.
"""

helps['ams account show'] = """
type: command
short-summary: Show the details of an Azure Media Services account.
"""

helps['ams account sp'] = """
type: group
short-summary: Manage service principal and role based access for an Azure Media Services account.
"""

helps['ams account sp create'] = """
type: command
short-summary: Create a service principal and configure its access to an Azure Media Services account.
long-summary: Service principal propagation throughout Azure Active Directory may take some extra seconds to complete.
examples:
  - name: Create a service principal with password and configure its access to an Azure Media Services account. Output will be in xml format.
    text: >
        az ams account sp create -a myAmsAccount -g myRG -n mySpName --password mySecret --role Owner --xml
"""

helps['ams account sp reset-credentials'] = """
type: command
short-summary: Generate a new client secret for a service principal configured for an Azure Media Services account.
"""

helps['ams account storage'] = """
type: group
short-summary: Manage storage for an Azure Media Services account.
"""

helps['ams account storage add'] = """
type: command
short-summary: Attach a secondary storage to an Azure Media Services account.
"""

helps['ams account storage remove'] = """
type: command
short-summary: Detach a secondary storage from an Azure Media Services account.
"""

helps['ams account storage sync-storage-keys'] = """
type: command
short-summary: Synchronize storage account keys for a storage account associated with an Azure Media Services account.
"""

helps['ams account update'] = """
type: command
short-summary: Update the details of an Azure Media Services account.
"""

helps['ams account-filter'] = """
type: group
short-summary: Manage account filters for an Azure Media Services account.
"""

helps['ams account-filter create'] = """
type: command
short-summary: Create an account filter.
examples:
  - name: Create an asset filter with filter track selections.
    text: >
        az ams account-filter create -a amsAccount -g resourceGroup -n filterName --force-end-timestamp=False --end-timestamp 200000 --start-timestamp 100000 --live-backoff-duration 60 --presentation-window-duration 600000 --timescale 1000 --first-quality 720 --tracks @C:\\tracks.json
"""

helps['ams account-filter delete'] = """
type: command
short-summary: Delete an account filter.
"""

helps['ams account-filter list'] = """
type: command
short-summary: List all the account filters of an Azure Media Services account.
"""

helps['ams account-filter show'] = """
type: command
short-summary: Show the details of an account filter.
"""

helps['ams account-filter update'] = """
type: command
short-summary: Update the details of an account filter.
"""

helps['ams asset'] = """
type: group
short-summary: Manage assets for an Azure Media Services account.
"""

helps['ams asset create'] = """
type: command
short-summary: Create an asset.
"""

helps['ams asset delete'] = """
type: command
short-summary: Delete an asset.
"""

helps['ams asset get-encryption-key'] = """
type: command
short-summary: Get the asset storage encryption keys used to decrypt content created by version 2 of the Media Services API.
"""

helps['ams asset get-sas-urls'] = """
type: command
short-summary: Lists storage container URLs with shared access signatures (SAS) for uploading and downloading Asset content. The signatures are derived from the storage account keys.
"""

helps['ams asset list'] = """
type: command
short-summary: List all the assets of an Azure Media Services account.
examples:
  - name: List all the assets whose names start with the string 'Something'.
    text: >
        az ams asset list -a amsAccount -g resourceGroup --query [?starts_with(name,'Something')]
"""

helps['ams asset list-streaming-locators'] = """
type: command
short-summary: List streaming locators which are associated with this asset.
"""

helps['ams asset show'] = """
type: command
short-summary: Show the details of an asset.
"""

helps['ams asset update'] = """
type: command
short-summary: Update the details of an asset.
"""

helps['ams asset-filter'] = """
type: group
short-summary: Manage asset filters for an Azure Media Services account.
"""

helps['ams asset-filter create'] = """
type: command
short-summary: Create an asset filter.
examples:
  - name: Create an asset filter with filter track selections.
    text: >
        az ams asset-filter create -a amsAccount -g resourceGroup -n filterName --force-end-timestamp=False --end-timestamp 200000 --start-timestamp 100000 --live-backoff-duration 60 --presentation-window-duration 600000 --timescale 1000 --first-quality 720 --asset-name assetName --tracks @C:\\tracks.json
"""

helps['ams asset-filter delete'] = """
type: command
short-summary: Delete an asset filter.
"""

helps['ams asset-filter list'] = """
type: command
short-summary: List all the asset filters of an Azure Media Services account.
"""

helps['ams asset-filter show'] = """
type: command
short-summary: Show the details of an asset filter.
"""

helps['ams asset-filter update'] = """
type: command
short-summary: Update the details of an asset filter.
"""

helps['ams content-key-policy'] = """
type: group
short-summary: Manage content key policies for an Azure Media Services account.
"""

helps['ams content-key-policy create'] = """
type: command
short-summary: Create a new content key policy.
"""

helps['ams content-key-policy delete'] = """
type: command
short-summary: Delete a content key policy.
"""

helps['ams content-key-policy list'] = """
type: command
short-summary: List all the content key policies within an Azure Media Services account.
"""

helps['ams content-key-policy option'] = """
type: group
short-summary: Manage options for an existing content key policy.
"""

helps['ams content-key-policy option add'] = """
type: command
short-summary: Add a new option to an existing content key policy.
"""

helps['ams content-key-policy option remove'] = """
type: command
short-summary: Remove an option from an existing content key policy.
"""

helps['ams content-key-policy option update'] = """
type: command
short-summary: Update an option from an existing content key policy.
examples:
  - name: Update an existing content-key-policy by adding an alternate token key to an existing option.
    text: >
        az ams content-key-policy option update -n contentKeyPolicyName -g resourceGroup -a amsAccount --policy-option-id xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx --add-alt-token-key tokenKey --add-alt-token-key-type Symmetric
"""

helps['ams content-key-policy show'] = """
type: command
short-summary: Show an existing content key policy.
"""

helps['ams content-key-policy update'] = """
type: command
short-summary: Update an existing content key policy.
examples:
  - name: Update an existing content-key-policy, set a new description and edit its first option setting a new issuer and audience.
    text: >
        az ams content-key-policy update -n contentKeyPolicyName -a amsAccount --description newDescription --set options[0].restriction.issuer=newIssuer --set options[0].restriction.audience=newAudience
"""

helps['ams job'] = """
type: group
short-summary: Manage jobs for a transform.
"""

helps['ams job cancel'] = """
type: command
short-summary: Cancel a job.
"""

helps['ams job delete'] = """
type: command
short-summary: Delete a job.
"""

helps['ams job list'] = """
type: command
short-summary: List all the jobs of a transform within an Azure Media Services account.
examples:
  - name: List all the jobs of a transform with 'Normal' priority by name.
    text: >
        az ams job list -a amsAccount -g resourceGroup -t transformName --query [?priority=='Normal'].{jobName:name}
  - name: List all the jobs of a transform by name and input.
    text: >
        az ams job list -a amsAccount -g resourceGroup -t transformName --query [].{jobName:name,jobInput:input}
"""

helps['ams job show'] = """
type: command
short-summary: Show the details of a job.
"""

helps['ams job start'] = """
type: command
short-summary: Start a job.
"""

helps['ams job update'] = """
type: command
short-summary: Update an existing job.
"""

helps['ams live-event'] = """
type: group
short-summary: Manage live events for an Azure Media Service account.
"""

helps['ams live-event create'] = """
type: command
short-summary: Create a live event.
"""

helps['ams live-event delete'] = """
type: command
short-summary: Delete a live event.
"""

helps['ams live-event list'] = """
type: command
short-summary: List all the live events of an Azure Media Services account.
examples:
  - name: List all the live events by name and resourceState quickly.
    text: >
        az ams live-event list -a amsAccount -g resourceGroup --query [].{liveEventName:name,state:resourceState}
"""

helps['ams live-event reset'] = """
type: command
short-summary: Reset a live event.
"""

helps['ams live-event show'] = """
type: command
short-summary: Show the details of a live event.
"""

helps['ams live-event start'] = """
type: command
short-summary: Start a live event.
"""

helps['ams live-event stop'] = """
type: command
short-summary: Stop a live event.
"""

helps['ams live-event update'] = """
type: command
short-summary: Update the details of a live event.
examples:
  - name: Set a new allowed IP address and remove an existing IP address at index '0'.
    text: >
        az ams live-event update -a amsAccount -g resourceGroup -n liveEventName --remove input.accessControl.ip.allow 0 --add input.accessControl.ip.allow 1.2.3.4/22
  - name: Clear existing IP addresses and set new ones.
    text: >
        az ams live-event update -a amsAccount -g resourceGroup -n liveEventName --ips 1.2.3.4/22 5.6.7.8/30

"""

helps['ams live-event wait'] = """
type: command
short-summary: Place the CLI in a waiting state until a condition of the live event is met.
examples:
  - name: Place the CLI in a waiting state until the live event is created.
    text: az ams live-event wait -g MyResourceGroup -a MyAmsAccount -n MyLiveEvent --created
"""

helps['ams live-output'] = """
type: group
short-summary: Manage live outputs for an Azure Media Service account.
"""

helps['ams live-output create'] = """
type: command
short-summary: Create a live output.
"""

helps['ams live-output delete'] = """
type: command
short-summary: Delete a live output.
"""

helps['ams live-output list'] = """
type: command
short-summary: List all the live outputs in a live event.
"""

helps['ams live-output show'] = """
type: command
short-summary: Show the details of a live output.
"""

helps['ams streaming-endpoint'] = """
type: group
short-summary: Manage streaming endpoints for an Azure Media Service account.
"""

helps['ams streaming-endpoint akamai'] = """
type: group
short-summary: Manage AkamaiAccessControl objects to be used on streaming endpoints.
"""

helps['ams streaming-endpoint akamai add'] = """
type: command
short-summary: Add an AkamaiAccessControl to an existing streaming endpoint.
"""

helps['ams streaming-endpoint akamai remove'] = """
type: command
short-summary: Remove an AkamaiAccessControl from an existing streaming endpoint.
"""

helps['ams streaming-endpoint create'] = """
type: command
short-summary: Create a streaming endpoint.
"""

helps['ams streaming-endpoint delete'] = """
type: command
short-summary: Delete a streaming endpoint.
"""

helps['ams streaming-endpoint list'] = """
type: command
short-summary: List all the streaming endpoints within an Azure Media Services account.
"""

helps['ams streaming-endpoint scale'] = """
type: command
short-summary: Set the scale of a streaming endpoint.
"""

helps['ams streaming-endpoint show'] = """
type: command
short-summary: Show the details of a streaming endpoint.
"""

helps['ams streaming-endpoint start'] = """
type: command
short-summary: Start a streaming endpoint.
"""

helps['ams streaming-endpoint stop'] = """
type: command
short-summary: Stop a streaming endpoint.
"""

helps['ams streaming-endpoint update'] = """
type: command
short-summary: Update the details of a streaming endpoint.
"""

helps['ams streaming-endpoint wait'] = """
type: command
short-summary: Place the CLI in a waiting state until a condition of the streaming endpoint is met.
examples:
  - name: Place the CLI in a waiting state until the streaming endpoint is created.
    text: az ams streaming-endpoint wait -g MyResourceGroup -a MyAmsAccount -n MyStreamingEndpoint --created
"""

helps['ams streaming-locator'] = """
type: group
short-summary: Manage streaming locators for an Azure Media Services account.
"""

helps['ams streaming-locator create'] = """
type: command
short-summary: Create a streaming locator.
"""

helps['ams streaming-locator get-paths'] = """
type: command
short-summary: List paths supported by a streaming locator.
"""

helps['ams streaming-locator list'] = """
type: command
short-summary: List all the streaming locators within an Azure Media Services account.
"""

helps['ams streaming-locator list-content-keys'] = """
type: command
short-summary: List content keys used by a streaming locator.
"""

helps['ams streaming-locator show'] = """
type: command
short-summary: Show the details of a streaming locator.
"""

helps['ams streaming-policy'] = """
type: group
short-summary: Manage streaming policies for an Azure Media Services account.
"""

helps['ams streaming-policy create'] = """
type: command
short-summary: Create a streaming policy.
"""

helps['ams streaming-policy list'] = """
type: command
short-summary: List all the streaming policies within an Azure Media Services account.
"""

helps['ams streaming-policy show'] = """
type: command
short-summary: Show the details of a streaming policy.
"""

helps['ams transform'] = """
type: group
short-summary: Manage transforms for an Azure Media Services account.
"""

helps['ams transform create'] = """
type: command
short-summary: Create a transform.
examples:
  - name: Create a transform with AdaptiveStreaming built-in preset and High relative priority.
    text: >
        az ams transform create -a myAmsAccount -n transformName -g myResourceGroup --preset AdaptiveStreaming --relative-priority High
  - name: Create a transform with a custom Standard Encoder preset from a JSON file and Low relative priority.
    text: >
        az ams transform create -a myAmsAccount -n transformName -g myResourceGroup --preset "C:\\MyPresets\\CustomPreset.json" --relative-priority Low
"""

helps['ams transform delete'] = """
type: command
short-summary: Delete a transform.
"""

helps['ams transform list'] = """
type: command
short-summary: List all the transforms of an Azure Media Services account.
"""

helps['ams transform output'] = """
type: group
short-summary: Manage transform outputs for an Azure Media Services account.
"""

helps['ams transform output add'] = """
type: command
short-summary: Add an output to an existing transform.
examples:
  - name: Add an output with a custom Standard Encoder preset from a JSON file.
    text: >
        az ams transform output add -a myAmsAccount -n transformName -g myResourceGroup --preset "C:\\MyPresets\\CustomPreset.json"
  - name: Add an output with a VideoAnalyzer preset with es-ES as audio language and only with audio insights.
    text: >
        az ams transform output add -a myAmsAccount -n transformName -g myResourceGroup --preset VideoAnalyzer --audio-language es-ES --insights-to-extract AudioInsightsOnly
"""

helps['ams transform output remove'] = """
type: command
short-summary: Remove an output from an existing transform.
examples:
  - name: Remove the output element at the index specified with --output-index argument.
    text: >
        az ams transform output remove -a myAmsAccount -n transformName -g myResourceGroup --output-index 1
"""

helps['ams transform show'] = """
type: command
short-summary: Show the details of a transform.
"""

helps['ams transform update'] = """
type: command
short-summary: Update the details of a transform.
examples:
  - name: Update the first transform output of a transform by setting its relative priority to High.
    text: >
        az ams transform update -a myAmsAccount -n transformName -g myResourceGroup --set outputs[0].relativePriority=High
"""

helps['apim'] = """
type: group
short-summary: Manage Azure API Management services.
"""

helps['apim backup'] = """
type: command
short-summary: Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
"""

helps['apim create'] = """
type: command
short-summary: Create an API Management service instance.
parameters:
  - name: --name -n
    type: string
    short-summary: unique name of the service instance to be created
    long-summary: |
        The name must be globally unique since it will be included as the gateway
        hostname like' https://my-api-servicename.azure-api.net'.  See examples.
examples:
  - name: Create a Developer tier API Management service.
    text: |-
        az apim create --name MyApim -g MyResourceGroup -l eastus --publisher-email email@mydomain.com --publisher-name Microsoft
  - name: Create a Consumption tier API Management service.
    text: |-
        az apim create --name MyApim -g MyResourceGroup -l eastus --sku-name Consumption --enable-client-certificate \\
            --publisher-email email@mydomain.com --publisher-name Microsoft
"""

helps['apim delete'] = """
type: command
short-summary: Deletes an API Management service.
examples:
  - name: Delete an API Management service.
    text: >
        az apim delete -n MyApim -g MyResourceGroup
"""

helps['apim list'] = """
type: command
short-summary: List API Management service instances.
"""

helps['apim show'] = """
type: command
short-summary: Show details of an API Management service instance.
"""

helps['apim update'] = """
type: command
short-summary: Update an API Management service instance.
"""

helps['openshift'] = """
type: group
short-summary: Manage Azure Red Hat OpenShift Services.
"""

helps['openshift create'] = """
type: command
short-summary: Create a new managed OpenShift cluster.
parameters:
  - name: --compute-vm-size -s
    type: string
    short-summary: Size of Virtual Machines to create as OpenShift nodes.
  - name: --compute-count -c
    type: int
    short-summary: Number of nodes in the OpenShift node pool.
  - name: --aad-client-app-id
    type: string
    short-summary: The ID of an Azure Active Directory client application. If not specified, a new Azure Active Directory client is created.
  - name: --aad-client-app-secret
    type: string
    short-summary: The secret of an Azure Active Directory client application.
  - name: --aad-tenant-id
    type: string
    short-summary: The ID of an Azure Active Directory tenant.
  - name: --vnet-peer
    type: string
    short-summary: The ID or the name of a subnet in an existing VNet into which to peer the cluster.
  - name: --vnet-prefix
    type: string
    short-summary: The CIDR used on the VNet into which to deploy the cluster.
  - name: --subnet-prefix
    type: string
    short-summary: The CIDR used on the Subnet into which to deploy the cluster.
  - name: --customer-admin-group-id
    type: string
    short-summary: The Object ID of an Azure Active Directory Group that memberships will get synced into the OpenShift group "osa-customer-admins". If not specified, no cluster admin access will be granted.


examples:
  - name: Create an OpenShift cluster and auto create an AAD Client
    text: az openshift create -g MyResourceGroup -n MyManagedCluster
  - name: Create an OpenShift cluster and auto create an AAD Client and setup cluster admin group
    text: az openshift create -g MyResourceGroup -n MyManagedCluster --customer-admin-group-id {GROUP_ID}
  - name: Create an OpenShift cluster with 5 compute nodes and a custom AAD Client.
    text: az openshift create -g MyResourceGroup -n MyManagedCluster --aad-client-app-id {APP_ID} --aad-client-app-secret {APP_SECRET} --aad-tenant-id {TENANT_ID} --compute-count 5
  - name: Create an Openshift cluster using a custom vnet
    text: az openshift create -g MyResourceGroup -n MyManagedCluster --vnet-peer "/subscriptions/0000000-0000-0000-0000-000000000000/resourceGroups/openshift-vnet/providers/Microsoft.Network/virtualNetworks/test"
"""

helps['openshift delete'] = """
type: command
short-summary: Delete a managed OpenShift cluster.
examples:
  - name: Delete a managed OpenShift cluster. (autogenerated)
    text: az openshift delete --name MyManagedOpenShiftCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['openshift list'] = """
type: command
short-summary: List managed OpenShift clusters.
"""

helps['openshift scale'] = """
type: command
short-summary: Scale the compute pool in a managed OpenShift cluster.
parameters:
  - name: --compute-count -c
    type: int
    short-summary: Number of nodes in the OpenShift compute pool.
examples:
  - name: Scale the compute pool in a managed OpenShift cluster. (autogenerated)
    text: az openshift scale --compute-count 5 --name MyManagedOpenShiftCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['openshift show'] = """
type: command
short-summary: Show the details for a managed OpenShift cluster.
examples:
  - name: Show the details for a managed OpenShift cluster. (autogenerated)
    text: az openshift show --name MyManagedOpenShiftCluster --resource-group MyResourceGroup
    crafted: true
"""

helps['openshift wait'] = """
type: command
short-summary: Wait for a managed OpenShift cluster to reach a desired state.
long-summary: If an operation on a cluster was interrupted or was started with `--no-wait`, use this command to wait for it to complete.
examples:
  - name: Wait for a cluster to be upgraded, polling every minute for up to thirty minutes.
    text: |-
        az openshift wait -g MyResourceGroup -n MyManagedCluster --updated --interval 60 --timeout 1800
"""
