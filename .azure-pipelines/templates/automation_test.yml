# Azure DevOps task for automation test using azdev and pytest

parameters:
- name: pythonVersion
  type: string
  default: 3.10
- name: profile
  type: string
  default: latest
- name: instance_cnt
  type: string
  default: '1'
- name: instance_idx
  type: string
  default: '1'
  # instance_cnt = 8, instance_idx = 3: means we have 8 instances totally, and now we are scheduling modules on third instance
  # instance_cnt = 1, instance_idx = 1: means we only have 1 instance, so we don't need to schedule modules
- name: fullTest
  displayName: Run full test?
  type: boolean
  default: false
- name: module
  displayName: Run test for specific module
  type: string
  default: ''
- name: jobName
  displayName: Job name
  type: string
  default: ''

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.pythonVersion }}
      displayName: "Use Python ${{ parameters.pythonVersion }}"
  - template: ./azdev_setup.yml
    parameters:
      EnableCompactAAZ: true
  - bash: |
      set -ev

      source env/bin/activate
      echo jobName: ${{ parameters.jobName }}
      echo pythonVersion: ${{ parameters.pythonVersion }}
      echo profile: ${{ parameters.profile }}
      echo fullTest: ${{ parameters.fullTest }}
      echo module: ${{ parameters.module }}
      echo Build.Reason: $(Build.Reason)
      serial_modules="appservice botservice cloud network azure-cli-core azure-cli-telemetry"

      # Test specific module
      module="${{ parameters.module }}"
      if [[ -n $module ]]; then
        echo "Running test for module '$module'"
        # Determine whether the module belongs to serial_modules
        if [[ "$serial_modules" =~ "$module" ]]; then
          echo "Running in series"
          azdev test --no-exitfirst --verbose --series $module --pytest-args "--durations=10"
        else
          echo "Running in parallels"
          azdev test --no-exitfirst --verbose $module --pytest-args "--durations=10"
        fi
        exit 0
      fi

      if [[ "$(Build.Reason)" == "PullRequest" && "${{ parameters.fullTest }}" == 'False' ]]; then
        echo "Running incremental test"
        # If CI is set to shallow fetch, target branch should be expilictly fetched.
        git fetch origin --depth=1 $(System.PullRequest.TargetBranch)
        azdev test --no-exitfirst --repo=./ --src=HEAD --tgt=origin/$(System.PullRequest.TargetBranch) --cli-ci --profile ${{ parameters.profile }} --verbose --series --pytest-args "--durations=10"
      else
        echo "Running full test"
        python scripts/ci/automation_full_test.py "${{ parameters.instance_cnt }}" "${{ parameters.instance_idx }}" "${{ parameters.profile }}" "$serial_modules"
      fi
    displayName: "azdev test"
    env:
      ADO_PULL_REQUEST_LATEST_COMMIT: $(System.PullRequest.TargetBranch)
      PYTHON_VERSION: ${{ parameters.pythonVersion }}
      JOB_NAME: ${{ parameters.jobName }}
      PULL_REQUEST_NUMBER: $(System.PullRequest.PullRequestNumber)
  - bash: |
      pipelineTestJson='false'
      if [[ -f '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/pipeline_result_${{ parameters.pythonVersion }}_${{ parameters.profile }}_${{ parameters.instance_idx }}.json' ]]; then
        pipelineTestJson='true'
      fi
      echo $pipelineTestJson
      echo "##vso[task.setvariable variable=pipelineTestJson]$pipelineTestJson"

      pipelineTestParallelXml='false'
      if [[ -f '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_${{ parameters.pythonVersion }}_${{ parameters.profile }}_${{ parameters.instance_idx }}.parallel.xml' ]]; then
        pipelineTestParallelXml='true'
      fi
      echo $pipelineTestParallelXml
      echo "##vso[task.setvariable variable=pipelineTestParallelXml]$pipelineTestParallelXml"

      pipelineTestSerialXml='false'
      if [[ -f '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_${{ parameters.pythonVersion }}_${{ parameters.profile }}_${{ parameters.instance_idx }}.serial.xml' ]]; then
        pipelineTestSerialXml='true'
      fi
      echo $pipelineTestSerialXml
      echo "##vso[task.setvariable variable=pipelineTestSerialXml]$pipelineTestSerialXml"
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(), eq(variables.pipelineTestJson, 'true'))
    inputs:
      # /home/cloudtest/.azdev/env_config/mnt/vss/_work/1/s/env/pipeline_result_3.8_latest_1.json
      PathtoPublish: '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/pipeline_result_${{ parameters.pythonVersion }}_${{ parameters.profile }}_${{ parameters.instance_idx }}.json'
      ArtifactName: 'test_results'
      publishLocation: 'Container'
  # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/publish-build-artifacts-v1?view=azure-pipelines#inputs
  # Wildcards are not supported.
  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(), eq(variables.pipelineTestParallelXml, 'true'))
    inputs:
      # /home/cloudtest/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_3.8_latest_1.parallel.xml
      PathtoPublish: '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_${{ parameters.pythonVersion }}_${{ parameters.profile }}_${{ parameters.instance_idx }}.parallel.xml'
      # Use another artifact to publish the test results xml files, otherwise the bot will download too many files.
      ArtifactName: 'test_results_xml'
      publishLocation: 'Container'
  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(), eq(variables.pipelineTestSerialXml, 'true'))
    inputs:
      # /home/cloudtest/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_3.8_latest_1.serial.xml
      PathtoPublish: '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_${{ parameters.pythonVersion }}_${{ parameters.profile }}_${{ parameters.instance_idx }}.serial.xml'
      # # Use another artifact to publish the test results xml files, otherwise the bot will download too many files.
      ArtifactName: 'test_results_xml'
      publishLocation: 'Container'
  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), or(eq(variables.pipelineTestParallelXml, 'true'), eq(variables.pipelineTestSerialXml, 'true')))
    inputs:
      testResultsFiles: '/$(HOME)/.azdev/env_config/mnt/vss/_work/1/s/env/test_results_*.xml'
      testRunTitle: 'CLI full test results of instance ${{ parameters.instance_idx }}'
