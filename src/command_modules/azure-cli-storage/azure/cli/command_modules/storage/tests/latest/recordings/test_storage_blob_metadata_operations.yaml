interactions:
- request:
    body: '{"location": "westus", "tags": {"use": "az-test"}}'
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [group create]
      Connection: [keep-alive]
      Content-Length: ['50']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/3.5.3 (Windows-10-10.0.16299-SP0) requests/2.18.4 msrest/0.4.22
          msrest_azure/0.4.19 resourcemanagementclient/1.2.1 Azure-SDK-For-Python
          AZURECLI/2.0.24]
      accept-language: [en-US]
    method: PUT
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/clitest.rg000001?api-version=2017-05-10
  response:
    body: {string: '{"id":"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001","name":"clitest.rg000001","location":"westus","tags":{"use":"az-test"},"properties":{"provisioningState":"Succeeded"}}'}
    headers:
      cache-control: [no-cache]
      content-length: ['328']
      content-type: [application/json; charset=utf-8]
      date: ['Tue, 19 Dec 2017 04:23:54 GMT']
      expires: ['-1']
      pragma: [no-cache]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      x-ms-ratelimit-remaining-subscription-writes: ['1187']
    status: {code: 201, message: Created}
- request:
    body: '{"location": "westus", "properties": {"supportsHttpsTrafficOnly": false},
      "sku": {"name": "Standard_LRS"}, "kind": "Storage"}'
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account create]
      Connection: [keep-alive]
      Content-Length: ['125']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/3.5.3 (Windows-10-10.0.16299-SP0) requests/2.18.4 msrest/0.4.22
          msrest_azure/0.4.19 azure-mgmt-storage/1.5.0 Azure-SDK-For-Python AZURECLI/2.0.24]
      accept-language: [en-US]
    method: PUT
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002?api-version=2017-10-01
  response:
    body: {string: ''}
    headers:
      cache-control: [no-cache]
      content-length: ['0']
      date: ['Tue, 19 Dec 2017 04:23:55 GMT']
      expires: ['-1']
      location: ['https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Storage/locations/westus/asyncoperations/90169756-4838-47b2-a483-b5008e4986b0?monitor=true&api-version=2017-10-01']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      x-ms-ratelimit-remaining-subscription-writes: ['1195']
    status: {code: 202, message: Accepted}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account create]
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/3.5.3 (Windows-10-10.0.16299-SP0) requests/2.18.4 msrest/0.4.22
          msrest_azure/0.4.19 azure-mgmt-storage/1.5.0 Azure-SDK-For-Python AZURECLI/2.0.24]
      accept-language: [en-US]
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Storage/locations/westus/asyncoperations/90169756-4838-47b2-a483-b5008e4986b0?monitor=true&api-version=2017-10-01
  response:
    body: {string: '{"id":"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002","kind":"Storage","location":"westus","name":"clitest000002","properties":{"creationTime":"2017-12-19T04:23:56.4559180Z","encryption":{"keySource":"Microsoft.Storage","services":{"blob":{"enabled":true,"lastEnabledTime":"2017-12-19T04:23:56.5029230Z"},"file":{"enabled":true,"lastEnabledTime":"2017-12-19T04:23:56.5029230Z"}}},"networkAcls":{"bypass":"AzureServices","defaultAction":"Allow","ipRules":[],"virtualNetworkRules":[]},"primaryEndpoints":{"blob":"https://clitest000002.blob.core.windows.net/","file":"https://clitest000002.file.core.windows.net/","queue":"https://clitest000002.queue.core.windows.net/","table":"https://clitest000002.table.core.windows.net/"},"primaryLocation":"westus","provisioningState":"Succeeded","statusOfPrimary":"available","supportsHttpsTrafficOnly":false},"sku":{"name":"Standard_LRS","tier":"Standard"},"tags":{},"type":"Microsoft.Storage/storageAccounts"}

        '}
    headers:
      cache-control: [no-cache]
      content-length: ['1170']
      content-type: [application/json]
      date: ['Tue, 19 Dec 2017 04:24:12 GMT']
      expires: ['-1']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      vary: [Accept-Encoding]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account keys list]
      Connection: [keep-alive]
      Content-Length: ['0']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/3.5.3 (Windows-10-10.0.16299-SP0) requests/2.18.4 msrest/0.4.22
          msrest_azure/0.4.19 azure-mgmt-storage/1.5.0 Azure-SDK-For-Python AZURECLI/2.0.24]
      accept-language: [en-US]
    method: POST
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002/listKeys?api-version=2017-10-01
  response:
    body: {string: '{"keys":[{"keyName":"key1","permissions":"Full","value":"qMW3GiHpf5eS1gMtc3kOholUj5RmJzIyI5PXoLKkt0vPxzdtRkHOBAHfs7W0J+A4pa9mi/X49EvDdX5GOj3tIg=="},{"keyName":"key2","permissions":"Full","value":"oNL9OKfPuvBEZrIY9upFKhnCD5Oj2LXIKelZ3ra7bM9TDDe4D7MSB9GKfClUUkVCp32BJ0+/pg8dKGM45pw54w=="}]}

        '}
    headers:
      cache-control: [no-cache]
      content-length: ['289']
      content-type: [application/json]
      date: ['Tue, 19 Dec 2017 04:24:14 GMT']
      expires: ['-1']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      vary: [Accept-Encoding]
      x-ms-ratelimit-remaining-subscription-writes: ['1194']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account keys list]
      Connection: [keep-alive]
      Content-Length: ['0']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/3.5.3 (Windows-10-10.0.16299-SP0) requests/2.18.4 msrest/0.4.22
          msrest_azure/0.4.19 azure-mgmt-storage/1.5.0 Azure-SDK-For-Python AZURECLI/2.0.24]
      accept-language: [en-US]
    method: POST
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002/listKeys?api-version=2017-10-01
  response:
    body: {string: '{"keys":[{"keyName":"key1","permissions":"Full","value":"qMW3GiHpf5eS1gMtc3kOholUj5RmJzIyI5PXoLKkt0vPxzdtRkHOBAHfs7W0J+A4pa9mi/X49EvDdX5GOj3tIg=="},{"keyName":"key2","permissions":"Full","value":"oNL9OKfPuvBEZrIY9upFKhnCD5Oj2LXIKelZ3ra7bM9TDDe4D7MSB9GKfClUUkVCp32BJ0+/pg8dKGM45pw54w=="}]}

        '}
    headers:
      cache-control: [no-cache]
      content-length: ['289']
      content-type: [application/json]
      date: ['Tue, 19 Dec 2017 04:24:16 GMT']
      expires: ['-1']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      vary: [Accept-Encoding]
      x-ms-ratelimit-remaining-subscription-writes: ['1186']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      Content-Length: ['0']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 3.5.3; Windows 10)
          AZURECLI/2.0.24]
      x-ms-date: ['Tue, 19 Dec 2017 04:24:19 GMT']
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003?restype=container
  response:
    body: {string: ''}
    headers:
      date: ['Tue, 19 Dec 2017 04:24:16 GMT']
      etag: ['"0x8D546985DF43951"']
      last-modified: ['Tue, 19 Dec 2017 04:24:16 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-version: ['2017-04-17']
    status: {code: 201, message: Created}
- request:
    body: "# --------------------------------------------------------------------------------------------\r\
      \n# Copyright (c) Microsoft Corporation. All rights reserved.\r\n# Licensed\
      \ under the MIT License. See License.txt in the project root for license information.\r\
      \n# --------------------------------------------------------------------------------------------\r\
      \n\r\nimport os\r\nimport re\r\nimport unittest\r\nfrom datetime import datetime,\
      \ timedelta\r\nfrom azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer,\
      \ StorageAccountPreparer,\r\n                               JMESPathCheck, NoneCheck,\
      \ api_version_constraint)\r\nfrom knack.util import CLIError\r\nfrom azure.cli.core.profiles\
      \ import ResourceType\r\n\r\nfrom azure.cli.command_modules.storage._client_factory\
      \ import NO_CREDENTIALS_ERROR_MESSAGE\r\nfrom .storage_test_util import StorageScenarioMixin\r\
      \n\r\n\r\n@api_version_constraint(ResourceType.MGMT_STORAGE, min_api='2016-12-01')\r\
      \nclass StorageBlobUploadTests(StorageScenarioMixin, ScenarioTest):\r\n    @ResourceGroupPreparer()\r\
      \n    @StorageAccountPreparer(parameter_name='source_account')\r\n    @StorageAccountPreparer(parameter_name='target_account')\r\
      \n    def test_storage_blob_incremental_copy(self, resource_group, source_account,\
      \ target_account):\r\n        source_file = self.create_temp_file(16)\r\n  \
      \      source_account_info = self.get_account_info(resource_group, source_account)\r\
      \n        source_container = self.create_container(source_account_info)\r\n\
      \        self.storage_cmd('storage blob upload -c {} -n src -f \"{}\" -t page',\
      \ source_account_info,\r\n                         source_container, source_file)\r\
      \n\r\n        snapshot = self.storage_cmd('storage blob snapshot -c {} -n src',\
      \ source_account_info,\r\n                                    source_container).get_output_in_json()['snapshot']\r\
      \n\r\n        target_account_info = self.get_account_info(resource_group, target_account)\r\
      \n        target_container = self.create_container(target_account_info)\r\n\
      \        self.storage_cmd('storage blob incremental-copy start --source-container\
      \ {} --source-blob '\r\n                         'src --source-account-name\
      \ {} --source-account-key {} --source-snapshot '\r\n                       \
      \  '{} --destination-container {} --destination-blob backup',\r\n          \
      \               target_account_info, source_container, source_account,\r\n \
      \                        source_account_info[1], snapshot, target_container)\r\
      \n\r\n    def test_storage_blob_no_credentials_scenario(self):\r\n        source_file\
      \ = self.create_temp_file(1)\r\n        self.cmd('storage blob upload -c foo\
      \ -n bar -f \"' + source_file + '\"', expect_failure=CLIError)\r\n\r\n    @ResourceGroupPreparer()\r\
      \n    @StorageAccountPreparer()\r\n    def test_storage_blob_upload_small_file(self,\
      \ resource_group, storage_account):\r\n        self.verify_blob_upload_and_download(resource_group,\
      \ storage_account, 1, 'block', 0)\r\n\r\n    @ResourceGroupPreparer()\r\n  \
      \  @StorageAccountPreparer()\r\n    def test_storage_blob_upload_midsize_file(self,\
      \ resource_group, storage_account):\r\n        self.verify_blob_upload_and_download(resource_group,\
      \ storage_account, 4096, 'block', 0)\r\n\r\n    def verify_blob_upload_and_download(self,\
      \ group, account, file_size_kb, blob_type,\r\n                             \
      \           block_count=0, skip_download=False):\r\n        local_dir = self.create_temp_dir()\r\
      \n        local_file = self.create_temp_file(file_size_kb)\r\n        blob_name\
      \ = self.create_random_name(prefix='blob', length=24)\r\n        account_info\
      \ = self.get_account_info(group, account)\r\n\r\n        container = self.create_container(account_info)\r\
      \n\r\n        self.storage_cmd('storage blob exists -n {} -c {}', account_info,\
      \ blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('exists',\
      \ False))\r\n\r\n        self.storage_cmd('storage blob upload -c {} -f \"{}\"\
      \ -n {} --type {}', account_info,\r\n                         container, local_file,\
      \ blob_name, blob_type)\r\n        self.storage_cmd('storage blob exists -n\
      \ {} -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('exists',\
      \ True))\r\n        self.storage_cmd('storage blob list -c {} -otable --num-results\
      \ 1', account_info, container)\r\n\r\n        self.storage_cmd('storage blob\
      \ show -n {} -c {}', account_info, blob_name, container) \\\r\n            .assert_with_checks(JMESPathCheck('name',\
      \ blob_name))\r\n\r\n        expiry = (datetime.utcnow() + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%MZ')\r\
      \n        sas = self.storage_cmd('storage blob generate-sas -n {} -c {} --expiry\
      \ {} --permissions '\r\n                               'r --https-only', account_info,\
      \ blob_name, container, expiry).output\r\n        self.assertTrue(sas)\r\n \
      \       self.assertIn('sig', sas)\r\n\r\n        self.storage_cmd('storage blob\
      \ update -n {} -c {} --content-type application/test-content',\r\n         \
      \                account_info, blob_name, container)\r\n\r\n        self.storage_cmd('storage\
      \ blob show -n {} -c {}', account_info, blob_name, container) \\\r\n       \
      \     .assert_with_checks(\r\n            [JMESPathCheck('properties.contentSettings.contentType',\
      \ 'application/test-content'),\r\n             JMESPathCheck('properties.contentLength',\
      \ file_size_kb * 1024)])\r\n\r\n        self.storage_cmd('storage blob service-properties\
      \ show', account_info) \\\r\n            .assert_with_checks(JMESPathCheck('hourMetrics.enabled',\
      \ True))\r\n\r\n        if not skip_download:\r\n            downloaded = os.path.join(local_dir,\
      \ 'test.file')\r\n\r\n            self.storage_cmd('storage blob download -n\
      \ {} -c {} --file \"{}\"',\r\n                             account_info, blob_name,\
      \ container, downloaded)\r\n            self.assertTrue(os.path.isfile(downloaded),\
      \ 'The file is not downloaded.')\r\n            self.assertEqual(file_size_kb\
      \ * 1024, os.stat(downloaded).st_size,\r\n                             'The\
      \ download file size is not right.')\r\n\r\n        # Verify the requests in\
      \ cassette to ensure the count of the block requests is expected\r\n       \
      \ # This portion of validation doesn't verify anything during playback because\
      \ the recording\r\n        # is fixed.\r\n\r\n        def is_block_put_req(request):\r\
      \n            if request.method != 'PUT':\r\n                return False\r\n\
      \r\n            if not re.search('/cont[0-9]+/blob[0-9]+', request.path):\r\n\
      \                return False\r\n\r\n            comp_block = False\r\n    \
      \        has_blockid = False\r\n            for key, value in request.query:\r\
      \n                if key == 'comp' and value == 'block':\r\n               \
      \     comp_block = True\r\n                elif key == 'blockid':\r\n      \
      \              has_blockid = True\r\n\r\n            return comp_block and has_blockid\r\
      \n\r\n        requests = self.cassette.requests\r\n        put_blocks = [request\
      \ for request in requests if is_block_put_req(request)]\r\n        self.assertEqual(block_count,\
      \ len(put_blocks),\r\n                         'The expected number of block\
      \ put requests is {} but the actual '\r\n                         'number is\
      \ {}.'.format(block_count, len(put_blocks)))\r\n\r\n    @ResourceGroupPreparer()\r\
      \n    @StorageAccountPreparer()\r\n    def test_storage_blob_lease_operations(self,\
      \ resource_group, storage_account):\r\n        account_info = self.get_account_info(resource_group,\
      \ storage_account)\r\n        local_file = self.create_temp_file(128)\r\n  \
      \      c = self.create_container(account_info)\r\n        b = self.create_random_name('blob',\
      \ 24)\r\n        proposed_lease_id = 'abcdabcd-abcd-abcd-abcd-abcdabcdabcd'\r\
      \n        new_lease_id = 'dcbadcba-dcba-dcba-dcba-dcbadcbadcba'\r\n        date\
      \ = '2016-04-01t12:00z'\r\n\r\n        self.storage_cmd('storage blob upload\
      \ -c {} -n {} -f \"{}\"', account_info, c, b, local_file)\r\n\r\n        # test\
      \ lease operations\r\n        self.storage_cmd('storage blob lease acquire --lease-duration\
      \ 60 -b {} -c {} '\r\n                         '--if-modified-since {} --proposed-lease-id\
      \ {}', account_info, b, c, date,\r\n                         proposed_lease_id)\r\
      \n        self.storage_cmd('storage blob show -n {} -c {}', account_info, b,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ 'fixed'),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'leased'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'locked'))\r\n        self.storage_cmd('storage blob lease change -b {} -c\
      \ {} --lease-id {} '\r\n                         '--proposed-lease-id {}', account_info,\
      \ b, c, proposed_lease_id,\r\n                         new_lease_id)\r\n   \
      \     self.storage_cmd('storage blob lease renew -b {} -c {} --lease-id {}',\
      \ account_info, b, c,\r\n                         new_lease_id)\r\n        self.storage_cmd('storage\
      \ blob show -n {} -c {}', account_info, b, c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ 'fixed'),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'leased'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'locked'))\r\n        self.storage_cmd('storage blob lease break -b {} -c\
      \ {} --lease-break-period 30',\r\n                         account_info, b,\
      \ c)\r\n        self.storage_cmd('storage blob show -n {} -c {}', account_info,\
      \ b, c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ None),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'breaking'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'locked'))\r\n        self.storage_cmd('storage blob lease release -b {} -c\
      \ {} --lease-id {}', account_info, b, c,\r\n                         new_lease_id)\r\
      \n        self.storage_cmd('storage blob show -n {} -c {}', account_info, b,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ None),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'available'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'unlocked'))\r\n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\
      \n    def test_storage_blob_snapshot_operations(self, resource_group, storage_account):\r\
      \n        account_info = self.get_account_info(resource_group, storage_account)\r\
      \n        local_file = self.create_temp_file(128)\r\n        c = self.create_container(account_info)\r\
      \n        b = self.create_random_name('blob', 24)\r\n\r\n        self.storage_cmd('storage\
      \ blob upload -c {} -n {} -f \"{}\"', account_info, c, b, local_file)\r\n\r\n\
      \        snapshot_dt = self.storage_cmd('storage blob snapshot -c {} -n {}',\
      \ account_info, c, b) \\\r\n            .get_output_in_json()['snapshot']\r\n\
      \        self.storage_cmd('storage blob exists -n {} -c {} --snapshot {}', account_info,\
      \ b, c,\r\n                         snapshot_dt) \\\r\n            .assert_with_checks(JMESPathCheck('exists',\
      \ True))\r\n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\
      \n    def test_storage_blob_metadata_operations(self, resource_group, storage_account):\r\
      \n        account_info = self.get_account_info(resource_group, storage_account)\r\
      \n        c = self.create_container(account_info)\r\n        b = self.create_random_name('blob',\
      \ 24)\r\n\r\n        self.storage_cmd('storage blob upload -c {} -n {} -f \"\
      {}\"', account_info, c, b, __file__)\r\n        self.storage_cmd('storage blob\
      \ metadata update -n {} -c {} --metadata a=b c=d',\r\n                     \
      \    account_info, b, c)\r\n        self.storage_cmd('storage blob metadata\
      \ show -n {} -c {}', account_info, b, c) \\\r\n            .assert_with_checks(JMESPathCheck('a',\
      \ 'b'), JMESPathCheck('c', 'd'))\r\n        self.storage_cmd('storage blob metadata\
      \ update -n {} -c {}', account_info, b, c)\r\n        self.storage_cmd('storage\
      \ blob metadata show -n {} -c {}', account_info, b, c) \\\r\n            .assert_with_checks(NoneCheck())\r\
      \n\r\n    @ResourceGroupPreparer()\r\n    @StorageAccountPreparer()\r\n    def\
      \ test_storage_blob_container_operations(self, resource_group, storage_account):\r\
      \n        account_info = self.get_account_info(resource_group, storage_account)\r\
      \n        c = self.create_container(account_info)\r\n        proposed_lease_id\
      \ = 'abcdabcd-abcd-abcd-abcd-abcdabcdabcd'\r\n        new_lease_id = 'dcbadcba-dcba-dcba-dcba-dcbadcbadcba'\r\
      \n        date = '2016-04-01t12:00z'\r\n\r\n        self.storage_cmd('storage\
      \ container exists -n {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('exists',\
      \ True))\r\n\r\n        self.storage_cmd('storage container set-permission -n\
      \ {} --public-access blob',\r\n                         account_info, c)\r\n\
      \        self.storage_cmd('storage container show-permission -n {}', account_info,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('publicAccess', 'blob'))\r\
      \n        self.storage_cmd('storage container set-permission -n {} --public-access\
      \ off', account_info,\r\n                         c)\r\n        self.storage_cmd('storage\
      \ container show-permission -n {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('publicAccess',\
      \ 'off'))\r\n\r\n        self.storage_cmd('storage container show -n {}', account_info,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('name', c))\r\n\r\n\
      \        self.assertIn(c, self.storage_cmd('storage container list --query \"\
      [].name\"',\r\n                                          account_info).get_output_in_json())\r\
      \n\r\n        self.storage_cmd('storage container metadata update -n {} --metadata\
      \ foo=bar moo=bak',\r\n                         account_info, c)\r\n       \
      \ self.storage_cmd('storage container metadata show -n {}', account_info, c)\
      \ \\\r\n            .assert_with_checks(JMESPathCheck('foo', 'bar'), JMESPathCheck('moo',\
      \ 'bak'))\r\n        self.storage_cmd('storage container metadata update -n\
      \ {}', account_info, c)\r\n        self.storage_cmd('storage container metadata\
      \ show -n {}', account_info, c) \\\r\n            .assert_with_checks(NoneCheck())\r\
      \n\r\n        # test lease operations\r\n        self.storage_cmd('storage container\
      \ lease acquire --lease-duration 60 -c {} '\r\n                         '--if-modified-since\
      \ {} --proposed-lease-id {}', account_info, c, date,\r\n                   \
      \      proposed_lease_id)\r\n        self.storage_cmd('storage container show\
      \ --name {}', account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ 'fixed'),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'leased'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'locked'))\r\n        self.storage_cmd('storage container lease change -c\
      \ {} --lease-id {} '\r\n                         '--proposed-lease-id {}', account_info,\
      \ c, proposed_lease_id, new_lease_id)\r\n        self.storage_cmd('storage container\
      \ lease renew -c {} --lease-id {}',\r\n                         account_info,\
      \ c, new_lease_id)\r\n        self.storage_cmd('storage container show -n {}',\
      \ account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ 'fixed'),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'leased'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'locked'))\r\n        self.storage_cmd('storage container lease break -c {}\
      \ --lease-break-period 30',\r\n                         account_info, c)\r\n\
      \        self.storage_cmd('storage container show --name {}', account_info,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ None),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'breaking'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'locked'))\r\n        self.storage_cmd('storage container lease release -c\
      \ {} --lease-id {}', account_info, c,\r\n                         new_lease_id)\r\
      \n        self.storage_cmd('storage container show --name {}', account_info,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',\
      \ None),\r\n                                JMESPathCheck('properties.lease.state',\
      \ 'available'),\r\n                                JMESPathCheck('properties.lease.status',\
      \ 'unlocked'))\r\n\r\n        self.assertIn('sig=', self.storage_cmd('storage\
      \ container generate-sas -n {}', account_info,\r\n                         \
      \                      c).output)\r\n\r\n        # verify delete operation\r\
      \n        self.storage_cmd('storage container delete --name {} --fail-not-exist',\
      \ account_info, c) \\\r\n            .assert_with_checks(JMESPathCheck('deleted',\
      \ True))\r\n        self.storage_cmd('storage container exists -n {}', account_info,\
      \ c) \\\r\n            .assert_with_checks(JMESPathCheck('exists', False))\r\
      \n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n"
    headers:
      Connection: [keep-alive]
      Content-Length: ['16376']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 3.5.3; Windows 10)
          AZURECLI/2.0.24]
      x-ms-blob-content-type: [text/plain]
      x-ms-blob-type: [BlockBlob]
      x-ms-date: ['Tue, 19 Dec 2017 04:24:20 GMT']
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004
  response:
    body: {string: ''}
    headers:
      content-md5: [Y4Wzk/6iiGuFZ5+cA4zaHw==]
      date: ['Tue, 19 Dec 2017 04:24:16 GMT']
      etag: ['"0x8D546985E34BA10"']
      last-modified: ['Tue, 19 Dec 2017 04:24:17 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-request-server-encrypted: ['true']
      x-ms-version: ['2017-04-17']
    status: {code: 201, message: Created}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      Content-Length: ['0']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 3.5.3; Windows 10)
          AZURECLI/2.0.24]
      x-ms-date: ['Tue, 19 Dec 2017 04:24:21 GMT']
      x-ms-meta-a: [b]
      x-ms-meta-c: [d]
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: ''}
    headers:
      date: ['Tue, 19 Dec 2017 04:24:16 GMT']
      etag: ['"0x8D546985E88B5F1"']
      last-modified: ['Tue, 19 Dec 2017 04:24:17 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-request-server-encrypted: ['true']
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 3.5.3; Windows 10)
          AZURECLI/2.0.24]
      x-ms-date: ['Tue, 19 Dec 2017 04:24:21 GMT']
      x-ms-version: ['2017-04-17']
    method: GET
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: ''}
    headers:
      date: ['Tue, 19 Dec 2017 04:24:17 GMT']
      etag: ['"0x8D546985E88B5F1"']
      last-modified: ['Tue, 19 Dec 2017 04:24:17 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-meta-a: [b]
      x-ms-meta-c: [d]
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      Content-Length: ['0']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 3.5.3; Windows 10)
          AZURECLI/2.0.24]
      x-ms-date: ['Tue, 19 Dec 2017 04:24:22 GMT']
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: ''}
    headers:
      date: ['Tue, 19 Dec 2017 04:24:18 GMT']
      etag: ['"0x8D546985F4C512C"']
      last-modified: ['Tue, 19 Dec 2017 04:24:19 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-request-server-encrypted: ['true']
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 3.5.3; Windows 10)
          AZURECLI/2.0.24]
      x-ms-date: ['Tue, 19 Dec 2017 04:24:22 GMT']
      x-ms-version: ['2017-04-17']
    method: GET
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: ''}
    headers:
      date: ['Tue, 19 Dec 2017 04:24:19 GMT']
      etag: ['"0x8D546985F4C512C"']
      last-modified: ['Tue, 19 Dec 2017 04:24:19 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [group delete]
      Connection: [keep-alive]
      Content-Length: ['0']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/3.5.3 (Windows-10-10.0.16299-SP0) requests/2.18.4 msrest/0.4.22
          msrest_azure/0.4.19 resourcemanagementclient/1.2.1 Azure-SDK-For-Python
          AZURECLI/2.0.24]
      accept-language: [en-US]
    method: DELETE
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/clitest.rg000001?api-version=2017-05-10
  response:
    body: {string: ''}
    headers:
      cache-control: [no-cache]
      content-length: ['0']
      date: ['Tue, 19 Dec 2017 04:24:19 GMT']
      expires: ['-1']
      location: ['https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/operationresults/eyJqb2JJZCI6IlJFU09VUkNFR1JPVVBERUxFVElPTkpPQi1DTElURVNUOjJFUkczT1FUWkQ0VURXNVU1SDdTWTQzWlhRUzZOWVhYV0tDWTNBSXw0NjY2Qjg2Rjc3MEJFNzlGLVdFU1RVUyIsImpvYkxvY2F0aW9uIjoid2VzdHVzIn0?api-version=2017-05-10']
      pragma: [no-cache]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      x-ms-ratelimit-remaining-subscription-writes: ['1196']
    status: {code: 202, message: Accepted}
version: 1
