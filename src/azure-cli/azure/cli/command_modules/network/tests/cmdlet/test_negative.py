# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

from azure.cli.testsdk import ScenarioTest
from azure.core.exceptions import ResourceNotFoundError


# Test class for Scenario
class NegativeTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(NegativeTest, self).__init__(*args, **kwargs)

    # EXAMPLE: /ExpressRouteCircuitConnections/get/List ExpressRouteCircuit Connection
    def test_express_route_circuit_connection_list(self):
        try:
            self.cmd('az network express-route-circuit-connection list '
                     '--circuit-name "ExpressRouteARMCircuitA" '
                     '--peering-name "AzurePrivatePeering" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")

    # EXAMPLE: /ExpressRouteCircuits/post/List Route Table Summary
    def test_express_route_circuit(self):
        try:
            self.cmd('az network express-route-circuit list-route-table-summary '
                     '--circuit-name "circuitName" '
                     '--device-path "devicePath" '
                     '--peering-name "peeringName" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")

    # EXAMPLE: /ExpressRouteCircuits/get/Get ExpressRoute Circuit Peering Traffic Stats
    def test_express_route_circuit_show_peering_stat(self):
        try:
            self.cmd('az network express-route-circuit show-peering-stat '
                     '--circuit-name "circuitName" '
                     '--peering-name "peeringName" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
# Test class for Scenario
class NegativeTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(NegativeTest, self).__init__(*args, **kwargs)

    # EXAMPLE: /ExpressRouteCircuitConnections/get/List ExpressRouteCircuit Connection
    def test_express_route_peering_connection_list(self):
        try:
            self.cmd('az network express-route peering connection list '
                     '--circuit-name "ExpressRouteARMCircuitA" '
                     '--peering-name "AzurePrivatePeering" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /ExpressRouteCircuits/post/List Route Table Summary
    def test_express_route_list_route_table_summary(self):
        try:
            self.cmd('az network express-route list-route-table-summary '
                     '--circuit-name "circuitName" '
                     '--device-path "devicePath" '
                     '--peering-name "peeringName" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    # EXAMPLE: /ExpressRouteCircuits/get/Get ExpressRoute Circuit Peering Traffic Stats
    def test_express_route_show_peering_stat(self):
        try:
            self.cmd('az network express-route show-peering-stat '
                     '--circuit-name "circuitName" '
                     '--peering-name "peeringName" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")
# Test class for Scenario
class NegativeTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(NegativeTest, self).__init__(*args, **kwargs)

    def test_express_route_circuit_connection_list(self):
        # From /ExpressRouteCircuitConnections/get/List ExpressRouteCircuit Connection
        try:
            self.cmd('az network express-route-circuit-connection list '
                     '--circuit-name "ExpressRouteARMCircuitA" '
                     '--peering-name "AzurePrivatePeering" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_express_route_circuit(self):
        # From /ExpressRouteCircuits/post/List Route Table Summary
        try:
            self.cmd('az network express-route-circuit list-route-table-summary '
                     '--circuit-name "circuitName" '
                     '--device-path "devicePath" '
                     '--peering-name "peeringName" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_express_route_circuit_show_peering_stat(self):
        # From /ExpressRouteCircuits/get/Get ExpressRoute Circuit Peering Traffic Stats
        try:
            self.cmd('az network express-route-circuit show-peering-stat '
                     '--circuit-name "circuitName" '
                     '--peering-name "peeringName" '
                     '--resource-group "rg1"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")
