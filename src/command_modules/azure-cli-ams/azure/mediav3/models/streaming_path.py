# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class StreamingPath(Model):
    """Class of paths for streaming.

    :param streaming_protocol: Streaming protocol. Possible values include:
     'Hls', 'Dash', 'SmoothStreaming', 'Download'
    :type streaming_protocol: str or
     ~encoding.models.StreamingPolicyStreamingProtocol
    :param encryption_scheme: Encryption scheme. Possible values include:
     'NoEncryption', 'EnvelopeEncryption', 'CommonEncryptionCenc',
     'CommonEncryptionCbcs'
    :type encryption_scheme: str or ~encoding.models.EncryptionScheme
    :param paths: Streaming paths for each protocol and encryptionScheme pair
    :type paths: list[str]
    """

    _validation = {
        'streaming_protocol': {'required': True},
        'encryption_scheme': {'required': True},
    }

    _attribute_map = {
        'streaming_protocol': {'key': 'streamingProtocol', 'type': 'StreamingPolicyStreamingProtocol'},
        'encryption_scheme': {'key': 'encryptionScheme', 'type': 'EncryptionScheme'},
        'paths': {'key': 'paths', 'type': '[str]'},
    }

    def __init__(self, streaming_protocol, encryption_scheme, paths=None):
        super(StreamingPath, self).__init__()
        self.streaming_protocol = streaming_protocol
        self.encryption_scheme = encryption_scheme
        self.paths = paths
