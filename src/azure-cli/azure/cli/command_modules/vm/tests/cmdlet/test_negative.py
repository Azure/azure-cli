# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

from azure.cli.testsdk import ScenarioTest
from azure.core.exceptions import ResourceNotFoundError


# Test class for Scenario
class NegativeTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(NegativeTest, self).__init__(*args, **kwargs)

    def test_show(self):
        # From /SshPublicKeys/get/Get an ssh public key.
        try:
            self.cmd('az sshkey show '
                     '--resource-group "myResourceGroup" '
                     '--name "mySshPublicKeyName"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_create(self):
        # From /SshPublicKeys/put/Create a new SSH public key resource.
        try:
            self.cmd('az sshkey create '
                     '--location "westus" '
                     '--public-key "{{ssh-rsa public key}}" '
                     '--resource-group "myResourceGroup" '
                     '--name "mySshPublicKeyName"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_install_patch(self):
        # From /VirtualMachines/post/Install patch state of a virtual machine.
        try:
            self.cmd('az vm virtual-machine install-patch '
                     '--maximum-duration "PT4H" '
                     '--reboot-setting "IfRequired" '
                     '--windows-parameters classifications-to-include="Critical" classifications-to-include="Security" max-patch-publish-date="2020-11-19T02:36:43.0539904+00:00" '
                     '--resource-group "myResourceGroupName" '
                     '--name "myVMName"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_reimage(self):
        # From /VirtualMachines/post/Reimage a Virtual Machine.
        try:
            self.cmd('az vm virtual-machine reimage '
                     '--temp-disk true '
                     '--resource-group "myResourceGroup" '
                     '--name "myVMName"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_scale_set_vm_extension_list(self):
        # From /VirtualMachineScaleSetVMExtensions/get/List extensions in Vmss instance.
        try:
            self.cmd('az vm virtual-machine-scale-set-vm-extension list '
                     '--instance-id "0" '
                     '--resource-group "myResourceGroup" '
                     '--vm-scale-set-name "myvmScaleSet"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_scale_set_vm_extension_show(self):
        # From /VirtualMachineScaleSetVMExtensions/get/Get VirtualMachineScaleSet VM extension.
        try:
            self.cmd('az vm virtual-machine-scale-set-vm-extension show '
                     '--instance-id "0" '
                     '--resource-group "myResourceGroup" '
                     '--vm-extension-name "myVMExtension" '
                     '--vm-scale-set-name "myvmScaleSet"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_scale_set_vm_extension_create(self):
        # From /VirtualMachineScaleSetVMExtensions/put/Create VirtualMachineScaleSet VM extension.
        try:
            self.cmd('az vm virtual-machine-scale-set-vm-extension create '
                     '--type-properties-type "extType" '
                     '--auto-upgrade-minor-version true '
                     '--publisher "extPublisher" '
                     '--settings "{{\\"UserName\\":\\"xyz@microsoft.com\\"}}" '
                     '--type-handler-version "1.2" '
                     '--instance-id "0" '
                     '--resource-group "myResourceGroup" '
                     '--vm-extension-name "myVMExtension" '
                     '--vm-scale-set-name "myvmScaleSet"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_scale(self):
        # From /VirtualMachineScaleSetVMs/post/RetrieveBootDiagnosticsData of a virtual machine.
        try:
            self.cmd('az vm virtual-machine-scale-set-v-ms retrieve-boot-diagnostic-data '
                     '--instance-id "0" '
                     '--resource-group "ResourceGroup" '
                     '--sas-uri-expiration-time-in-minutes 60 '
                     '--vm-scale-set-name "myvmScaleSet"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_virtual_machine_scale_set_vm_run_command_list(self):
        # From /VirtualMachineScaleSetVMRunCommands/get/List run commands in Vmss instance.
        try:
            self.cmd('az vm virtual-machine-scale-set-vm-run-command list '
                     '--instance-id "0" '
                     '--resource-group "myResourceGroup" '
                     '--vm-scale-set-name "myvmScaleSet"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_disk_access_delete(self):
        # From /DiskAccesses/delete/Delete a private endpoint connection under a disk access resource.
        try:
            self.cmd('az vm disk-access delete-a-private-endpoint-connection '
                     '--name "myDiskAccess" '
                     '--private-endpoint-connection-name "myPrivateEndpointConnection" '
                     '--resource-group "myResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_disk_access_list_private_endpoint_connection(self):
        # From /DiskAccesses/get/Get information about a private endpoint connection under a disk access resource.
        try:
            self.cmd('az vm disk-access list-private-endpoint-connection '
                     '--name "myDiskAccess" '
                     '--resource-group "myResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_disk_access_show_private_link_resource(self):
        # From /DiskAccesses/get/List all possible private link resources under disk access resource.
        try:
            self.cmd('az vm disk-access show-private-link-resource '
                     '--name "myDiskAccess" '
                     '--resource-group "myResourceGroup"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")

    def test_disk_restore_point_show(self):
        # From /DiskRestorePoint/get/Get an incremental disk restorePoint resource.
        try:
            self.cmd('az vm disk-restore-point show '
                     '--name "TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745" '
                     '--resource-group "myResourceGroup" '
                     '--restore-point-collection-name "rpc" '
                     '--vm-restore-point-name "vmrp"')
            raise Exception("Error Expected!")
        except ResourceNotFoundError as e:
            assert e.message.startswith("(500)")
        except SystemExit as e:
            assert e.__context__.message.startswith("(500)")
