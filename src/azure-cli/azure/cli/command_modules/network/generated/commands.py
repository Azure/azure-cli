# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from ..generated._client_factory import cf_application_gateway

    network_application_gateway = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._application_gateways_operations#ApplicationGatewaysOperations.{}'
        ),
        client_factory=cf_application_gateway,
    )
    with self.command_group(
        'network application-gateway', network_application_gateway, client_factory=cf_application_gateway
    ) as g:
        g.custom_command('backend-health-on-demand', 'network_application_gateway_backend_health_on_demand')

    from ..generated._client_factory import cf_application_gateway_private_endpoint_connection

    network_application_gateway_private_endpoint_connection = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._application_gateway_private_endpoint_connections_operations#ApplicationGatewayPrivateEndpointConnectionsOperations.{}',
        client_factory=cf_application_gateway_private_endpoint_connection,
    )
    with self.command_group(
        'network application-gateway-private-endpoint-connection',
        network_application_gateway_private_endpoint_connection,
        client_factory=cf_application_gateway_private_endpoint_connection,
    ) as g:
        g.custom_show_command('show', 'network_application_gateway_private_endpoint_connection_show')

    from ..generated._client_factory import cf_application_security_group

    network_application_security_group = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._application_security_groups_operations#ApplicationSecurityGroupsOperations.{}',
        client_factory=cf_application_security_group,
    )
    with self.command_group(
        'network application-security-group',
        network_application_security_group,
        client_factory=cf_application_security_group,
    ) as g:
        g.custom_command('list', 'network_application_security_group_list')

    from ..generated._client_factory import cf_web_category

    network_web_category = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._web_categories_operations#WebCategoriesOperations.{}',
        client_factory=cf_web_category,
    )
    with self.command_group('network web-category', network_web_category, client_factory=cf_web_category) as g:
        g.custom_command('list', 'network_web_category_list')

    from ..generated._client_factory import cf_network

    network_ = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._model_operations#NetworkManagementClientOperationsMixin.{}',
        client_factory=cf_network,
    )
    with self.command_group('network', network_, client_factory=cf_network, is_experimental=True) as g:
        g.custom_command(
            'generatevirtualwanvpnserverconfigurationvpnprofile',
            'network_generatevirtualwanvpnserverconfigurationvpnprofile',
        )
        g.custom_command('get-active-session', 'network_get_active_session')
        g.custom_command('supported-security-provider', 'network_supported_security_provider')

    from ..generated._client_factory import cf_network_interface

    network_network_interface = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._network_interfaces_operations#NetworkInterfacesOperations.{}',
        client_factory=cf_network_interface,
    )
    with self.command_group(
        'network network-interface', network_network_interface, client_factory=cf_network_interface
    ) as g:
        g.custom_command(
            'show-virtual-machine-scale-set-ip-configuration',
            'network_network_interface_show_virtual_machine_scale_set_ip_configuration',
        )

    from ..generated._client_factory import cf_public_ip_address

    network_public_ip_address = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._public_ip_addresses_operations#PublicIpAddressesOperations.{}',
        client_factory=cf_public_ip_address,
    )
    with self.command_group(
        'network public-ip-address', network_public_ip_address, client_factory=cf_public_ip_address
    ) as g:
        g.custom_command(
            'list-virtual-machine-scale-set-vm-public-ip-address',
            'network_public_ip_address_list_virtual_machine_scale_set_vm_public_ip_address',
        )
        g.custom_command(
            'show-virtual-machine-scale-set-public-ip-address',
            'network_public_ip_address_show_virtual_machine_scale_set_public_ip_address',
        )

    from ..generated._client_factory import cf_custom_ip_prefix

    network_custom_ip_prefix = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._custom_ip_prefixes_operations#CustomIpPrefixesOperations.{}',
        client_factory=cf_custom_ip_prefix,
    )
    with self.command_group(
        'network custom-ip-prefix', network_custom_ip_prefix, client_factory=cf_custom_ip_prefix
    ) as g:
        g.custom_command('list', 'network_custom_ip_prefix_list')
        g.custom_show_command('show', 'network_custom_ip_prefix_show')
        g.custom_command('list-all', 'network_custom_ip_prefix_list_all')

    from ..generated._client_factory import cf_express_route_circuit_connection

    network_express_route_circuit_connection = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._express_route_circuit_connections_operations#ExpressRouteCircuitConnectionsOperations.{}',
        client_factory=cf_express_route_circuit_connection,
    )
    with self.command_group(
        'network express-route-circuit-connection',
        network_express_route_circuit_connection,
        client_factory=cf_express_route_circuit_connection,
    ) as g:
        g.custom_command('list', 'network_express_route_circuit_connection_list')

    from ..generated._client_factory import cf_express_route_circuit

    network_express_route_circuit = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._express_route_circuits_operations#ExpressRouteCircuitsOperations.{}'
        ),
        client_factory=cf_express_route_circuit,
    )
    with self.command_group(
        'network express-route-circuit', network_express_route_circuit, client_factory=cf_express_route_circuit
    ) as g:
        g.custom_command('list-route-table-summary', 'network_express_route_circuit_list_route_table_summary')
        g.custom_command('show-peering-stat', 'network_express_route_circuit_show_peering_stat')

    from ..generated._client_factory import cf_express_route_cross_connection_peering

    network_express_route_cross_connection_peering = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._express_route_cross_connection_peerings_operations#ExpressRouteCrossConnectionPeeringsOperations.{}',
        client_factory=cf_express_route_cross_connection_peering,
    )
    with self.command_group(
        'network express-route-cross-connection-peering',
        network_express_route_cross_connection_peering,
        client_factory=cf_express_route_cross_connection_peering,
    ) as g:
        g.custom_show_command('show', 'network_express_route_cross_connection_peering_show')
        g.custom_command('create', 'network_express_route_cross_connection_peering_create', supports_no_wait=True)
        g.generic_update_command(
            'update',
            supports_no_wait=True,
            custom_func_name='network_express_route_cross_connection_peering_update',
            setter_arg_name='peering_parameters',
            setter_name='begin_create_or_update',
        )
        g.custom_command(
            'delete', 'network_express_route_cross_connection_peering_delete', supports_no_wait=True, confirmation=True
        )
        g.custom_wait_command('wait', 'network_express_route_cross_connection_peering_show')

    from ..generated._client_factory import cf_load_balancer_frontend_ip_configuration

    network_load_balancer_frontend_ip_configuration = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._load_balancer_frontend_ip_configurations_operations#LoadBalancerFrontendIpConfigurationsOperations.{}',
        client_factory=cf_load_balancer_frontend_ip_configuration,
    )
    with self.command_group(
        'network load-balancer-frontend-ip-configuration',
        network_load_balancer_frontend_ip_configuration,
        client_factory=cf_load_balancer_frontend_ip_configuration,
    ) as g:
        g.custom_command('list', 'network_load_balancer_frontend_ip_configuration_list')

    from ..generated._client_factory import cf_inbound_nat_rule

    network_inbound_nat_rule = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._inbound_nat_rules_operations#InboundNatRulesOperations.{}',
        client_factory=cf_inbound_nat_rule,
    )
    with self.command_group(
        'network inbound-nat-rule', network_inbound_nat_rule, client_factory=cf_inbound_nat_rule
    ) as g:
        g.custom_show_command('show', 'network_inbound_nat_rule_show')
        g.custom_command('create', 'network_inbound_nat_rule_create', supports_no_wait=True)
        g.generic_update_command(
            'update',
            supports_no_wait=True,
            custom_func_name='network_inbound_nat_rule_update',
            setter_arg_name='inbound_nat_rule_parameters',
            setter_name='begin_create_or_update',
        )
        g.custom_command('delete', 'network_inbound_nat_rule_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'network_inbound_nat_rule_show')

    from ..generated._client_factory import cf_load_balancer_network_interface

    network_load_balancer_network_interface = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._load_balancer_network_interfaces_operations#LoadBalancerNetworkInterfacesOperations.{}',
        client_factory=cf_load_balancer_network_interface,
    )
    with self.command_group(
        'network load-balancer-network-interface',
        network_load_balancer_network_interface,
        client_factory=cf_load_balancer_network_interface,
    ) as g:
        g.custom_command('list', 'network_load_balancer_network_interface_list')

    from ..generated._client_factory import cf_network_interface_ip_configuration

    network_network_interface_ip_configuration = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._network_interface_ip_configurations_operations#NetworkInterfaceIpConfigurationsOperations.{}',
        client_factory=cf_network_interface_ip_configuration,
    )
    with self.command_group(
        'network network-interface-ip-configuration',
        network_network_interface_ip_configuration,
        client_factory=cf_network_interface_ip_configuration,
    ) as g:
        g.custom_command('list', 'network_network_interface_ip_configuration_list')
        g.custom_show_command('show', 'network_network_interface_ip_configuration_show')

    from ..generated._client_factory import cf_network_interface_load_balancer

    network_network_interface_load_balancer = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._network_interface_load_balancers_operations#NetworkInterfaceLoadBalancersOperations.{}',
        client_factory=cf_network_interface_load_balancer,
    )
    with self.command_group(
        'network network-interface-load-balancer',
        network_network_interface_load_balancer,
        client_factory=cf_network_interface_load_balancer,
    ) as g:
        g.custom_command('list', 'network_network_interface_load_balancer_list')

    from ..generated._client_factory import cf_network_interface_tap_configuration

    network_network_interface_tap_configuration = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._network_interface_tap_configurations_operations#NetworkInterfaceTapConfigurationsOperations.{}',
        client_factory=cf_network_interface_tap_configuration,
    )
    with self.command_group(
        'network network-interface-tap-configuration',
        network_network_interface_tap_configuration,
        client_factory=cf_network_interface_tap_configuration,
    ) as g:
        g.custom_command('list', 'network_network_interface_tap_configuration_list')
        g.custom_command('delete', 'network_network_interface_tap_configuration_delete', confirmation=True)

    from ..generated._client_factory import cf_default_security_rule

    network_default_security_rule = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._default_security_rules_operations#DefaultSecurityRulesOperations.{}'
        ),
        client_factory=cf_default_security_rule,
    )
    with self.command_group(
        'network default-security-rule', network_default_security_rule, client_factory=cf_default_security_rule
    ) as g:
        g.custom_command('list', 'network_default_security_rule_list')
        g.custom_show_command('show', 'network_default_security_rule_show')

    from ..generated._client_factory import cf_network_watcher

    network_network_watcher = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._network_watchers_operations#NetworkWatchersOperations.{}',
        client_factory=cf_network_watcher,
    )
    with self.command_group('network network-watcher', network_network_watcher, client_factory=cf_network_watcher) as g:
        g.custom_command('get-azure-reachability-report', 'network_network_watcher_get_azure_reachability_report')
        g.custom_command('list-available-provider', 'network_network_watcher_list_available_provider')

    from ..generated._client_factory import cf_private_link_service

    network_private_link_service = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._private_link_services_operations#PrivateLinkServicesOperations.{}'
        ),
        client_factory=cf_private_link_service,
    )
    with self.command_group(
        'network private-link-service', network_private_link_service, client_factory=cf_private_link_service
    ) as g:
        g.custom_command(
            'list-private-endpoint-connection', 'network_private_link_service_list_private_endpoint_connection'
        )
        g.custom_command(
            'show-private-endpoint-connection', 'network_private_link_service_show_private_endpoint_connection'
        )

    from ..generated._client_factory import cf_virtual_network

    network_virtual_network = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._virtual_networks_operations#VirtualNetworksOperations.{}',
        client_factory=cf_virtual_network,
    )
    with self.command_group('network virtual-network', network_virtual_network, client_factory=cf_virtual_network) as g:
        g.custom_command('list-usage', 'network_virtual_network_list_usage')

    from ..generated._client_factory import cf_subnet

    network_subnet = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._subnets_operations#SubnetsOperations.{}',
        client_factory=cf_subnet,
    )
    with self.command_group('network subnet', network_subnet, client_factory=cf_subnet) as g:
        g.custom_command('prepare-network-policy', 'network_subnet_prepare_network_policy')
        g.custom_command('unprepare-network-policy', 'network_subnet_unprepare_network_policy')

    from ..generated._client_factory import cf_resource_navigation_link

    network_resource_navigation_link = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._resource_navigation_links_operations#ResourceNavigationLinksOperations.{}'
        ),
        client_factory=cf_resource_navigation_link,
    )
    with self.command_group(
        'network resource-navigation-link', network_resource_navigation_link, client_factory=cf_resource_navigation_link
    ) as g:
        g.custom_command('list', 'network_resource_navigation_link_list')

    from ..generated._client_factory import cf_service_association_link

    network_service_association_link = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._service_association_links_operations#ServiceAssociationLinksOperations.{}'
        ),
        client_factory=cf_service_association_link,
    )
    with self.command_group(
        'network service-association-link', network_service_association_link, client_factory=cf_service_association_link
    ) as g:
        g.custom_command('list', 'network_service_association_link_list')

    from ..generated._client_factory import cf_virtual_network_gateway

    network_virtual_network_gateway = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._virtual_network_gateways_operations#VirtualNetworkGatewaysOperations.{}'
        ),
        client_factory=cf_virtual_network_gateway,
    )
    with self.command_group(
        'network virtual-network-gateway', network_virtual_network_gateway, client_factory=cf_virtual_network_gateway
    ) as g:
        g.custom_command(
            'disconnect-virtual-network-gateway-vpn-connection',
            'network_virtual_network_gateway_disconnect_virtual_network_gateway_vpn_connection',
        )
        g.custom_command(
            'get-vpnclient-connection-health', 'network_virtual_network_gateway_get_vpnclient_connection_health'
        )
        g.custom_command(
            'get-vpnclient-ipsec-parameter', 'network_virtual_network_gateway_get_vpnclient_ipsec_parameter'
        )
        g.custom_command('list-connection', 'network_virtual_network_gateway_list_connection')
        g.custom_command(
            'set-vpnclient-ipsec-parameter', 'network_virtual_network_gateway_set_vpnclient_ipsec_parameter'
        )
        g.custom_command('start-packet-capture', 'network_virtual_network_gateway_start_packet_capture')
        g.custom_command('stop-packet-capture', 'network_virtual_network_gateway_stop_packet_capture')
        g.custom_command('supported-vpn-device', 'network_virtual_network_gateway_supported_vpn_device')
        g.custom_command(
            'vpn-device-configuration-script', 'network_virtual_network_gateway_vpn_device_configuration_script'
        )

    from ..generated._client_factory import cf_virtual_network_gateway_connection

    network_virtual_network_gateway_connection = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._virtual_network_gateway_connections_operations#VirtualNetworkGatewayConnectionsOperations.{}',
        client_factory=cf_virtual_network_gateway_connection,
    )
    with self.command_group(
        'network virtual-network-gateway-connection',
        network_virtual_network_gateway_connection,
        client_factory=cf_virtual_network_gateway_connection,
    ) as g:
        g.custom_command('get-ike-sas', 'network_virtual_network_gateway_connection_get_ike_sas')
        g.custom_command('start-packet-capture', 'network_virtual_network_gateway_connection_start_packet_capture')
        g.custom_command('stop-packet-capture', 'network_virtual_network_gateway_connection_stop_packet_capture')

    from ..generated._client_factory import cf_virtual_network_tap

    network_virtual_network_tap = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._virtual_network_taps_operations#VirtualNetworkTapsOperations.{}'
        ),
        client_factory=cf_virtual_network_tap,
    )
    with self.command_group(
        'network virtual-network-tap', network_virtual_network_tap, client_factory=cf_virtual_network_tap
    ) as g:
        g.custom_command('list', 'network_virtual_network_tap_list')
        g.custom_show_command('show', 'network_virtual_network_tap_show')
        g.custom_command('delete', 'network_virtual_network_tap_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'network_virtual_network_tap_show')

    from ..generated._client_factory import cf_vpn_site_link

    network_vpn_site_link = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._vpn_site_links_operations#VpnSiteLinksOperations.{}',
        client_factory=cf_vpn_site_link,
    )
    with self.command_group('network vpn-site-link', network_vpn_site_link, client_factory=cf_vpn_site_link) as g:
        g.custom_command('list', 'network_vpn_site_link_list')
        g.custom_show_command('show', 'network_vpn_site_link_show')

    from ..generated._client_factory import cf_vpn_gateway

    network_vpn_gateway = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._vpn_gateways_operations#VpnGatewaysOperations.{}',
        client_factory=cf_vpn_gateway,
    )
    with self.command_group('network vpn-gateway', network_vpn_gateway, client_factory=cf_vpn_gateway) as g:
        g.custom_command('reset', 'network_vpn_gateway_reset')
        g.custom_command('start-packet-capture', 'network_vpn_gateway_start_packet_capture')
        g.custom_command('stop-packet-capture', 'network_vpn_gateway_stop_packet_capture')

    from ..generated._client_factory import cf_vpn_connection

    network_vpn_connection = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._vpn_connections_operations#VpnConnectionsOperations.{}',
        client_factory=cf_vpn_connection,
    )
    with self.command_group('network vpn-connection', network_vpn_connection, client_factory=cf_vpn_connection) as g:
        g.custom_command('start-packet-capture', 'network_vpn_connection_start_packet_capture')
        g.custom_command('stop-packet-capture', 'network_vpn_connection_stop_packet_capture')

    from ..generated._client_factory import cf_vpn_site_link_connection

    network_vpn_site_link_connection = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._vpn_site_link_connections_operations#VpnSiteLinkConnectionsOperations.{}'
        ),
        client_factory=cf_vpn_site_link_connection,
    )
    with self.command_group(
        'network vpn-site-link-connection', network_vpn_site_link_connection, client_factory=cf_vpn_site_link_connection
    ) as g:
        g.custom_show_command('show', 'network_vpn_site_link_connection_show')

    from ..generated._client_factory import cf_nat_rule

    network_nat_rule = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._nat_rules_operations#NatRulesOperations.{}',
        client_factory=cf_nat_rule,
    )
    with self.command_group('network nat-rule', network_nat_rule, client_factory=cf_nat_rule) as g:
        g.custom_command('list', 'network_nat_rule_list')

    from ..generated._client_factory import cf_p2svpn_gateway

    network_p2svpn_gateway = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._p2_svpn_gateways_operations#P2SVpnGatewaysOperations.{}',
        client_factory=cf_p2svpn_gateway,
    )
    with self.command_group('network p2-s-vpn-gateway', network_p2svpn_gateway, client_factory=cf_p2svpn_gateway) as g:
        g.custom_command('disconnect-p2-s-vpn-connection', 'network_p2_s_vpn_gateway_disconnect_p2_s_vpn_connection')
        g.custom_command('get-p2-s-vpn-connection-health', 'network_p2_s_vpn_gateway_get_p2_s_vpn_connection_health')
        g.custom_command(
            'get-p2-s-vpn-connection-health-detailed',
            'network_p2_s_vpn_gateway_get_p2_s_vpn_connection_health_detailed',
        )
        g.custom_command('reset', 'network_p2_s_vpn_gateway_reset')

    from ..generated._client_factory import cf_vpn_server_configuration_associated_with_virtual_wan

    network_vpn_server_configuration_associated_with_virtual_wan = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._vpn_server_configurations_associated_with_virtual_wan_operations#VpnServerConfigurationsAssociatedWithVirtualWanOperations.{}',
        client_factory=cf_vpn_server_configuration_associated_with_virtual_wan,
    )
    with self.command_group(
        'network vpn-server-configuration-associated-with-virtual-wan',
        network_vpn_server_configuration_associated_with_virtual_wan,
        client_factory=cf_vpn_server_configuration_associated_with_virtual_wan,
    ) as g:
        g.custom_command('list', 'network_vpn_server_configuration_associated_with_virtual_wan_list')

    from ..generated._client_factory import cf_virtual_hub_bgp_connection

    network_virtual_hub_bgp_connection = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.network.operations._virtual_hub_bgp_connection_operations#VirtualHubBgpConnectionOperations.{}'
        ),
        client_factory=cf_virtual_hub_bgp_connection,
    )
    with self.command_group(
        'network virtual-hub-bgp-connection',
        network_virtual_hub_bgp_connection,
        client_factory=cf_virtual_hub_bgp_connection,
    ) as g:
        g.custom_command('delete', 'network_virtual_hub_bgp_connection_delete', confirmation=True)

    from ..generated._client_factory import cf_virtual_hub_bgp_connection

    network_virtual_hub_bgp_connection = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._virtual_hub_bgp_connections_operations#VirtualHubBgpConnectionsOperations.{}',
        client_factory=cf_virtual_hub_bgp_connection,
    )
    with self.command_group(
        'network virtual-hub-bgp-connection',
        network_virtual_hub_bgp_connection,
        client_factory=cf_virtual_hub_bgp_connection,
    ) as g:
        g.custom_command('list-advertised-route', 'network_virtual_hub_bgp_connection_list_advertised_route')
        g.custom_command('list-learned-route', 'network_virtual_hub_bgp_connection_list_learned_route')

    from ..generated._client_factory import cf_virtual_hub_ip_configuration

    network_virtual_hub_ip_configuration = CliCommandType(
        operations_tmpl='azure.mgmt.network.operations._virtual_hub_ip_configuration_operations#VirtualHubIpConfigurationOperations.{}',
        client_factory=cf_virtual_hub_ip_configuration,
    )
    with self.command_group(
        'network virtual-hub-ip-configuration',
        network_virtual_hub_ip_configuration,
        client_factory=cf_virtual_hub_ip_configuration,
    ) as g:
        g.custom_command('list', 'network_virtual_hub_ip_configuration_list')
