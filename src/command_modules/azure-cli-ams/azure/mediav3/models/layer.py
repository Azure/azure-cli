# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Layer(Model):
    """Object to represent a video layer.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: BmpLayer, VideoLayer, JpgLayer, PngLayer

    :param width: Gets or sets width of video in pixels for this layer.
    :type width: str
    :param height: Gets or sets height of video in pixels for this layer.
    :type height: str
    :param condition: Gets or sets the predicate to be evaluated before
     encoding this layer.
    :type condition: str
    :param label: Gets or sets the label for this layer.
    :type label: str
    :param odatatype: Constant filled by server.
    :type odatatype: str
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'width': {'key': 'width', 'type': 'str'},
        'height': {'key': 'height', 'type': 'str'},
        'condition': {'key': 'condition', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
    }

    _subtype_map = {
        'odatatype': {'#Microsoft.Media.BmpLayer': 'BmpLayer', '#Microsoft.Media.VideoLayer': 'VideoLayer', '#Microsoft.Media.JpgLayer': 'JpgLayer', '#Microsoft.Media.PngLayer': 'PngLayer'}
    }

    def __init__(self, width=None, height=None, condition=None, label=None):
        super(Layer, self).__init__()
        self.width = width
        self.height = height
        self.condition = condition
        self.label = label
        self.odatatype = None
