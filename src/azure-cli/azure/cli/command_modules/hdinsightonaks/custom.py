# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.log import get_logger
from dataclasses import dataclass

logger = get_logger(__name__)

@dataclass
class NodeProfile:
    Count: int      # The number of virtual machines.
    Type: str       # The node type.
    VMSize: str     # The virtual machine SKU.

@dataclass
class ServiceConfigProfileConfigFile:
    FileName: str   # The name of the config file.
    Value: str      # List of key value pairs where key represents a valid service configuration name and value represents the value of the config.

@dataclass
class ServiceConfigProfileConfig:
    ComponentName: str   # Name of the component the config files should apply to.
    File: ServiceConfigProfileConfigFile            # List of Config Files.

@dataclass
class ServiceConfigsProfile:
    ServiceName: str    # Name of the service the configurations should apply to.
    Config: ServiceConfigProfileConfig        # List of service configs.

@dataclass
class SecretReference:
    secret_name: str
    reference_name: str
    type: str
    version: str = ""

@dataclass
class TrinoHiveCatalog:
    catalog_name: str
    metastore_db_connection_url: str
    metastore_db_connection_user_name: str
    metastore_db_connection_password_secret: str
    metastore_warehouse_dir: str

# Create a node profile with SKU and worker count.
def create_compute_node_profile(count, type, vm_size):
    node_profile = NodeProfile(count, type, vm_size)
    nodes = [repr(node_profile.__dict__).replace(" ", "")]
    return nodes

# Create a service config profile.
def create_service_configs_profile(service_name, config):
    str = "[" + "{'ServiceName':'" + service_name + "','Config':" + config + "]" 
    return str

# Create a component config.
def create_service_config_profile_config(component_name, file):
    str = "[" + "{'ComponentName':'" + component_name + "','File':" + file + "]" 
    return str

# Create cluster config file.
def create_service_config_profile_config_file(file_name, value):
    return "{'FileName':'" + file_name  +"','Value':'" + value + "'}"

# Create a hive catalog configured as a Trino cluster.
def create_trino_hive_catalog(catalog_name, metastore_db_connection_url, metastore_db_connection_user_name, metastore_db_connection_password_secret, metastore_warehouse_dir = None):
    trino_hive_catalog = TrinoHiveCatalog(catalog_name, metastore_db_connection_url, metastore_db_connection_user_name, metastore_db_connection_password_secret, metastore_warehouse_dir)
    return [repr(trino_hive_catalog.__dict__).replace(" ", "")] 

# Create a reference to provide a secret to store the password for accessing the database.
def create_secret_reference(secret_name, reference_name, version=None ):
    secret_reference = SecretReference(secret_name, reference_name, "Secret", version)
    return [repr(secret_reference.__dict__).replace(" ", "")]

# Create an object as a parameter for submitting cluster work.
def create_flink_job_property(action, job_name,job_jar_directory=None,jar_name=None,entry_class=None,args=None,save_point_name=None,flink_configuration=None):
    str = "{'action':'"+ action +"','job_name':'" + job_name+"','type':'FlinkJob'"  
    if job_jar_directory is not None:
        str = str + ",'job_jar_directory':'" + job_jar_directory +"'"
    if jar_name is not None:
        str = str + ",'jar_name':'" + jar_name +"'"
    if entry_class is not None:
        str = str + ",'entry_class':'" + entry_class +"'"
    if args is not None:
        str = str + ",'args':'" + args +"'"
    if save_point_name is not None:
        str = str + ",'save_point_name':'" + save_point_name +"'"
    if flink_configuration is not None:
        str = str + ",'flink_configuration':" + flink_configuration 

    return str + "}"
