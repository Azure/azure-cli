# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .codec import Codec


class ClosedCaption(Codec):
    """An object to represent closed caption encoding.

    :param label: Gets or sets the codec label.
    :type label: str
    :param odatatype: Constant filled by server.
    :type odatatype: str
    :param input_file: Gets or sets the source of the closed caption file It
     can be empty in the case the closed caption is from the
     ClosedCaptionStream selection in the source. If it present (side-car
     input), it has higher priority than the ClosedCaptionStream from the
     source.
    :type input_file: str
    :param output_type: Gets or sets the closed caption output type. Possible
     values include: 'SideCar', 'Stream', 'Embedded'
    :type output_type: str or ~accounts.models.ClosedCaptionType
    :param format: Gets or sets the Closed Caption output format. Possible
     values include: 'Ttml', 'WebVtt'
    :type format: str or ~accounts.models.ClosedCaptionFormat
    """

    _validation = {
        'odatatype': {'required': True},
        'output_type': {'required': True},
        'format': {'required': True},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
        'input_file': {'key': 'inputFile', 'type': 'str'},
        'output_type': {'key': 'outputType', 'type': 'ClosedCaptionType'},
        'format': {'key': 'format', 'type': 'ClosedCaptionFormat'},
    }

    def __init__(self, output_type, format, label=None, input_file=None):
        super(ClosedCaption, self).__init__(label=label)
        self.input_file = input_file
        self.output_type = output_type
        self.format = format
        self.odatatype = '#Microsoft.Media.ClosedCaption'
