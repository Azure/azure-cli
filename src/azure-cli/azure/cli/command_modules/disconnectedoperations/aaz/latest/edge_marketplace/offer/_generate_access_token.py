# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class GenerateAccessToken(AAZCommand):
    """A long-running resource action.
    """

    _aaz_info = {
        "version": "2023-08-01-preview",
        "resources": [
            ["mgmt-plane", "/{resourceuri}/providers/microsoft.edgemarketplace/offers/{}/generateaccesstoken", "2023-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.offer_id = AAZStrArg(
            options=["--offer-id"],
            help="Id of the offer",
            required=True,
        )
        _args_schema.resource_uri = AAZStrArg(
            options=["--resource-uri"],
            help="The fully qualified Azure Resource manager identifier of the resource.",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.device_sku = AAZStrArg(
            options=["--device-sku"],
            arg_group="Body",
            help="The device sku.",
        )
        _args_schema.device_version = AAZStrArg(
            options=["--device-version"],
            arg_group="Body",
            help="The device sku version.",
        )
        _args_schema.edge_market_place_region = AAZStrArg(
            options=["--edge-market-place-region"],
            arg_group="Body",
            help="The region where the disk will be created.",
            required=True,
        )
        _args_schema.ege_market_place_resource_id = AAZStrArg(
            options=["--ege-market-place-resource-id"],
            arg_group="Body",
            help="The region where the disk will be created.",
        )
        _args_schema.hyperv_generation = AAZStrArg(
            options=["--hyperv-generation"],
            arg_group="Body",
            help="The hyperv version.",
        )
        _args_schema.market_place_sku = AAZStrArg(
            options=["--market-place-sku"],
            arg_group="Body",
            help="The marketplace sku.",
        )
        _args_schema.market_place_sku_version = AAZStrArg(
            options=["--market-place-sku-version"],
            arg_group="Body",
            help="The marketplace sku version.",
        )
        _args_schema.publisher_name = AAZStrArg(
            options=["--publisher-name"],
            arg_group="Body",
            help="The name of the publisher.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.OffersGenerateAccessToken(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OffersGenerateAccessToken(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers/{offerId}/generateAccessToken",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "offerId", self.ctx.args.offer_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("deviceSku", AAZStrType, ".device_sku")
            _builder.set_prop("deviceVersion", AAZStrType, ".device_version")
            _builder.set_prop("edgeMarketPlaceRegion", AAZStrType, ".edge_market_place_region", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("egeMarketPlaceResourceId", AAZStrType, ".ege_market_place_resource_id")
            _builder.set_prop("hypervGeneration", AAZStrType, ".hyperv_generation")
            _builder.set_prop("marketPlaceSku", AAZStrType, ".market_place_sku")
            _builder.set_prop("marketPlaceSkuVersion", AAZStrType, ".market_place_sku_version")
            _builder.set_prop("publisherName", AAZStrType, ".publisher_name")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.access_token = AAZStrType(
                serialized_name="accessToken",
                flags={"required": True},
            )
            _schema_on_200.disk_id = AAZStrType(
                serialized_name="diskId",
            )
            _schema_on_200.status = AAZStrType()

            return cls._schema_on_200


class _GenerateAccessTokenHelper:
    """Helper class for GenerateAccessToken"""


__all__ = ["GenerateAccessToken"]
