# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class KeyOperationsParameters(Model):
    """The key operations parameters.

    All required parameters must be populated in order to send to Azure.

    :param algorithm: Required. algorithm identifier. Possible values include:
     'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5', 'A128GCM', 'A192GCM', 'A256GCM',
     'A128KW', 'A192KW', 'A256KW', 'A128CBC', 'A192CBC', 'A256CBC',
     'A128CBCPAD', 'A192CBCPAD', 'A256CBCPAD'
    :type algorithm: str or ~keys.models.JsonWebKeyEncryptionAlgorithm
    :param value: Required.
    :type value: bytes
    :param iv: Initialization vector for symmetric algorithms.
    :type iv: bytes
    :param aad: Additional data to authenticate but not encrypt/decrypt when
     using authenticated crypto algorithms.
    :type aad: bytes
    :param tag: The tag to authenticate when performing decryption with an
     authenticated algorithm.
    :type tag: bytes
    """

    _validation = {
        'algorithm': {'required': True, 'min_length': 1},
        'value': {'required': True},
    }

    _attribute_map = {
        'algorithm': {'key': 'alg', 'type': 'str'},
        'value': {'key': 'value', 'type': 'base64'},
        'iv': {'key': 'iv', 'type': 'base64'},
        'aad': {'key': 'aad', 'type': 'base64'},
        'tag': {'key': 'tag', 'type': 'base64'},
    }

    def __init__(self, *, algorithm, value: bytes, iv: bytes=None, aad: bytes=None, tag: bytes=None, **kwargs) -> None:
        super(KeyOperationsParameters, self).__init__(**kwargs)
        self.algorithm = algorithm
        self.value = value
        self.iv = iv
        self.aad = aad
        self.tag = tag
