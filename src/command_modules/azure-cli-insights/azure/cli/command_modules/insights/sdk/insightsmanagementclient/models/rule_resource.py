# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class RuleResource(Model):
    """
    The alert rule resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param id: Gets or sets the resource identifier of the rule.
    :type id: str
    :param name: Gets or sets the name of the alert rule.
    :type name: str
    :param location: Gets or sets the location of the rule.
    :type location: str
    :param tags: Gets or sets the tags of the rule.
    :type tags: dict
    :param rule_name: Gets or sets the name of the alert rule.
    :type rule_name: str
    :param description: Gets or sets the description of the alert rule that
     will be included in the alert email.
    :type description: str
    :param is_enabled: Gets or sets the flag that indicates whether the alert
     rule is enabled.
    :type is_enabled: bool
    :param condition: Gets or sets the condition that results in the alert
     rule being activated.
    :type condition: :class:`RuleCondition <insights.models.RuleCondition>`
    :param actions: Gets or sets the actions that are performed when the
     alert rule becomes active, and when an alert condition is resolved.
    :type actions: list of :class:`RuleAction <insights.models.RuleAction>`
    :ivar last_updated_time: Last time the rule was updated.
    :vartype last_updated_time: datetime
    """ 

    _validation = {
        'is_enabled': {'required': True},
        'last_updated_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'rule_name': {'key': 'properties.name', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'condition': {'key': 'properties.condition', 'type': 'RuleCondition'},
        'actions': {'key': 'properties.actions', 'type': '[RuleAction]'},
        'last_updated_time': {'key': 'properties.lastUpdatedTime', 'type': 'iso-8601'},
    }

    def __init__(self, is_enabled, id=None, name=None, location=None, tags=None, rule_name=None, description=None, condition=None, actions=None):
        self.id = id
        self.name = name
        self.location = location
        self.tags = tags
        self.rule_name = rule_name
        self.description = description
        self.is_enabled = is_enabled
        self.condition = condition
        self.actions = actions
        self.last_updated_time = None
