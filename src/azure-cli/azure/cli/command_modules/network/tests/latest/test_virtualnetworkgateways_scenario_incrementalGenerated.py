# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_virtual_network_gateway_list_connection
from .example_steps import step_virtual_network_gateway5
from .example_steps import step_virtual_network_gateway8
from .example_steps import step_virtual_network_gateway7
from .example_steps import step_virtual_network_gateway9
from .example_steps import step_virtual_network_gateway6
from .example_steps import step_virtual_network_gateway_supported_vpn_device
from .example_steps import step_virtual_network_gateway_start_packet_capture2
from .example_steps import step_virtual_network_gateway_start_packet_capture
from .example_steps import step_virtual_network_gateway_stop_packet_capture
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    # STEP NOT FOUND: /PublicIPAddresses/put/Create public IP address defaults
    # STEP NOT FOUND: /VirtualNetworks/put/Create virtual network
    # STEP NOT FOUND: /Subnets/put/Create subnet
    # STEP NOT FOUND: /VirtualNetworkGateways/put/UpdateVirtualNetworkGateway
    step_virtual_network_gateway_list_connection(test, checks=[])
    # STEP NOT FOUND: /VirtualNetworkGateways/get/GetVirtualNetworkGateway
    # STEP NOT FOUND: /VirtualNetworkGateways/get/ListVirtualNetworkGatewaysinResourceGroup
    step_virtual_network_gateway5(test, checks=[])
    step_virtual_network_gateway8(test, checks=[])
    step_virtual_network_gateway7(test, checks=[])
    step_virtual_network_gateway9(test, checks=[])
    step_virtual_network_gateway6(test, checks=[])
    # STEP NOT FOUND: /VirtualNetworkGateways/post/GenerateVPNClientPackage
    # STEP NOT FOUND: /VirtualNetworkGateways/post/GetVirtualNetworkGatewayVPNProfilePackageURL
    # STEP NOT FOUND: /VirtualNetworkGateways/post/ResetVpnClientSharedKey
    step_virtual_network_gateway_supported_vpn_device(test, checks=[])
    # STEP NOT FOUND: /VirtualNetworkGateways/post/GetVirtualNetworkGatewayAdvertisedRoutes
    step_virtual_network_gateway_start_packet_capture2(test, checks=[])
    step_virtual_network_gateway_start_packet_capture(test, checks=[])
    # STEP NOT FOUND: /VirtualNetworkGateways/post/GenerateVirtualNetworkGatewayVPNProfile
    step_virtual_network_gateway_stop_packet_capture(test, checks=[])
    # STEP NOT FOUND: /VirtualNetworkGateways/post/GetVirtualNetworkGatewayLearnedRoutes
    # STEP NOT FOUND: /VirtualNetworkGateways/post/GetVirtualNetworkGatewayBGPPeerStatus
    # STEP NOT FOUND: /VirtualNetworkGateways/post/ResetVirtualNetworkGateway
    # STEP NOT FOUND: /VirtualNetworkGateways/patch/UpdateVirtualNetworkGatewayTags
    # STEP NOT FOUND: /VirtualNetworkGateways/delete/DeleteVirtualNetworkGateway
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class VirtualnetworkgatewaysScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(VirtualnetworkgatewaysScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myApplicationGateway': 'appgw',
            'myNetworkInterface': 'nic1',
            'myPublicIpAddress': 'pub1',
            'myCustomIpPrefix': 'test-customipprefix',
            'myInboundNatRule': self.create_random_name(prefix='natRule1.1'[:5], length=10),
            'myDefaultSecurityRule': 'AllowVnetInBound',
            'myNetworkWatcher': 'nw1',
            'myVirtualNetwork': 'vnetName',
            'mySubnet': 'subnet1',
            'myVirtualNetworkGatewayConnection': 'vpngw',
            'myVpnSiteLink': 'vpnSiteLink1',
            'myVpnConnection': 'vpnConnection1',
            'myP2sVpnGateway': 'p2svpngateway',
            'myVirtualNetworkGateway': 'vpngateway',
        })

    @ResourceGroupPreparer(name_prefix='clitestnetwork_rg1'[:7], key='rg', parameter_name='rg')
    def test_virtualnetworkgateways_Scenario(self, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
