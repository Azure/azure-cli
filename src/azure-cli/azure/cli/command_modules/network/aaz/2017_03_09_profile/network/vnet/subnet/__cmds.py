# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network vnet subnet",
)
class __CMDGroup(AAZCommandGroup):
    """Manage subnets in an Azure Virtual Network.

    To learn more about subnets visit https://docs.microsoft.com/azure/virtual-network/virtual-network-manage-subnet.
    """
    pass


@register_command(
    "network vnet subnet create",
)
class Create(AAZCommand):
    """Create a subnet and associate an existing NSG and route table.

    :example: Create new subnet attached to an NSG with a custom route table.
        az network vnet subnet create -g MyResourceGroup --vnet-name MyVnet -n MySubnet --address-prefixes 10.0.0.0/24 --network-security-group MyNsg --route-table MyRouteTable

    :example: Create new subnet attached to a NAT gateway.
        az network vnet subnet create -n MySubnet --vnet-name MyVnet -g MyResourceGroup --nat-gateway MyNatGateway --address-prefixes "10.0.0.0/21"
    """

    _aaz_info = {
        "version": "2015-06-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualnetworks/{}/subnets/{}", "2015-06-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The subnet name.",
            required=True,
        )
        _args_schema.vnet_name = AAZStrArg(
            options=["--vnet-name"],
            help="The virtual network (VNet) name.",
            required=True,
        )
        _args_schema.address_prefix = AAZStrArg(
            options=["--address-prefix"],
            help="The address prefix for the subnet.",
        )
        _args_schema.network_security_group = AAZResourceIdArg(
            options=["--nsg", "--network-security-group"],
            help="Name or ID of a network security group (NSG).",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}",
            ),
        )
        _args_schema.route_table = AAZResourceIdArg(
            options=["--route-table"],
            help="Name or ID of a route table to associate with the subnet.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}",
            ),
        )

        # define Arg Group "NetworkSecurityGroup"

        # define Arg Group "Properties"

        # define Arg Group "RouteTable"

        # define Arg Group "SubnetParameters"
        return cls._args_schema

    _args_ip_configuration_create = None

    @classmethod
    def _build_args_ip_configuration_create(cls, _schema):
        if cls._args_ip_configuration_create is not None:
            _schema.etag = cls._args_ip_configuration_create.etag
            _schema.id = cls._args_ip_configuration_create.id
            _schema.name = cls._args_ip_configuration_create.name
            _schema.private_ip_address = cls._args_ip_configuration_create.private_ip_address
            _schema.private_ip_allocation_method = cls._args_ip_configuration_create.private_ip_allocation_method
            _schema.public_ip_address = cls._args_ip_configuration_create.public_ip_address
            _schema.subnet = cls._args_ip_configuration_create.subnet
            return

        cls._args_ip_configuration_create = AAZObjectArg()

        ip_configuration_create = cls._args_ip_configuration_create
        ip_configuration_create.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        ip_configuration_create.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
        )
        ip_configuration_create.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        ip_configuration_create.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="The private IP address of the IP configuration.",
        )
        ip_configuration_create.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="The private IP allocation method. Possible values are 'Static' and 'Dynamic'.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        ip_configuration_create.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="The reference of the public IP resource.",
        )
        cls._build_args_public_ip_address_create(ip_configuration_create.public_ip_address)
        ip_configuration_create.subnet = AAZObjectArg(
            options=["subnet"],
            help="The reference of the subnet resource.",
        )
        cls._build_args_subnet_create(ip_configuration_create.subnet)

        _schema.etag = cls._args_ip_configuration_create.etag
        _schema.id = cls._args_ip_configuration_create.id
        _schema.name = cls._args_ip_configuration_create.name
        _schema.private_ip_address = cls._args_ip_configuration_create.private_ip_address
        _schema.private_ip_allocation_method = cls._args_ip_configuration_create.private_ip_allocation_method
        _schema.public_ip_address = cls._args_ip_configuration_create.public_ip_address
        _schema.subnet = cls._args_ip_configuration_create.subnet

    _args_network_interface_ip_configuration_create = None

    @classmethod
    def _build_args_network_interface_ip_configuration_create(cls, _schema):
        if cls._args_network_interface_ip_configuration_create is not None:
            _schema.etag = cls._args_network_interface_ip_configuration_create.etag
            _schema.id = cls._args_network_interface_ip_configuration_create.id
            _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_create.load_balancer_backend_address_pools
            _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_create.load_balancer_inbound_nat_rules
            _schema.name = cls._args_network_interface_ip_configuration_create.name
            _schema.primary = cls._args_network_interface_ip_configuration_create.primary
            _schema.private_ip_address = cls._args_network_interface_ip_configuration_create.private_ip_address
            _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_create.private_ip_allocation_method
            _schema.provisioning_state = cls._args_network_interface_ip_configuration_create.provisioning_state
            _schema.public_ip_address = cls._args_network_interface_ip_configuration_create.public_ip_address
            _schema.subnet = cls._args_network_interface_ip_configuration_create.subnet
            return

        cls._args_network_interface_ip_configuration_create = AAZObjectArg()

        network_interface_ip_configuration_create = cls._args_network_interface_ip_configuration_create
        network_interface_ip_configuration_create.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        network_interface_ip_configuration_create.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
        )
        network_interface_ip_configuration_create.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        network_interface_ip_configuration_create.load_balancer_backend_address_pools = AAZListArg(
            options=["load-balancer-backend-address-pools"],
            help="The reference of LoadBalancerBackendAddressPool resource.",
        )
        network_interface_ip_configuration_create.load_balancer_inbound_nat_rules = AAZListArg(
            options=["load-balancer-inbound-nat-rules"],
            help="A list of references of LoadBalancerInboundNatRules.",
        )
        network_interface_ip_configuration_create.primary = AAZBoolArg(
            options=["primary"],
            help="Gets whether this is a primary customer address on the network interface.",
        )
        network_interface_ip_configuration_create.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
        )
        network_interface_ip_configuration_create.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        network_interface_ip_configuration_create.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
        )
        network_interface_ip_configuration_create.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="Public IP address resource.",
        )
        cls._build_args_public_ip_address_create(network_interface_ip_configuration_create.public_ip_address)
        network_interface_ip_configuration_create.subnet = AAZObjectArg(
            options=["subnet"],
        )
        cls._build_args_subnet_create(network_interface_ip_configuration_create.subnet)

        load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_create.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_create.load_balancer_backend_address_pools.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.backend_ip_configurations = AAZListArg(
            options=["backend-ip-configurations"],
            help="Gets collection of references to IP addresses defined in network interfaces.",
        )
        _element.outbound_nat_rule = AAZObjectArg(
            options=["outbound-nat-rule"],
            help="Gets outbound rules that use this backend address pool.",
        )
        cls._build_args_sub_resource_create(_element.outbound_nat_rule)
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )

        backend_ip_configurations = cls._args_network_interface_ip_configuration_create.load_balancer_backend_address_pools.Element.backend_ip_configurations
        backend_ip_configurations.Element = AAZObjectArg()
        cls._build_args_network_interface_ip_configuration_create(backend_ip_configurations.Element)

        load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_create.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectArg()

        _element = cls._args_network_interface_ip_configuration_create.load_balancer_inbound_nat_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.backend_ip_configuration = AAZObjectArg(
            options=["backend-ip-configuration"],
            help="A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backed IP.",
        )
        cls._build_args_network_interface_ip_configuration_create(_element.backend_ip_configuration)
        _element.backend_port = AAZIntArg(
            options=["backend-port"],
            help="The port used for the internal endpoint. Acceptable values range from 1 to 65535.",
        )
        _element.enable_floating_ip = AAZBoolArg(
            options=["enable-floating-ip"],
            help="Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.",
        )
        _element.frontend_ip_configuration = AAZObjectArg(
            options=["frontend-ip-configuration"],
            help="A reference to frontend IP addresses.",
        )
        cls._build_args_sub_resource_create(_element.frontend_ip_configuration)
        _element.frontend_port = AAZIntArg(
            options=["frontend-port"],
            help="The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.",
        )
        _element.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'",
            enum={"Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )

        _schema.etag = cls._args_network_interface_ip_configuration_create.etag
        _schema.id = cls._args_network_interface_ip_configuration_create.id
        _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_create.load_balancer_backend_address_pools
        _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_create.load_balancer_inbound_nat_rules
        _schema.name = cls._args_network_interface_ip_configuration_create.name
        _schema.primary = cls._args_network_interface_ip_configuration_create.primary
        _schema.private_ip_address = cls._args_network_interface_ip_configuration_create.private_ip_address
        _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_create.private_ip_allocation_method
        _schema.provisioning_state = cls._args_network_interface_ip_configuration_create.provisioning_state
        _schema.public_ip_address = cls._args_network_interface_ip_configuration_create.public_ip_address
        _schema.subnet = cls._args_network_interface_ip_configuration_create.subnet

    _args_network_security_group_create = None

    @classmethod
    def _build_args_network_security_group_create(cls, _schema):
        if cls._args_network_security_group_create is not None:
            _schema.default_security_rules = cls._args_network_security_group_create.default_security_rules
            _schema.etag = cls._args_network_security_group_create.etag
            _schema.id = cls._args_network_security_group_create.id
            _schema.location = cls._args_network_security_group_create.location
            _schema.network_interfaces = cls._args_network_security_group_create.network_interfaces
            _schema.resource_guid = cls._args_network_security_group_create.resource_guid
            _schema.security_rules = cls._args_network_security_group_create.security_rules
            _schema.subnets = cls._args_network_security_group_create.subnets
            _schema.tags = cls._args_network_security_group_create.tags
            return

        cls._args_network_security_group_create = AAZObjectArg()

        network_security_group_create = cls._args_network_security_group_create
        network_security_group_create.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        network_security_group_create.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}",
            ),
        )
        network_security_group_create.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        network_security_group_create.default_security_rules = AAZListArg(
            options=["default-security-rules"],
            help="The default security rules of network security group.",
        )
        network_security_group_create.network_interfaces = AAZListArg(
            options=["network-interfaces"],
            help="A collection of references to network interfaces.",
        )
        network_security_group_create.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the network security group resource.",
        )
        network_security_group_create.security_rules = AAZListArg(
            options=["security-rules"],
            help="A collection of security rules of the network security group.",
        )
        network_security_group_create.subnets = AAZListArg(
            options=["subnets"],
            help="A collection of references to subnets.",
        )
        network_security_group_create.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        default_security_rules = cls._args_network_security_group_create.default_security_rules
        default_security_rules.Element = AAZObjectArg()
        cls._build_args_security_rule_create(default_security_rules.Element)

        network_interfaces = cls._args_network_security_group_create.network_interfaces
        network_interfaces.Element = AAZObjectArg()

        _element = cls._args_network_security_group_create.network_interfaces.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkInterfaces/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.dns_settings = AAZObjectArg(
            options=["dns-settings"],
            help="The DNS settings in network interface.",
        )
        _element.enable_ip_forwarding = AAZBoolArg(
            options=["enable-ip-forwarding"],
            help="Indicates whether IP forwarding is enabled on this network interface.",
        )
        _element.ip_configurations = AAZListArg(
            options=["ip-configurations"],
            help="A list of IPConfigurations of the network interface.",
        )
        _element.mac_address = AAZStrArg(
            options=["mac-address"],
            help="The MAC address of the network interface.",
        )
        _element.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference of the NetworkSecurityGroup resource.",
        )
        cls._build_args_network_security_group_create(_element.network_security_group)
        _element.primary = AAZBoolArg(
            options=["primary"],
            help="Gets whether this is a primary network interface on a virtual machine.",
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        _element.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the network interface resource.",
        )
        _element.virtual_machine = AAZObjectArg(
            options=["virtual-machine"],
            help="The reference of a virtual machine.",
        )
        cls._build_args_sub_resource_create(_element.virtual_machine)
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        dns_settings = cls._args_network_security_group_create.network_interfaces.Element.dns_settings
        dns_settings.applied_dns_servers = AAZListArg(
            options=["applied-dns-servers"],
            help="If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.",
        )
        dns_settings.dns_servers = AAZListArg(
            options=["dns-servers"],
            help="List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.",
        )
        dns_settings.internal_dns_name_label = AAZStrArg(
            options=["internal-dns-name-label"],
            help="Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.",
        )
        dns_settings.internal_fqdn = AAZStrArg(
            options=["internal-fqdn"],
            help="Fully qualified DNS name supporting internal communications between VMs in the same virtual network.",
        )

        applied_dns_servers = cls._args_network_security_group_create.network_interfaces.Element.dns_settings.applied_dns_servers
        applied_dns_servers.Element = AAZStrArg()

        dns_servers = cls._args_network_security_group_create.network_interfaces.Element.dns_settings.dns_servers
        dns_servers.Element = AAZStrArg()

        ip_configurations = cls._args_network_security_group_create.network_interfaces.Element.ip_configurations
        ip_configurations.Element = AAZObjectArg()
        cls._build_args_network_interface_ip_configuration_create(ip_configurations.Element)

        tags = cls._args_network_security_group_create.network_interfaces.Element.tags
        tags.Element = AAZStrArg()

        security_rules = cls._args_network_security_group_create.security_rules
        security_rules.Element = AAZObjectArg()
        cls._build_args_security_rule_create(security_rules.Element)

        subnets = cls._args_network_security_group_create.subnets
        subnets.Element = AAZObjectArg()
        cls._build_args_subnet_create(subnets.Element)

        tags = cls._args_network_security_group_create.tags
        tags.Element = AAZStrArg()

        _schema.default_security_rules = cls._args_network_security_group_create.default_security_rules
        _schema.etag = cls._args_network_security_group_create.etag
        _schema.id = cls._args_network_security_group_create.id
        _schema.location = cls._args_network_security_group_create.location
        _schema.network_interfaces = cls._args_network_security_group_create.network_interfaces
        _schema.resource_guid = cls._args_network_security_group_create.resource_guid
        _schema.security_rules = cls._args_network_security_group_create.security_rules
        _schema.subnets = cls._args_network_security_group_create.subnets
        _schema.tags = cls._args_network_security_group_create.tags

    _args_public_ip_address_create = None

    @classmethod
    def _build_args_public_ip_address_create(cls, _schema):
        if cls._args_public_ip_address_create is not None:
            _schema.dns_settings = cls._args_public_ip_address_create.dns_settings
            _schema.etag = cls._args_public_ip_address_create.etag
            _schema.idle_timeout_in_minutes = cls._args_public_ip_address_create.idle_timeout_in_minutes
            _schema.ip_address = cls._args_public_ip_address_create.ip_address
            _schema.ip_configuration = cls._args_public_ip_address_create.ip_configuration
            _schema.location = cls._args_public_ip_address_create.location
            _schema.provisioning_state = cls._args_public_ip_address_create.provisioning_state
            _schema.public_ip_allocation_method = cls._args_public_ip_address_create.public_ip_allocation_method
            _schema.resource_guid = cls._args_public_ip_address_create.resource_guid
            _schema.tags = cls._args_public_ip_address_create.tags
            return

        cls._args_public_ip_address_create = AAZObjectArg()

        public_ip_address_create = cls._args_public_ip_address_create
        public_ip_address_create.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        public_ip_address_create.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        public_ip_address_create.dns_settings = AAZObjectArg(
            options=["dns-settings"],
            help="The FQDN of the DNS record associated with the public IP address.",
        )
        public_ip_address_create.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The idle timeout of the public IP address.",
        )
        public_ip_address_create.ip_address = AAZStrArg(
            options=["ip-address"],
        )
        public_ip_address_create.ip_configuration = AAZObjectArg(
            options=["ip-configuration"],
            help="IPConfiguration",
        )
        cls._build_args_ip_configuration_create(public_ip_address_create.ip_configuration)
        public_ip_address_create.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        public_ip_address_create.public_ip_allocation_method = AAZStrArg(
            options=["public-ip-allocation-method"],
            help="The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        public_ip_address_create.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the public IP resource.",
        )
        public_ip_address_create.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        dns_settings = cls._args_public_ip_address_create.dns_settings
        dns_settings.domain_name_label = AAZStrArg(
            options=["domain-name-label"],
            help="Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.",
        )
        dns_settings.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.",
        )
        dns_settings.reverse_fqdn = AAZStrArg(
            options=["reverse-fqdn"],
            help="Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. ",
        )

        tags = cls._args_public_ip_address_create.tags
        tags.Element = AAZStrArg()

        _schema.dns_settings = cls._args_public_ip_address_create.dns_settings
        _schema.etag = cls._args_public_ip_address_create.etag
        _schema.idle_timeout_in_minutes = cls._args_public_ip_address_create.idle_timeout_in_minutes
        _schema.ip_address = cls._args_public_ip_address_create.ip_address
        _schema.ip_configuration = cls._args_public_ip_address_create.ip_configuration
        _schema.location = cls._args_public_ip_address_create.location
        _schema.provisioning_state = cls._args_public_ip_address_create.provisioning_state
        _schema.public_ip_allocation_method = cls._args_public_ip_address_create.public_ip_allocation_method
        _schema.resource_guid = cls._args_public_ip_address_create.resource_guid
        _schema.tags = cls._args_public_ip_address_create.tags

    _args_security_rule_create = None

    @classmethod
    def _build_args_security_rule_create(cls, _schema):
        if cls._args_security_rule_create is not None:
            _schema.access = cls._args_security_rule_create.access
            _schema.description = cls._args_security_rule_create.description
            _schema.destination_address_prefix = cls._args_security_rule_create.destination_address_prefix
            _schema.destination_port_range = cls._args_security_rule_create.destination_port_range
            _schema.direction = cls._args_security_rule_create.direction
            _schema.etag = cls._args_security_rule_create.etag
            _schema.name = cls._args_security_rule_create.name
            _schema.priority = cls._args_security_rule_create.priority
            _schema.protocol = cls._args_security_rule_create.protocol
            _schema.provisioning_state = cls._args_security_rule_create.provisioning_state
            _schema.source_address_prefix = cls._args_security_rule_create.source_address_prefix
            _schema.source_port_range = cls._args_security_rule_create.source_port_range
            return

        cls._args_security_rule_create = AAZObjectArg()

        security_rule_create = cls._args_security_rule_create
        security_rule_create.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        security_rule_create.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        security_rule_create.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        security_rule_create.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
        )
        security_rule_create.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
        )
        security_rule_create.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.",
        )
        security_rule_create.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        security_rule_create.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
        )
        security_rule_create.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        security_rule_create.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )
        security_rule_create.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
        )
        security_rule_create.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.",
        )

        _schema.access = cls._args_security_rule_create.access
        _schema.description = cls._args_security_rule_create.description
        _schema.destination_address_prefix = cls._args_security_rule_create.destination_address_prefix
        _schema.destination_port_range = cls._args_security_rule_create.destination_port_range
        _schema.direction = cls._args_security_rule_create.direction
        _schema.etag = cls._args_security_rule_create.etag
        _schema.name = cls._args_security_rule_create.name
        _schema.priority = cls._args_security_rule_create.priority
        _schema.protocol = cls._args_security_rule_create.protocol
        _schema.provisioning_state = cls._args_security_rule_create.provisioning_state
        _schema.source_address_prefix = cls._args_security_rule_create.source_address_prefix
        _schema.source_port_range = cls._args_security_rule_create.source_port_range

    _args_sub_resource_create = None

    @classmethod
    def _build_args_sub_resource_create(cls, _schema):
        if cls._args_sub_resource_create is not None:
            _schema.id = cls._args_sub_resource_create.id
            return

        cls._args_sub_resource_create = AAZObjectArg()

        sub_resource_create = cls._args_sub_resource_create
        sub_resource_create.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
        )

        _schema.id = cls._args_sub_resource_create.id

    _args_subnet_create = None

    @classmethod
    def _build_args_subnet_create(cls, _schema):
        if cls._args_subnet_create is not None:
            _schema.address_prefix = cls._args_subnet_create.address_prefix
            _schema.etag = cls._args_subnet_create.etag
            _schema.ip_configurations = cls._args_subnet_create.ip_configurations
            _schema.name = cls._args_subnet_create.name
            _schema.network_security_group = cls._args_subnet_create.network_security_group
            _schema.route_table = cls._args_subnet_create.route_table
            return

        cls._args_subnet_create = AAZObjectArg()

        subnet_create = cls._args_subnet_create
        subnet_create.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        subnet_create.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        subnet_create.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The address prefix for the subnet.",
        )
        subnet_create.ip_configurations = AAZListArg(
            options=["ip-configurations"],
            help="Gets an array of references to the network interface IP configurations using subnet.",
        )
        subnet_create.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference of the NetworkSecurityGroup resource.",
        )
        cls._build_args_network_security_group_create(subnet_create.network_security_group)
        subnet_create.route_table = AAZObjectArg(
            options=["route-table"],
            help="The reference of the RouteTable resource.",
        )

        ip_configurations = cls._args_subnet_create.ip_configurations
        ip_configurations.Element = AAZObjectArg()
        cls._build_args_ip_configuration_create(ip_configurations.Element)

        route_table = cls._args_subnet_create.route_table
        route_table.etag = AAZStrArg(
            options=["etag"],
            help="Gets a unique read-only string that changes whenever the resource is updated.",
        )
        route_table.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}",
            ),
        )
        route_table.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        route_table.routes = AAZListArg(
            options=["routes"],
            help="Collection of routes contained within a route table.",
        )
        route_table.subnets = AAZListArg(
            options=["subnets"],
            help="A collection of references to subnets.",
        )
        route_table.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
        )

        routes = cls._args_subnet_create.route_table.routes
        routes.Element = AAZObjectArg()

        _element = cls._args_subnet_create.route_table.routes.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}/routes/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
        )
        _element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The destination CIDR to which the route applies.",
        )
        _element.next_hop_ip_address = AAZStrArg(
            options=["next-hop-ip-address"],
            help="The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.",
        )
        _element.next_hop_type = AAZStrArg(
            options=["next-hop-type"],
            help="The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'",
            enum={"Internet": "Internet", "None": "None", "VirtualAppliance": "VirtualAppliance", "VirtualNetworkGateway": "VirtualNetworkGateway", "VnetLocal": "VnetLocal"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
        )

        subnets = cls._args_subnet_create.route_table.subnets
        subnets.Element = AAZObjectArg()
        cls._build_args_subnet_create(subnets.Element)

        tags = cls._args_subnet_create.route_table.tags
        tags.Element = AAZStrArg()

        _schema.address_prefix = cls._args_subnet_create.address_prefix
        _schema.etag = cls._args_subnet_create.etag
        _schema.ip_configurations = cls._args_subnet_create.ip_configurations
        _schema.name = cls._args_subnet_create.name
        _schema.network_security_group = cls._args_subnet_create.network_security_group
        _schema.route_table = cls._args_subnet_create.route_table

    def _execute_operations(self):
        self.pre_operations()
        yield self.SubnetsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SubnetsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subnetName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("addressPrefix", AAZStrType, ".address_prefix")
                properties.set_prop("networkSecurityGroup", AAZObjectType)
                properties.set_prop("routeTable", AAZObjectType)

            network_security_group = _builder.get(".properties.networkSecurityGroup")
            if network_security_group is not None:
                network_security_group.set_prop("id", AAZStrType, ".network_security_group")
                network_security_group.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            route_table = _builder.get(".properties.routeTable")
            if route_table is not None:
                route_table.set_prop("id", AAZStrType, ".route_table")
                route_table.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _CreateHelper._build_schema_subnet_read(cls._schema_on_200_201)

            return cls._schema_on_200_201


@register_command(
    "network vnet subnet delete",
)
class Delete(AAZCommand):
    """Delete a subnet.

    :example: Delete a subnet.
        az network vnet subnet delete --name MySubnet --resource-group MyResourceGroup --vnet-name MyVnet
    """

    _aaz_info = {
        "version": "2015-06-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualnetworks/{}/subnets/{}", "2015-06-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The subnet name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.vnet_name = AAZStrArg(
            options=["--vnet-name"],
            help="The virtual network (VNet) name.",
            required=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SubnetsDelete(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class SubnetsDelete(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [204]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_204,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "DELETE"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subnetName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        def on_200(self, session):
            pass

        def on_204(self, session):
            pass


@register_command(
    "network vnet subnet list",
)
class List(AAZCommand):
    """List the subnets in a virtual network.

    :example: List the subnets in a virtual network.
        az network vnet subnet list -g MyResourceGroup --vnet-name MyVNet
    """

    _aaz_info = {
        "version": "2015-06-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualnetworks/{}/subnets", "2015-06-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vnet_name = AAZStrArg(
            options=["--vnet-name"],
            help="The virtual network (VNet) name.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SubnetsList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class SubnetsList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()
            _ListHelper._build_schema_subnet_read(value.Element)

            return cls._schema_on_200


@register_command(
    "network vnet subnet show",
)
class Show(AAZCommand):
    """Show details of a subnet.

    :example: Show the details of a subnet associated with a virtual network.
        az network vnet subnet show -g MyResourceGroup -n MySubnet --vnet-name MyVNet
    """

    _aaz_info = {
        "version": "2015-06-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualnetworks/{}/subnets/{}", "2015-06-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The subnet name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.vnet_name = AAZStrArg(
            options=["--vnet-name"],
            help="The virtual network (VNet) name.",
            required=True,
            id_part="name",
        )
        _args_schema.expand = AAZStrArg(
            options=["--expand"],
            help="Expands referenced resources. Default value is None.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SubnetsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SubnetsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subnetName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$expand", self.ctx.args.expand,
                ),
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_subnet_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network vnet subnet update",
)
class Update(AAZCommand):
    """Update a subnet.

    :example: Associate a network security group to a subnet.
        az network vnet subnet update -g MyResourceGroup -n MySubnet --vnet-name MyVNet --network-security-group MyNsg

    :example: Update subnet with NAT gateway.
        az network vnet subnet update -n MySubnet --vnet-name MyVnet -g MyResourceGroup --nat-gateway MyNatGateway --address-prefixes "10.0.0.0/21"

    :example: Disable the private endpoint network policies
        az network vnet subnet update -n MySubnet --vnet-name MyVnet -g MyResourceGroup --disable-private-endpoint-network-policies

    :example: Detach a network security group in a subnet.
        az network vnet subnet update -g MyResourceGroup --vnet-name MyVNet -n MySubnet --nsg null
    """

    _aaz_info = {
        "version": "2015-06-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualnetworks/{}/subnets/{}", "2015-06-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The subnet name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.vnet_name = AAZStrArg(
            options=["--vnet-name"],
            help="The virtual network (VNet) name.",
            required=True,
            id_part="name",
        )
        _args_schema.address_prefix = AAZStrArg(
            options=["--address-prefix"],
            help="The address prefix for the subnet.",
            nullable=True,
        )
        _args_schema.network_security_group = AAZResourceIdArg(
            options=["--nsg", "--network-security-group"],
            help="Name or ID of a network security group (NSG). Use null to detach it.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}",
            ),
        )
        _args_schema.route_table = AAZResourceIdArg(
            options=["--route-table"],
            help="Name or ID of a route table to associate with the subnet. Use null to detach it.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}",
            ),
        )

        # define Arg Group "NetworkSecurityGroup"

        # define Arg Group "Properties"

        # define Arg Group "RouteTable"

        # define Arg Group "SubnetParameters"
        return cls._args_schema

    _args_ip_configuration_update = None

    @classmethod
    def _build_args_ip_configuration_update(cls, _schema):
        if cls._args_ip_configuration_update is not None:
            _schema.etag = cls._args_ip_configuration_update.etag
            _schema.id = cls._args_ip_configuration_update.id
            _schema.name = cls._args_ip_configuration_update.name
            _schema.private_ip_address = cls._args_ip_configuration_update.private_ip_address
            _schema.private_ip_allocation_method = cls._args_ip_configuration_update.private_ip_allocation_method
            _schema.public_ip_address = cls._args_ip_configuration_update.public_ip_address
            _schema.subnet = cls._args_ip_configuration_update.subnet
            return

        cls._args_ip_configuration_update = AAZObjectArg(
            nullable=True,
        )

        ip_configuration_update = cls._args_ip_configuration_update
        ip_configuration_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        ip_configuration_update.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
        )
        ip_configuration_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        ip_configuration_update.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="The private IP address of the IP configuration.",
            nullable=True,
        )
        ip_configuration_update.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="The private IP allocation method. Possible values are 'Static' and 'Dynamic'.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        ip_configuration_update.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="The reference of the public IP resource.",
            nullable=True,
        )
        cls._build_args_public_ip_address_update(ip_configuration_update.public_ip_address)
        ip_configuration_update.subnet = AAZObjectArg(
            options=["subnet"],
            help="The reference of the subnet resource.",
            nullable=True,
        )
        cls._build_args_subnet_update(ip_configuration_update.subnet)

        _schema.etag = cls._args_ip_configuration_update.etag
        _schema.id = cls._args_ip_configuration_update.id
        _schema.name = cls._args_ip_configuration_update.name
        _schema.private_ip_address = cls._args_ip_configuration_update.private_ip_address
        _schema.private_ip_allocation_method = cls._args_ip_configuration_update.private_ip_allocation_method
        _schema.public_ip_address = cls._args_ip_configuration_update.public_ip_address
        _schema.subnet = cls._args_ip_configuration_update.subnet

    _args_network_interface_ip_configuration_update = None

    @classmethod
    def _build_args_network_interface_ip_configuration_update(cls, _schema):
        if cls._args_network_interface_ip_configuration_update is not None:
            _schema.etag = cls._args_network_interface_ip_configuration_update.etag
            _schema.id = cls._args_network_interface_ip_configuration_update.id
            _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
            _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
            _schema.name = cls._args_network_interface_ip_configuration_update.name
            _schema.primary = cls._args_network_interface_ip_configuration_update.primary
            _schema.private_ip_address = cls._args_network_interface_ip_configuration_update.private_ip_address
            _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_update.private_ip_allocation_method
            _schema.provisioning_state = cls._args_network_interface_ip_configuration_update.provisioning_state
            _schema.public_ip_address = cls._args_network_interface_ip_configuration_update.public_ip_address
            _schema.subnet = cls._args_network_interface_ip_configuration_update.subnet
            return

        cls._args_network_interface_ip_configuration_update = AAZObjectArg(
            nullable=True,
        )

        network_interface_ip_configuration_update = cls._args_network_interface_ip_configuration_update
        network_interface_ip_configuration_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        network_interface_ip_configuration_update.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
        )
        network_interface_ip_configuration_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        network_interface_ip_configuration_update.load_balancer_backend_address_pools = AAZListArg(
            options=["load-balancer-backend-address-pools"],
            help="The reference of LoadBalancerBackendAddressPool resource.",
            nullable=True,
        )
        network_interface_ip_configuration_update.load_balancer_inbound_nat_rules = AAZListArg(
            options=["load-balancer-inbound-nat-rules"],
            help="A list of references of LoadBalancerInboundNatRules.",
            nullable=True,
        )
        network_interface_ip_configuration_update.primary = AAZBoolArg(
            options=["primary"],
            help="Gets whether this is a primary customer address on the network interface.",
            nullable=True,
        )
        network_interface_ip_configuration_update.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            nullable=True,
        )
        network_interface_ip_configuration_update.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        network_interface_ip_configuration_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            nullable=True,
        )
        network_interface_ip_configuration_update.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="Public IP address resource.",
            nullable=True,
        )
        cls._build_args_public_ip_address_update(network_interface_ip_configuration_update.public_ip_address)
        network_interface_ip_configuration_update.subnet = AAZObjectArg(
            options=["subnet"],
            nullable=True,
        )
        cls._build_args_subnet_update(network_interface_ip_configuration_update.subnet)

        load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.backend_ip_configurations = AAZListArg(
            options=["backend-ip-configurations"],
            help="Gets collection of references to IP addresses defined in network interfaces.",
            nullable=True,
        )
        _element.outbound_nat_rule = AAZObjectArg(
            options=["outbound-nat-rule"],
            help="Gets outbound rules that use this backend address pool.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(_element.outbound_nat_rule)
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )

        backend_ip_configurations = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools.Element.backend_ip_configurations
        backend_ip_configurations.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_network_interface_ip_configuration_update(backend_ip_configurations.Element)

        load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.backend_ip_configuration = AAZObjectArg(
            options=["backend-ip-configuration"],
            help="A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backed IP.",
            nullable=True,
        )
        cls._build_args_network_interface_ip_configuration_update(_element.backend_ip_configuration)
        _element.backend_port = AAZIntArg(
            options=["backend-port"],
            help="The port used for the internal endpoint. Acceptable values range from 1 to 65535.",
            nullable=True,
        )
        _element.enable_floating_ip = AAZBoolArg(
            options=["enable-floating-ip"],
            help="Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.",
            nullable=True,
        )
        _element.frontend_ip_configuration = AAZObjectArg(
            options=["frontend-ip-configuration"],
            help="A reference to frontend IP addresses.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(_element.frontend_ip_configuration)
        _element.frontend_port = AAZIntArg(
            options=["frontend-port"],
            help="The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.",
            nullable=True,
        )
        _element.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.",
            nullable=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'",
            nullable=True,
            enum={"Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )

        _schema.etag = cls._args_network_interface_ip_configuration_update.etag
        _schema.id = cls._args_network_interface_ip_configuration_update.id
        _schema.load_balancer_backend_address_pools = cls._args_network_interface_ip_configuration_update.load_balancer_backend_address_pools
        _schema.load_balancer_inbound_nat_rules = cls._args_network_interface_ip_configuration_update.load_balancer_inbound_nat_rules
        _schema.name = cls._args_network_interface_ip_configuration_update.name
        _schema.primary = cls._args_network_interface_ip_configuration_update.primary
        _schema.private_ip_address = cls._args_network_interface_ip_configuration_update.private_ip_address
        _schema.private_ip_allocation_method = cls._args_network_interface_ip_configuration_update.private_ip_allocation_method
        _schema.provisioning_state = cls._args_network_interface_ip_configuration_update.provisioning_state
        _schema.public_ip_address = cls._args_network_interface_ip_configuration_update.public_ip_address
        _schema.subnet = cls._args_network_interface_ip_configuration_update.subnet

    _args_network_security_group_update = None

    @classmethod
    def _build_args_network_security_group_update(cls, _schema):
        if cls._args_network_security_group_update is not None:
            _schema.default_security_rules = cls._args_network_security_group_update.default_security_rules
            _schema.etag = cls._args_network_security_group_update.etag
            _schema.id = cls._args_network_security_group_update.id
            _schema.location = cls._args_network_security_group_update.location
            _schema.network_interfaces = cls._args_network_security_group_update.network_interfaces
            _schema.resource_guid = cls._args_network_security_group_update.resource_guid
            _schema.security_rules = cls._args_network_security_group_update.security_rules
            _schema.subnets = cls._args_network_security_group_update.subnets
            _schema.tags = cls._args_network_security_group_update.tags
            return

        cls._args_network_security_group_update = AAZObjectArg(
            nullable=True,
        )

        network_security_group_update = cls._args_network_security_group_update
        network_security_group_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        network_security_group_update.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}",
            ),
        )
        network_security_group_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        network_security_group_update.default_security_rules = AAZListArg(
            options=["default-security-rules"],
            help="The default security rules of network security group.",
            nullable=True,
        )
        network_security_group_update.network_interfaces = AAZListArg(
            options=["network-interfaces"],
            help="A collection of references to network interfaces.",
            nullable=True,
        )
        network_security_group_update.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the network security group resource.",
            nullable=True,
        )
        network_security_group_update.security_rules = AAZListArg(
            options=["security-rules"],
            help="A collection of security rules of the network security group.",
            nullable=True,
        )
        network_security_group_update.subnets = AAZListArg(
            options=["subnets"],
            help="A collection of references to subnets.",
            nullable=True,
        )
        network_security_group_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        default_security_rules = cls._args_network_security_group_update.default_security_rules
        default_security_rules.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_security_rule_update(default_security_rules.Element)

        network_interfaces = cls._args_network_security_group_update.network_interfaces
        network_interfaces.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_security_group_update.network_interfaces.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkInterfaces/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.dns_settings = AAZObjectArg(
            options=["dns-settings"],
            help="The DNS settings in network interface.",
            nullable=True,
        )
        _element.enable_ip_forwarding = AAZBoolArg(
            options=["enable-ip-forwarding"],
            help="Indicates whether IP forwarding is enabled on this network interface.",
            nullable=True,
        )
        _element.ip_configurations = AAZListArg(
            options=["ip-configurations"],
            help="A list of IPConfigurations of the network interface.",
            nullable=True,
        )
        _element.mac_address = AAZStrArg(
            options=["mac-address"],
            help="The MAC address of the network interface.",
            nullable=True,
        )
        _element.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference of the NetworkSecurityGroup resource.",
            nullable=True,
        )
        cls._build_args_network_security_group_update(_element.network_security_group)
        _element.primary = AAZBoolArg(
            options=["primary"],
            help="Gets whether this is a primary network interface on a virtual machine.",
            nullable=True,
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        _element.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the network interface resource.",
            nullable=True,
        )
        _element.virtual_machine = AAZObjectArg(
            options=["virtual-machine"],
            help="The reference of a virtual machine.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(_element.virtual_machine)
        _element.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        dns_settings = cls._args_network_security_group_update.network_interfaces.Element.dns_settings
        dns_settings.applied_dns_servers = AAZListArg(
            options=["applied-dns-servers"],
            help="If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.",
            nullable=True,
        )
        dns_settings.dns_servers = AAZListArg(
            options=["dns-servers"],
            help="List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.",
            nullable=True,
        )
        dns_settings.internal_dns_name_label = AAZStrArg(
            options=["internal-dns-name-label"],
            help="Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.",
            nullable=True,
        )
        dns_settings.internal_fqdn = AAZStrArg(
            options=["internal-fqdn"],
            help="Fully qualified DNS name supporting internal communications between VMs in the same virtual network.",
            nullable=True,
        )

        applied_dns_servers = cls._args_network_security_group_update.network_interfaces.Element.dns_settings.applied_dns_servers
        applied_dns_servers.Element = AAZStrArg(
            nullable=True,
        )

        dns_servers = cls._args_network_security_group_update.network_interfaces.Element.dns_settings.dns_servers
        dns_servers.Element = AAZStrArg(
            nullable=True,
        )

        ip_configurations = cls._args_network_security_group_update.network_interfaces.Element.ip_configurations
        ip_configurations.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_network_interface_ip_configuration_update(ip_configurations.Element)

        tags = cls._args_network_security_group_update.network_interfaces.Element.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        security_rules = cls._args_network_security_group_update.security_rules
        security_rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_network_security_group_update.security_rules.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkSecurityGroups/{}/securityRules/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
            nullable=True,
        )
        _element.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
        )
        _element.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.",
            nullable=True,
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
            nullable=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        _element.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
        )
        _element.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.",
            nullable=True,
        )

        subnets = cls._args_network_security_group_update.subnets
        subnets.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_subnet_update(subnets.Element)

        tags = cls._args_network_security_group_update.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.default_security_rules = cls._args_network_security_group_update.default_security_rules
        _schema.etag = cls._args_network_security_group_update.etag
        _schema.id = cls._args_network_security_group_update.id
        _schema.location = cls._args_network_security_group_update.location
        _schema.network_interfaces = cls._args_network_security_group_update.network_interfaces
        _schema.resource_guid = cls._args_network_security_group_update.resource_guid
        _schema.security_rules = cls._args_network_security_group_update.security_rules
        _schema.subnets = cls._args_network_security_group_update.subnets
        _schema.tags = cls._args_network_security_group_update.tags

    _args_public_ip_address_update = None

    @classmethod
    def _build_args_public_ip_address_update(cls, _schema):
        if cls._args_public_ip_address_update is not None:
            _schema.dns_settings = cls._args_public_ip_address_update.dns_settings
            _schema.etag = cls._args_public_ip_address_update.etag
            _schema.idle_timeout_in_minutes = cls._args_public_ip_address_update.idle_timeout_in_minutes
            _schema.ip_address = cls._args_public_ip_address_update.ip_address
            _schema.ip_configuration = cls._args_public_ip_address_update.ip_configuration
            _schema.location = cls._args_public_ip_address_update.location
            _schema.provisioning_state = cls._args_public_ip_address_update.provisioning_state
            _schema.public_ip_allocation_method = cls._args_public_ip_address_update.public_ip_allocation_method
            _schema.resource_guid = cls._args_public_ip_address_update.resource_guid
            _schema.tags = cls._args_public_ip_address_update.tags
            return

        cls._args_public_ip_address_update = AAZObjectArg(
            nullable=True,
        )

        public_ip_address_update = cls._args_public_ip_address_update
        public_ip_address_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        public_ip_address_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        public_ip_address_update.dns_settings = AAZObjectArg(
            options=["dns-settings"],
            help="The FQDN of the DNS record associated with the public IP address.",
            nullable=True,
        )
        public_ip_address_update.idle_timeout_in_minutes = AAZIntArg(
            options=["idle-timeout-in-minutes"],
            help="The idle timeout of the public IP address.",
            nullable=True,
        )
        public_ip_address_update.ip_address = AAZStrArg(
            options=["ip-address"],
            nullable=True,
        )
        public_ip_address_update.ip_configuration = AAZObjectArg(
            options=["ip-configuration"],
            help="IPConfiguration",
            nullable=True,
        )
        cls._build_args_ip_configuration_update(public_ip_address_update.ip_configuration)
        public_ip_address_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        public_ip_address_update.public_ip_allocation_method = AAZStrArg(
            options=["public-ip-allocation-method"],
            help="The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
            nullable=True,
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        public_ip_address_update.resource_guid = AAZStrArg(
            options=["resource-guid"],
            help="The resource GUID property of the public IP resource.",
            nullable=True,
        )
        public_ip_address_update.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        dns_settings = cls._args_public_ip_address_update.dns_settings
        dns_settings.domain_name_label = AAZStrArg(
            options=["domain-name-label"],
            help="Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.",
            nullable=True,
        )
        dns_settings.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.",
            nullable=True,
        )
        dns_settings.reverse_fqdn = AAZStrArg(
            options=["reverse-fqdn"],
            help="Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. ",
            nullable=True,
        )

        tags = cls._args_public_ip_address_update.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.dns_settings = cls._args_public_ip_address_update.dns_settings
        _schema.etag = cls._args_public_ip_address_update.etag
        _schema.idle_timeout_in_minutes = cls._args_public_ip_address_update.idle_timeout_in_minutes
        _schema.ip_address = cls._args_public_ip_address_update.ip_address
        _schema.ip_configuration = cls._args_public_ip_address_update.ip_configuration
        _schema.location = cls._args_public_ip_address_update.location
        _schema.provisioning_state = cls._args_public_ip_address_update.provisioning_state
        _schema.public_ip_allocation_method = cls._args_public_ip_address_update.public_ip_allocation_method
        _schema.resource_guid = cls._args_public_ip_address_update.resource_guid
        _schema.tags = cls._args_public_ip_address_update.tags

    _args_security_rule_update = None

    @classmethod
    def _build_args_security_rule_update(cls, _schema):
        if cls._args_security_rule_update is not None:
            _schema.access = cls._args_security_rule_update.access
            _schema.description = cls._args_security_rule_update.description
            _schema.destination_address_prefix = cls._args_security_rule_update.destination_address_prefix
            _schema.destination_port_range = cls._args_security_rule_update.destination_port_range
            _schema.direction = cls._args_security_rule_update.direction
            _schema.etag = cls._args_security_rule_update.etag
            _schema.name = cls._args_security_rule_update.name
            _schema.priority = cls._args_security_rule_update.priority
            _schema.protocol = cls._args_security_rule_update.protocol
            _schema.provisioning_state = cls._args_security_rule_update.provisioning_state
            _schema.source_address_prefix = cls._args_security_rule_update.source_address_prefix
            _schema.source_port_range = cls._args_security_rule_update.source_port_range
            return

        cls._args_security_rule_update = AAZObjectArg(
            nullable=True,
        )

        security_rule_update = cls._args_security_rule_update
        security_rule_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        security_rule_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        security_rule_update.access = AAZStrArg(
            options=["access"],
            help="The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        security_rule_update.description = AAZStrArg(
            options=["description"],
            help="A description for this rule. Restricted to 140 chars.",
            nullable=True,
        )
        security_rule_update.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="The destination address prefix. CIDR or destination IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
        )
        security_rule_update.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="The destination port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
            nullable=True,
        )
        security_rule_update.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'.",
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        security_rule_update.priority = AAZIntArg(
            options=["priority"],
            help="The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
            nullable=True,
        )
        security_rule_update.protocol = AAZStrArg(
            options=["protocol"],
            help="Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            enum={"*": "*", "Tcp": "Tcp", "Udp": "Udp"},
        )
        security_rule_update.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )
        security_rule_update.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
        )
        security_rule_update.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="The source port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports.",
            nullable=True,
        )

        _schema.access = cls._args_security_rule_update.access
        _schema.description = cls._args_security_rule_update.description
        _schema.destination_address_prefix = cls._args_security_rule_update.destination_address_prefix
        _schema.destination_port_range = cls._args_security_rule_update.destination_port_range
        _schema.direction = cls._args_security_rule_update.direction
        _schema.etag = cls._args_security_rule_update.etag
        _schema.name = cls._args_security_rule_update.name
        _schema.priority = cls._args_security_rule_update.priority
        _schema.protocol = cls._args_security_rule_update.protocol
        _schema.provisioning_state = cls._args_security_rule_update.provisioning_state
        _schema.source_address_prefix = cls._args_security_rule_update.source_address_prefix
        _schema.source_port_range = cls._args_security_rule_update.source_port_range

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg(
            nullable=True,
        )

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
        )

        _schema.id = cls._args_sub_resource_update.id

    _args_subnet_update = None

    @classmethod
    def _build_args_subnet_update(cls, _schema):
        if cls._args_subnet_update is not None:
            _schema.address_prefix = cls._args_subnet_update.address_prefix
            _schema.etag = cls._args_subnet_update.etag
            _schema.ip_configurations = cls._args_subnet_update.ip_configurations
            _schema.name = cls._args_subnet_update.name
            _schema.network_security_group = cls._args_subnet_update.network_security_group
            _schema.route_table = cls._args_subnet_update.route_table
            return

        cls._args_subnet_update = AAZObjectArg(
            nullable=True,
        )

        subnet_update = cls._args_subnet_update
        subnet_update.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        subnet_update.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        subnet_update.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The address prefix for the subnet.",
            nullable=True,
        )
        subnet_update.ip_configurations = AAZListArg(
            options=["ip-configurations"],
            help="Gets an array of references to the network interface IP configurations using subnet.",
            nullable=True,
        )
        subnet_update.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference of the NetworkSecurityGroup resource.",
            nullable=True,
        )
        cls._build_args_network_security_group_update(subnet_update.network_security_group)
        subnet_update.route_table = AAZObjectArg(
            options=["route-table"],
            help="The reference of the RouteTable resource.",
            nullable=True,
        )

        ip_configurations = cls._args_subnet_update.ip_configurations
        ip_configurations.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_ip_configuration_update(ip_configurations.Element)

        route_table = cls._args_subnet_update.route_table
        route_table.etag = AAZStrArg(
            options=["etag"],
            help="Gets a unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        route_table.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}",
            ),
        )
        route_table.location = AAZResourceLocationArg(
            options=["l", "location"],
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        route_table.routes = AAZListArg(
            options=["routes"],
            help="Collection of routes contained within a route table.",
            nullable=True,
        )
        route_table.subnets = AAZListArg(
            options=["subnets"],
            help="A collection of references to subnets.",
            nullable=True,
        )
        route_table.tags = AAZDictArg(
            options=["tags"],
            help="Resource tags.",
            nullable=True,
        )

        routes = cls._args_subnet_update.route_table.routes
        routes.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_subnet_update.route_table.routes.Element
        _element.etag = AAZStrArg(
            options=["etag"],
            help="A unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _element.id = AAZResourceIdArg(
            options=["id"],
            help="Resource Identifier.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeTables/{}/routes/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        _element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The destination CIDR to which the route applies.",
            nullable=True,
        )
        _element.next_hop_ip_address = AAZStrArg(
            options=["next-hop-ip-address"],
            help="The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.",
            nullable=True,
        )
        _element.next_hop_type = AAZStrArg(
            options=["next-hop-type"],
            help="The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'",
            enum={"Internet": "Internet", "None": "None", "VirtualAppliance": "VirtualAppliance", "VirtualNetworkGateway": "VirtualNetworkGateway", "VnetLocal": "VnetLocal"},
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
            nullable=True,
        )

        subnets = cls._args_subnet_update.route_table.subnets
        subnets.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_subnet_update(subnets.Element)

        tags = cls._args_subnet_update.route_table.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.address_prefix = cls._args_subnet_update.address_prefix
        _schema.etag = cls._args_subnet_update.etag
        _schema.ip_configurations = cls._args_subnet_update.ip_configurations
        _schema.name = cls._args_subnet_update.name
        _schema.network_security_group = cls._args_subnet_update.network_security_group
        _schema.route_table = cls._args_subnet_update.route_table

    def _execute_operations(self):
        self.pre_operations()
        self.SubnetsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.SubnetsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SubnetsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subnetName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_subnet_read(cls._schema_on_200)

            return cls._schema_on_200

    class SubnetsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subnetName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_subnet_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("addressPrefix", AAZStrType, ".address_prefix")
                properties.set_prop("networkSecurityGroup", AAZObjectType)
                properties.set_prop("routeTable", AAZObjectType)

            network_security_group = _builder.get(".properties.networkSecurityGroup")
            if network_security_group is not None:
                network_security_group.set_prop("id", AAZStrType, ".network_security_group")
                network_security_group.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            route_table = _builder.get(".properties.routeTable")
            if route_table is not None:
                route_table.set_prop("id", AAZStrType, ".route_table")
                route_table.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


@register_command(
    "network vnet subnet wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualnetworks/{}/subnets/{}", "2015-06-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The subnet name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.vnet_name = AAZStrArg(
            options=["--vnet-name"],
            help="The virtual network (VNet) name.",
            required=True,
            id_part="name",
        )
        _args_schema.expand = AAZStrArg(
            options=["--expand"],
            help="Expands referenced resources. Default value is None.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SubnetsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class SubnetsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subnetName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualNetworkName", self.ctx.args.vnet_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$expand", self.ctx.args.expand,
                ),
                **self.serialize_query_param(
                    "api-version", "2015-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _WaitHelper._build_schema_subnet_read(cls._schema_on_200)

            return cls._schema_on_200


@link_helper(
    __package__,
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
)
class _CreateHelper:
    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None


    @classmethod
    def _build_schema_ip_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
            properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
            cls._build_schema_public_ip_address_create(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))
            cls._build_schema_subnet_create(properties.set_prop("subnet", AAZObjectType, ".subnet"))

    @classmethod
    def _build_schema_network_interface_ip_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("loadBalancerBackendAddressPools", AAZListType, ".load_balancer_backend_address_pools")
            properties.set_prop("loadBalancerInboundNatRules", AAZListType, ".load_balancer_inbound_nat_rules")
            properties.set_prop("primary", AAZBoolType, ".primary")
            properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
            properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            cls._build_schema_public_ip_address_create(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))
            cls._build_schema_subnet_create(properties.set_prop("subnet", AAZObjectType, ".subnet"))

        load_balancer_backend_address_pools = _builder.get(".properties.loadBalancerBackendAddressPools")
        if load_balancer_backend_address_pools is not None:
            load_balancer_backend_address_pools.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.loadBalancerBackendAddressPools[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_backend_address_pools.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_backend_address_pools.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_backend_address_pools.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.loadBalancerBackendAddressPools[].properties")
        if properties is not None:
            properties.set_prop("backendIPConfigurations", AAZListType, "@NetworkInterfaceIPConfiguration_create.load_balancer_backend_address_pools.[].backend_ip_configurations")
            cls._build_schema_sub_resource_create(properties.set_prop("outboundNatRule", AAZObjectType, "@NetworkInterfaceIPConfiguration_create.load_balancer_backend_address_pools.[].outbound_nat_rule"))
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_backend_address_pools.[].provisioning_state")

        backend_ip_configurations = _builder.get(".properties.loadBalancerBackendAddressPools[].properties.backendIPConfigurations")
        if backend_ip_configurations is not None:
            cls._build_schema_network_interface_ip_configuration_create(backend_ip_configurations.set_elements(AAZObjectType, "."))

        load_balancer_inbound_nat_rules = _builder.get(".properties.loadBalancerInboundNatRules")
        if load_balancer_inbound_nat_rules is not None:
            load_balancer_inbound_nat_rules.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.loadBalancerInboundNatRules[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.loadBalancerInboundNatRules[].properties")
        if properties is not None:
            cls._build_schema_network_interface_ip_configuration_create(properties.set_prop("backendIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].backend_ip_configuration"))
            properties.set_prop("backendPort", AAZIntType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].backend_port")
            properties.set_prop("enableFloatingIP", AAZBoolType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].enable_floating_ip")
            cls._build_schema_sub_resource_create(properties.set_prop("frontendIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].frontend_ip_configuration"))
            properties.set_prop("frontendPort", AAZIntType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].frontend_port")
            properties.set_prop("idleTimeoutInMinutes", AAZIntType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].idle_timeout_in_minutes")
            properties.set_prop("protocol", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].protocol")
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_create.load_balancer_inbound_nat_rules.[].provisioning_state")

    @classmethod
    def _build_schema_network_security_group_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("defaultSecurityRules", AAZListType, ".default_security_rules")
            properties.set_prop("networkInterfaces", AAZListType, ".network_interfaces")
            properties.set_prop("resourceGuid", AAZStrType, ".resource_guid")
            properties.set_prop("securityRules", AAZListType, ".security_rules")
            properties.set_prop("subnets", AAZListType, ".subnets")

        default_security_rules = _builder.get(".properties.defaultSecurityRules")
        if default_security_rules is not None:
            cls._build_schema_security_rule_create(default_security_rules.set_elements(AAZObjectType, "."))

        network_interfaces = _builder.get(".properties.networkInterfaces")
        if network_interfaces is not None:
            network_interfaces.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.networkInterfaces[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkSecurityGroup_create.network_interfaces.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkSecurityGroup_create.network_interfaces.[].id")
            _elements.set_prop("location", AAZStrType, "@NetworkSecurityGroup_create.network_interfaces.[].location")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _elements.set_prop("tags", AAZDictType, "@NetworkSecurityGroup_create.network_interfaces.[].tags")

        properties = _builder.get(".properties.networkInterfaces[].properties")
        if properties is not None:
            properties.set_prop("dnsSettings", AAZObjectType, "@NetworkSecurityGroup_create.network_interfaces.[].dns_settings")
            properties.set_prop("enableIPForwarding", AAZBoolType, "@NetworkSecurityGroup_create.network_interfaces.[].enable_ip_forwarding")
            properties.set_prop("ipConfigurations", AAZListType, "@NetworkSecurityGroup_create.network_interfaces.[].ip_configurations")
            properties.set_prop("macAddress", AAZStrType, "@NetworkSecurityGroup_create.network_interfaces.[].mac_address")
            cls._build_schema_network_security_group_create(properties.set_prop("networkSecurityGroup", AAZObjectType, "@NetworkSecurityGroup_create.network_interfaces.[].network_security_group"))
            properties.set_prop("primary", AAZBoolType, "@NetworkSecurityGroup_create.network_interfaces.[].primary")
            properties.set_prop("provisioningState", AAZStrType, "@NetworkSecurityGroup_create.network_interfaces.[].provisioning_state")
            properties.set_prop("resourceGuid", AAZStrType, "@NetworkSecurityGroup_create.network_interfaces.[].resource_guid")
            cls._build_schema_sub_resource_create(properties.set_prop("virtualMachine", AAZObjectType, "@NetworkSecurityGroup_create.network_interfaces.[].virtual_machine"))

        dns_settings = _builder.get(".properties.networkInterfaces[].properties.dnsSettings")
        if dns_settings is not None:
            dns_settings.set_prop("appliedDnsServers", AAZListType, ".applied_dns_servers")
            dns_settings.set_prop("dnsServers", AAZListType, ".dns_servers")
            dns_settings.set_prop("internalDnsNameLabel", AAZStrType, ".internal_dns_name_label")
            dns_settings.set_prop("internalFqdn", AAZStrType, ".internal_fqdn")

        applied_dns_servers = _builder.get(".properties.networkInterfaces[].properties.dnsSettings.appliedDnsServers")
        if applied_dns_servers is not None:
            applied_dns_servers.set_elements(AAZStrType, ".")

        dns_servers = _builder.get(".properties.networkInterfaces[].properties.dnsSettings.dnsServers")
        if dns_servers is not None:
            dns_servers.set_elements(AAZStrType, ".")

        ip_configurations = _builder.get(".properties.networkInterfaces[].properties.ipConfigurations")
        if ip_configurations is not None:
            cls._build_schema_network_interface_ip_configuration_create(ip_configurations.set_elements(AAZObjectType, "."))

        tags = _builder.get(".properties.networkInterfaces[].tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

        security_rules = _builder.get(".properties.securityRules")
        if security_rules is not None:
            cls._build_schema_security_rule_create(security_rules.set_elements(AAZObjectType, "."))

        subnets = _builder.get(".properties.subnets")
        if subnets is not None:
            cls._build_schema_subnet_create(subnets.set_elements(AAZObjectType, "."))

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_public_ip_address_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("dnsSettings", AAZObjectType, ".dns_settings")
            properties.set_prop("idleTimeoutInMinutes", AAZIntType, ".idle_timeout_in_minutes")
            properties.set_prop("ipAddress", AAZStrType, ".ip_address")
            cls._build_schema_ip_configuration_create(properties.set_prop("ipConfiguration", AAZObjectType, ".ip_configuration"))
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("publicIPAllocationMethod", AAZStrType, ".public_ip_allocation_method")
            properties.set_prop("resourceGuid", AAZStrType, ".resource_guid")

        dns_settings = _builder.get(".properties.dnsSettings")
        if dns_settings is not None:
            dns_settings.set_prop("domainNameLabel", AAZStrType, ".domain_name_label")
            dns_settings.set_prop("fqdn", AAZStrType, ".fqdn")
            dns_settings.set_prop("reverseFqdn", AAZStrType, ".reverse_fqdn")

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_security_rule_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("access", AAZStrType, ".access", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("description", AAZStrType, ".description")
            properties.set_prop("destinationAddressPrefix", AAZStrType, ".destination_address_prefix", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("destinationPortRange", AAZStrType, ".destination_port_range")
            properties.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("priority", AAZIntType, ".priority")
            properties.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("sourceAddressPrefix", AAZStrType, ".source_address_prefix", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("sourcePortRange", AAZStrType, ".source_port_range")

    @classmethod
    def _build_schema_sub_resource_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    @classmethod
    def _build_schema_subnet_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, ".address_prefix")
            properties.set_prop("ipConfigurations", AAZListType, ".ip_configurations")
            cls._build_schema_network_security_group_create(properties.set_prop("networkSecurityGroup", AAZObjectType, ".network_security_group"))
            properties.set_prop("routeTable", AAZObjectType, ".route_table")

        ip_configurations = _builder.get(".properties.ipConfigurations")
        if ip_configurations is not None:
            cls._build_schema_ip_configuration_create(ip_configurations.set_elements(AAZObjectType, "."))

        route_table = _builder.get(".properties.routeTable")
        if route_table is not None:
            route_table.set_prop("etag", AAZStrType, ".etag")
            route_table.set_prop("id", AAZStrType, ".id")
            route_table.set_prop("location", AAZStrType, ".location")
            route_table.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            route_table.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties.routeTable.properties")
        if properties is not None:
            properties.set_prop("routes", AAZListType, ".routes")
            properties.set_prop("subnets", AAZListType, ".subnets")

        routes = _builder.get(".properties.routeTable.properties.routes")
        if routes is not None:
            routes.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.routeTable.properties.routes[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@Subnet_create.route_table.routes.[].etag")
            _elements.set_prop("id", AAZStrType, "@Subnet_create.route_table.routes.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_create.route_table.routes.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.routeTable.properties.routes[].properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, "@Subnet_create.route_table.routes.[].address_prefix")
            properties.set_prop("nextHopIpAddress", AAZStrType, "@Subnet_create.route_table.routes.[].next_hop_ip_address")
            properties.set_prop("nextHopType", AAZStrType, "@Subnet_create.route_table.routes.[].next_hop_type", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, "@Subnet_create.route_table.routes.[].provisioning_state")

        subnets = _builder.get(".properties.routeTable.properties.subnets")
        if subnets is not None:
            cls._build_schema_subnet_create(subnets.set_elements(AAZObjectType, "."))

        tags = _builder.get(".properties.routeTable.tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")


@link_helper(
    __package__,
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
)
class _ListHelper:
    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None



@link_helper(
    __package__,
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
)
class _ShowHelper:
    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None



@link_helper(
    __package__,
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
)
class _UpdateHelper:
    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None


    @classmethod
    def _build_schema_ip_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
            properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
            cls._build_schema_public_ip_address_update(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))
            cls._build_schema_subnet_update(properties.set_prop("subnet", AAZObjectType, ".subnet"))

    @classmethod
    def _build_schema_network_interface_ip_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("loadBalancerBackendAddressPools", AAZListType, ".load_balancer_backend_address_pools")
            properties.set_prop("loadBalancerInboundNatRules", AAZListType, ".load_balancer_inbound_nat_rules")
            properties.set_prop("primary", AAZBoolType, ".primary")
            properties.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
            properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            cls._build_schema_public_ip_address_update(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))
            cls._build_schema_subnet_update(properties.set_prop("subnet", AAZObjectType, ".subnet"))

        load_balancer_backend_address_pools = _builder.get(".properties.loadBalancerBackendAddressPools")
        if load_balancer_backend_address_pools is not None:
            load_balancer_backend_address_pools.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.loadBalancerBackendAddressPools[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.loadBalancerBackendAddressPools[].properties")
        if properties is not None:
            properties.set_prop("backendIPConfigurations", AAZListType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].backend_ip_configurations")
            cls._build_schema_sub_resource_update(properties.set_prop("outboundNatRule", AAZObjectType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].outbound_nat_rule"))
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_backend_address_pools.[].provisioning_state")

        backend_ip_configurations = _builder.get(".properties.loadBalancerBackendAddressPools[].properties.backendIPConfigurations")
        if backend_ip_configurations is not None:
            cls._build_schema_network_interface_ip_configuration_update(backend_ip_configurations.set_elements(AAZObjectType, "."))

        load_balancer_inbound_nat_rules = _builder.get(".properties.loadBalancerInboundNatRules")
        if load_balancer_inbound_nat_rules is not None:
            load_balancer_inbound_nat_rules.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.loadBalancerInboundNatRules[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.loadBalancerInboundNatRules[].properties")
        if properties is not None:
            cls._build_schema_network_interface_ip_configuration_update(properties.set_prop("backendIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].backend_ip_configuration"))
            properties.set_prop("backendPort", AAZIntType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].backend_port")
            properties.set_prop("enableFloatingIP", AAZBoolType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].enable_floating_ip")
            cls._build_schema_sub_resource_update(properties.set_prop("frontendIPConfiguration", AAZObjectType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].frontend_ip_configuration"))
            properties.set_prop("frontendPort", AAZIntType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].frontend_port")
            properties.set_prop("idleTimeoutInMinutes", AAZIntType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].idle_timeout_in_minutes")
            properties.set_prop("protocol", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].protocol")
            properties.set_prop("provisioningState", AAZStrType, "@NetworkInterfaceIPConfiguration_update.load_balancer_inbound_nat_rules.[].provisioning_state")

    @classmethod
    def _build_schema_network_security_group_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("defaultSecurityRules", AAZListType, ".default_security_rules")
            properties.set_prop("networkInterfaces", AAZListType, ".network_interfaces")
            properties.set_prop("resourceGuid", AAZStrType, ".resource_guid")
            properties.set_prop("securityRules", AAZListType, ".security_rules")
            properties.set_prop("subnets", AAZListType, ".subnets")

        default_security_rules = _builder.get(".properties.defaultSecurityRules")
        if default_security_rules is not None:
            cls._build_schema_security_rule_update(default_security_rules.set_elements(AAZObjectType, "."))

        network_interfaces = _builder.get(".properties.networkInterfaces")
        if network_interfaces is not None:
            network_interfaces.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.networkInterfaces[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkSecurityGroup_update.network_interfaces.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkSecurityGroup_update.network_interfaces.[].id")
            _elements.set_prop("location", AAZStrType, "@NetworkSecurityGroup_update.network_interfaces.[].location")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _elements.set_prop("tags", AAZDictType, "@NetworkSecurityGroup_update.network_interfaces.[].tags")

        properties = _builder.get(".properties.networkInterfaces[].properties")
        if properties is not None:
            properties.set_prop("dnsSettings", AAZObjectType, "@NetworkSecurityGroup_update.network_interfaces.[].dns_settings")
            properties.set_prop("enableIPForwarding", AAZBoolType, "@NetworkSecurityGroup_update.network_interfaces.[].enable_ip_forwarding")
            properties.set_prop("ipConfigurations", AAZListType, "@NetworkSecurityGroup_update.network_interfaces.[].ip_configurations")
            properties.set_prop("macAddress", AAZStrType, "@NetworkSecurityGroup_update.network_interfaces.[].mac_address")
            cls._build_schema_network_security_group_update(properties.set_prop("networkSecurityGroup", AAZObjectType, "@NetworkSecurityGroup_update.network_interfaces.[].network_security_group"))
            properties.set_prop("primary", AAZBoolType, "@NetworkSecurityGroup_update.network_interfaces.[].primary")
            properties.set_prop("provisioningState", AAZStrType, "@NetworkSecurityGroup_update.network_interfaces.[].provisioning_state")
            properties.set_prop("resourceGuid", AAZStrType, "@NetworkSecurityGroup_update.network_interfaces.[].resource_guid")
            cls._build_schema_sub_resource_update(properties.set_prop("virtualMachine", AAZObjectType, "@NetworkSecurityGroup_update.network_interfaces.[].virtual_machine"))

        dns_settings = _builder.get(".properties.networkInterfaces[].properties.dnsSettings")
        if dns_settings is not None:
            dns_settings.set_prop("appliedDnsServers", AAZListType, ".applied_dns_servers")
            dns_settings.set_prop("dnsServers", AAZListType, ".dns_servers")
            dns_settings.set_prop("internalDnsNameLabel", AAZStrType, ".internal_dns_name_label")
            dns_settings.set_prop("internalFqdn", AAZStrType, ".internal_fqdn")

        applied_dns_servers = _builder.get(".properties.networkInterfaces[].properties.dnsSettings.appliedDnsServers")
        if applied_dns_servers is not None:
            applied_dns_servers.set_elements(AAZStrType, ".")

        dns_servers = _builder.get(".properties.networkInterfaces[].properties.dnsSettings.dnsServers")
        if dns_servers is not None:
            dns_servers.set_elements(AAZStrType, ".")

        ip_configurations = _builder.get(".properties.networkInterfaces[].properties.ipConfigurations")
        if ip_configurations is not None:
            cls._build_schema_network_interface_ip_configuration_update(ip_configurations.set_elements(AAZObjectType, "."))

        tags = _builder.get(".properties.networkInterfaces[].tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

        security_rules = _builder.get(".properties.securityRules")
        if security_rules is not None:
            security_rules.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.securityRules[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].etag")
            _elements.set_prop("id", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].id")
            _elements.set_prop("name", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.securityRules[].properties")
        if properties is not None:
            properties.set_prop("access", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].access", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("description", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].description")
            properties.set_prop("destinationAddressPrefix", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].destination_address_prefix", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("destinationPortRange", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].destination_port_range")
            properties.set_prop("direction", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].direction", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("priority", AAZIntType, "@NetworkSecurityGroup_update.security_rules.[].priority")
            properties.set_prop("protocol", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].protocol", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].provisioning_state")
            properties.set_prop("sourceAddressPrefix", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].source_address_prefix", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("sourcePortRange", AAZStrType, "@NetworkSecurityGroup_update.security_rules.[].source_port_range")

        subnets = _builder.get(".properties.subnets")
        if subnets is not None:
            cls._build_schema_subnet_update(subnets.set_elements(AAZObjectType, "."))

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_public_ip_address_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("location", AAZStrType, ".location")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("dnsSettings", AAZObjectType, ".dns_settings")
            properties.set_prop("idleTimeoutInMinutes", AAZIntType, ".idle_timeout_in_minutes")
            properties.set_prop("ipAddress", AAZStrType, ".ip_address")
            cls._build_schema_ip_configuration_update(properties.set_prop("ipConfiguration", AAZObjectType, ".ip_configuration"))
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("publicIPAllocationMethod", AAZStrType, ".public_ip_allocation_method")
            properties.set_prop("resourceGuid", AAZStrType, ".resource_guid")

        dns_settings = _builder.get(".properties.dnsSettings")
        if dns_settings is not None:
            dns_settings.set_prop("domainNameLabel", AAZStrType, ".domain_name_label")
            dns_settings.set_prop("fqdn", AAZStrType, ".fqdn")
            dns_settings.set_prop("reverseFqdn", AAZStrType, ".reverse_fqdn")

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_security_rule_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("access", AAZStrType, ".access", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("description", AAZStrType, ".description")
            properties.set_prop("destinationAddressPrefix", AAZStrType, ".destination_address_prefix", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("destinationPortRange", AAZStrType, ".destination_port_range")
            properties.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("priority", AAZIntType, ".priority")
            properties.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            properties.set_prop("sourceAddressPrefix", AAZStrType, ".source_address_prefix", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("sourcePortRange", AAZStrType, ".source_port_range")

    @classmethod
    def _build_schema_sub_resource_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    @classmethod
    def _build_schema_subnet_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("etag", AAZStrType, ".etag")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, ".address_prefix")
            properties.set_prop("ipConfigurations", AAZListType, ".ip_configurations")
            cls._build_schema_network_security_group_update(properties.set_prop("networkSecurityGroup", AAZObjectType, ".network_security_group"))
            properties.set_prop("routeTable", AAZObjectType, ".route_table")

        ip_configurations = _builder.get(".properties.ipConfigurations")
        if ip_configurations is not None:
            cls._build_schema_ip_configuration_update(ip_configurations.set_elements(AAZObjectType, "."))

        route_table = _builder.get(".properties.routeTable")
        if route_table is not None:
            route_table.set_prop("etag", AAZStrType, ".etag")
            route_table.set_prop("id", AAZStrType, ".id")
            route_table.set_prop("location", AAZStrType, ".location")
            route_table.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            route_table.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties.routeTable.properties")
        if properties is not None:
            properties.set_prop("routes", AAZListType, ".routes")
            properties.set_prop("subnets", AAZListType, ".subnets")

        routes = _builder.get(".properties.routeTable.properties.routes")
        if routes is not None:
            routes.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.routeTable.properties.routes[]")
        if _elements is not None:
            _elements.set_prop("etag", AAZStrType, "@Subnet_update.route_table.routes.[].etag")
            _elements.set_prop("id", AAZStrType, "@Subnet_update.route_table.routes.[].id")
            _elements.set_prop("name", AAZStrType, "@Subnet_update.route_table.routes.[].name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.routeTable.properties.routes[].properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, "@Subnet_update.route_table.routes.[].address_prefix")
            properties.set_prop("nextHopIpAddress", AAZStrType, "@Subnet_update.route_table.routes.[].next_hop_ip_address")
            properties.set_prop("nextHopType", AAZStrType, "@Subnet_update.route_table.routes.[].next_hop_type", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("provisioningState", AAZStrType, "@Subnet_update.route_table.routes.[].provisioning_state")

        subnets = _builder.get(".properties.routeTable.properties.subnets")
        if subnets is not None:
            cls._build_schema_subnet_update(subnets.set_elements(AAZObjectType, "."))

        tags = _builder.get(".properties.routeTable.tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")


@link_helper(
    __package__,
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
)
class _WaitHelper:
    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_security_group_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None



__all__ = ["Create","Delete","List","Show","Update","Wait","__CMDGroup"]
