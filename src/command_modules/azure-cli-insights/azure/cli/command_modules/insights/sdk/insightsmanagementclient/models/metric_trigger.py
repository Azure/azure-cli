# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MetricTrigger(Model):
    """
    The trigger that results in a scaling action.

    :param metric_name: Gets or sets the name of the metric that defines what
     the rule monitors.
    :type metric_name: str
    :param metric_resource_uri: Gets or sets the resource identifier of the
     resource the rule monitors.
    :type metric_resource_uri: str
    :param time_grain: Gets or sets the granularity of metrics the rule
     monitors. Must be one of the predefined values returned from metric
     definitions for the metric. Must be between 12 hours and 1 minute.
    :type time_grain: :class:`TimeSpan <insights.models.TimeSpan>`
    :param statistic: Gets or sets the metric statistic type.How the metrics
     from multiple instances are combined. Possible values include:
     'Average', 'Min', 'Max', 'Sum'
    :type statistic: str or :class:`MetricStatisticType
     <insightsmanagementclient.models.MetricStatisticType>`
    :param time_window: Gets or sets the range of time in which instance data
     is collected. This value must be greater than the delay in metric
     collection, which can vary from resource-to-resource. Must be between 12
     hours and 5 minutes.
    :type time_window: :class:`TimeSpan <insights.models.TimeSpan>`
    :param time_aggregation: Gets or sets time aggregation type.How the data
     that is collected should be combined over time. The default value is
     Average. Possible values include: 'Average', 'Minimum', 'Maximum',
     'Total', 'Count'
    :type time_aggregation: str or :class:`TimeAggregationType
     <insightsmanagementclient.models.TimeAggregationType>`
    :param operator: Gets or sets the operator that is used to compare the
     metric data and the threshold. Possible values include: 'Equals',
     'NotEquals', 'GreaterThan', 'GreaterThanOrEqual', 'LessThan',
     'LessThanOrEqual'
    :type operator: str or :class:`ComparisonOperationType
     <insightsmanagementclient.models.ComparisonOperationType>`
    :param threshold: Gets or sets the threshold of the metric that triggers
     the scale action.
    :type threshold: float
    """ 

    _attribute_map = {
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'metric_resource_uri': {'key': 'metricResourceUri', 'type': 'str'},
        'time_grain': {'key': 'timeGrain', 'type': 'TimeSpan'},
        'statistic': {'key': 'statistic', 'type': 'MetricStatisticType'},
        'time_window': {'key': 'timeWindow', 'type': 'TimeSpan'},
        'time_aggregation': {'key': 'timeAggregation', 'type': 'TimeAggregationType'},
        'operator': {'key': 'operator', 'type': 'ComparisonOperationType'},
        'threshold': {'key': 'threshold', 'type': 'float'},
    }

    def __init__(self, metric_name=None, metric_resource_uri=None, time_grain=None, statistic=None, time_window=None, time_aggregation=None, operator=None, threshold=None):
        self.metric_name = metric_name
        self.metric_resource_uri = metric_resource_uri
        self.time_grain = time_grain
        self.statistic = statistic
        self.time_window = time_window
        self.time_aggregation = time_aggregation
        self.operator = operator
        self.threshold = threshold
