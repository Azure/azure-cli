# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "apic api definition import-specification",
)
class ImportSpecification(AAZCommand):
    """Import the API specification.

    :example: Import API specification
        az apic api version definition import-specification -g api-center-test -s contoso --api-name echo-api --version 2023-01-01 --name "openapi" --format "url" --value "https://..."
    """

    _aaz_info = {
        "version": "2023-07-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.apicenter/services/{}/workspaces/{}/apis/{}/versions/{}/definitions/{}/importspecification", "2023-07-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.api_name = AAZStrArg(
            options=["--api", "--api-name"],
            help="The name of the API.",
            required=True,
            id_part="child_name_2",
            fmt=AAZStrArgFormat(
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.definition_name = AAZStrArg(
            options=["--name", "--definition", "--definition-name"],
            help="The name of the API definition.",
            required=True,
            id_part="child_name_4",
            fmt=AAZStrArgFormat(
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group",
            required=True,
        )
        _args_schema.service_name = AAZStrArg(
            options=["-s", "--service", "--service-name"],
            help="The name of the API Center service.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.version_name = AAZStrArg(
            options=["--version", "--version-name"],
            help="The name of the API version.",
            required=True,
            id_part="child_name_3",
            fmt=AAZStrArgFormat(
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            id_part="child_name_1",
            default="default",
            fmt=AAZStrArgFormat(
                max_length=90,
                min_length=1,
            ),
        )

        # define Arg Group "Payload"

        _args_schema = cls._args_schema
        _args_schema.format = AAZStrArg(
            options=["--format"],
            arg_group="Payload",
            help="Format of the API specification source.",
            enum={"inline": "inline", "link": "link"},
        )
        _args_schema.specification = AAZObjectArg(
            options=["--specification"],
            arg_group="Payload",
            help="API specification details.",
        )
        _args_schema.value = AAZStrArg(
            options=["--value"],
            arg_group="Payload",
            help="Value of the API specification source.",
        )

        specification = cls._args_schema.specification
        specification.name = AAZStrArg(
            options=["name"],
            help="Specification name.",
        )
        specification.version = AAZStrArg(
            options=["version"],
            help="Specification version.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApiDefinitionsImportSpecification(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class ApiDefinitionsImportSpecification(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)
            if session.http_response.status_code in [202]:
                return self.on_202(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apis/{apiName}/versions/{versionName}/definitions/{definitionName}/importSpecification",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "apiName", self.ctx.args.api_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "definitionName", self.ctx.args.definition_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serviceName", self.ctx.args.service_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "versionName", self.ctx.args.version_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-07-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("format", AAZStrType, ".format")
            _builder.set_prop("specification", AAZObjectType, ".specification")
            _builder.set_prop("value", AAZStrType, ".value")

            specification = _builder.get(".specification")
            if specification is not None:
                specification.set_prop("name", AAZStrType, ".name")
                specification.set_prop("version", AAZStrType, ".version")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            pass

        def on_202(self, session):
            pass


class _ImportSpecificationHelper:
    """Helper class for ImportSpecification"""


__all__ = ["ImportSpecification"]
