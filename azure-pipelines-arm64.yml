resources:
- repo: self

trigger:
  batch: true
  branches:
    include:
    - '*'

jobs:
- job: ExtractMetadata
  displayName: Extract Metadata

  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Bash@3
    displayName: 'Extract Version'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/get_version.sh


  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: metadata'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: metadata

- job: BuildRpmPackageMarinerArm64
  displayName: Build Rpm Package Mariner ARM64
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual', 'Schedule'))
  pool:
    name: 'ubuntu-arm64-2004-pool'
    vmImage: 'ubuntu-20.04'
  variables:
    # Disable Component Detection on ARM64
    skipComponentGovernanceDetection: true
  strategy:
    matrix:
      2.0:
        image: mcr.microsoft.com/cbl-mariner/base/core:2.0
        artifact: rpm-mariner2.0
  steps:
  - bash: |
      # https://docs.docker.com/engine/security/rootless/
      /bin/bash -c "$(curl -fsSL https://get.docker.com)"
      sudo apt-get install -y uidmap
      dockerd-rootless-setuptool.sh install
      export XDG_RUNTIME_DIR=/home/cloudtest/.docker/run
      PATH=/usr/bin:/sbin:/usr/sbin:$PATH dockerd-rootless.sh &
      sleep 5
      docker context use rootless
    displayName: Install Docker
  - task: Bash@3
    displayName: 'Build Rpm Package: Mariner'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/rpm/pipeline_mariner.sh

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'SBOM'
    inputs:
      BuildDropPath: $(Build.ArtifactStagingDirectory)

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: rpm-mariner'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: $(artifact)

# TODO: rpmbuild on Red Hat UBI 8 is slow for unknown reason. Still working with Red Hat to investigate.
- job: BuildRpmPackagesArm64
  displayName: Build Rpm Packages ARM64
  # Do not run this job for Pull Requests due to the slowness
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual', 'Schedule'))
  pool:
    name: 'ubuntu-arm64-2004-pool'
    vmImage: 'ubuntu-20.04'
  variables:
    skipComponentGovernanceDetection: true
  strategy:
    matrix:
      Red Hat Universal Base Image 8:
        dockerfile: ubi
        image: registry.access.redhat.com/ubi8/ubi:8.4
        artifact: rpm-ubi8
        python_package: python39
      Red Hat Universal Base Image 9:
        dockerfile: ubi
        image: registry.access.redhat.com/ubi9/ubi:9.0.0
        artifact: rpm-ubi9
        python_package: python3.9
      Fedora 35:
        dockerfile: fedora
        image: fedora:35
        artifact: rpm-fedora35
        python_package: python3
      Fedora 36:
        dockerfile: fedora
        image: fedora:36
        artifact: rpm-fedora36
        python_package: python3
  steps:
  - bash: |
      # https://docs.docker.com/engine/security/rootless/
      /bin/bash -c "$(curl -fsSL https://get.docker.com)"
      sudo apt-get install -y uidmap
      dockerd-rootless-setuptool.sh install
      export XDG_RUNTIME_DIR=/home/cloudtest/.docker/run
      PATH=/usr/bin:/sbin:/usr/sbin:$PATH dockerd-rootless.sh &
      sleep 5
      docker context use rootless
    displayName: Install Docker
  - task: Bash@3
    displayName: 'Build Rpm Package'
    inputs:
      targetType: 'filePath'
      filePath: scripts/release/rpm/pipeline.sh
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'SBOM'
    inputs:
      BuildDropPath: $(Build.ArtifactStagingDirectory)
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: rpm'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: $(artifact)


- job: TestRpmPackageArm64
  displayName: Test Rpm Package ARM64
  timeoutInMinutes: 120
  dependsOn:
  - BuildRpmPackagesArm64
  - ExtractMetadata
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual', 'Schedule'))
  pool:
    name: 'ubuntu-arm64-2004-pool'
    vmImage: 'ubuntu-20.04'
  variables:
    skipComponentGovernanceDetection: true
  strategy:
    matrix:
      Red Hat Universal Base Image 8:
        artifact: rpm-ubi8
        distro: el8
        image: registry.access.redhat.com/ubi8/ubi:8.4
        python_package: python39
        python_cmd: python3.9
        pip_cmd: pip3.9
      Red Hat Universal Base Image 9:
        artifact: rpm-ubi9
        distro: el9
        image: registry.access.redhat.com/ubi9/ubi:9.0.0
        python_package: python3.9
        python_cmd: python3.9
        pip_cmd: pip3.9
      Fedora 35:
        artifact: rpm-fedora35
        distro: fc35
        image: fedora:35
        python_package: python3
        python_cmd: python3
        pip_cmd: pip3
      Fedora 36:
        artifact: rpm-fedora36
        distro: fc36
        image: fedora:36
        python_package: python3
        python_cmd: python3
        pip_cmd: pip3
  steps:
  - task: DownloadPipelineArtifact@1
    displayName: 'Download Metadata'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
      artifactName: metadata

  - task: DownloadPipelineArtifact@1
    displayName: 'Download Build Artifacts'
    inputs:
      TargetPath: '$(Build.ArtifactStagingDirectory)/rpm'
      artifactName: $(artifact)

  - bash: |
      # https://docs.docker.com/engine/security/rootless/
      /bin/bash -c "$(curl -fsSL https://get.docker.com)"
      sudo apt-get install -y uidmap
      dockerd-rootless-setuptool.sh install
      export XDG_RUNTIME_DIR=/home/cloudtest/.docker/run
      PATH=/usr/bin:/sbin:/usr/sbin:$PATH dockerd-rootless.sh &
      sleep 5
      docker context use rootless
    displayName: Install Docker

  - bash: |
      set -ex
      
      CLI_VERSION=`cat $SYSTEM_ARTIFACTSDIRECTORY/metadata/version`
      RPM_NAME=$(cd $SYSTEM_ARTIFACTSDIRECTORY/rpm/ && ls azure-cli-$CLI_VERSION-1.${DISTRO}.*.rpm)
      
      echo "== Test rpm package on ${IMAGE} =="
      docker pull $IMAGE
      docker run --rm -e RPM_NAME=$RPM_NAME -e PYTHON_PACKAGE=${PYTHON_PACKAGE} -e PYTHON_CMD=${PYTHON_CMD} -e PIP_CMD=${PIP_CMD} -v $SYSTEM_ARTIFACTSDIRECTORY/rpm:/mnt/rpm -v $(pwd):/azure-cli $IMAGE /bin/bash "/azure-cli/scripts/release/rpm/test_rpm_in_docker.sh"

    displayName: 'Test Rpm Package'

#- job: BuildWindowsMSIArm64
#  displayName: Build Windows MSI ARM64
#
#  dependsOn: ExtractMetadata
#  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual', 'Schedule'))
#  pool:
#    name: 'windows-arm64-11-pool'
#    vmImage: 'windows-2022'
#  variables:
#    skipComponentGovernanceDetection: true
#  steps:
#  - task: DownloadPipelineArtifact@1
#    displayName: 'Download Build Artifacts'
#    inputs:
#      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
#      artifactName: metadata
#
#  - script: |
#      set /p CLI_VERSION=<$(System.ArtifactsDirectory)/metadata/version
#      set
#
#      build_scripts/windows/scripts/build.cmd
#    displayName: 'Build Windows MSI'
#
#  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
#    displayName: 'SBOM'
#    inputs:
#      BuildDropPath: 'build_scripts/windows/out/'
#
#  - task: PublishPipelineArtifact@0
#    displayName: 'Publish Artifact: MSI'
#    inputs:
#      TargetPath: 'build_scripts/windows/out/'
#      ArtifactName: msi
#
#- job: TestWindowsMSIArm64
#  displayName: Test Windows MSI ARM64
#
#  dependsOn: BuildWindowsMSIArm64
#  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual', 'Schedule'))
#  pool:
#    name: 'windows-arm64-11-pool'
#    vmImage: 'windows-2022'
#  variables:
#    skipComponentGovernanceDetection: true
#  steps:
#  - task: DownloadPipelineArtifact@1
#    displayName: 'Download Build Artifacts'
#    inputs:
#      TargetPath: '$(Build.ArtifactStagingDirectory)/metadata'
#      artifactName: metadata
#
#  - task: DownloadPipelineArtifact@1
#    displayName: 'Download Build Artifacts'
#    inputs:
#      TargetPath: '$(Build.ArtifactStagingDirectory)/msi'
#      artifactName: msi
#
#  - task: PowerShell@2
#    displayName: Install and Load CLI
#    inputs:
#      targetType: inline
#      script: |
#        if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
#          # Start another Powershell process as Admin and execute this script again
#          $arguments = "& '" +$myinvocation.mycommand.definition + "'"
#          Start-Process powershell -Verb runAs -ArgumentList $arguments
#          # Stop if the PowerShell is not run as Admin
#          Break
#        }
#        # The following are executed by elevated PowerShell
#        az --version
#
#        $InstallArgs = @(
#          "/i"
#          "`"$env:SYSTEM_ARTIFACTSDIRECTORY\msi\Microsoft Azure CLI.msi`""
#          "/q"
#          "/norestart"
#          "/l*v"
#          ".\install_logs.txt"
#        )
#        $pre_installed_version=az version --query '\"azure-cli\"' -o tsv
#        $to_be_installed_version=Get-Content $(System.ArtifactsDirectory)/metadata/version
#        if ($pre_installed_version -eq $to_be_installed_version){
#          # See https://docs.microsoft.com/windows/win32/msi/reinstallmode about options of REINSTALLMODE
#          $reinstall_option="REINSTALL=ALL REINSTALLMODE=emus"
#          $InstallArgs += $reinstall_option
#        }
#        Start-Process "msiexec.exe" -ArgumentList $InstallArgs -Wait -NoNewWindow
#        $install_time=Measure-Command {Start-Process "msiexec.exe" -ArgumentList $InstallArgs -Wait -NoNewWindow} | select -expand TotalSeconds
#        $installed_version=az version --query '\"azure-cli\"' -o tsv
#        if ($installed_version -ne $to_be_installed_version){
#          echo "The MSI failed to install."
#          Exit 1
#        }
#        echo 'Install time(seconds):' $install_time
#        az --version
#        # Test bundled pip with extension installation
#        az extension add -n rdbms-connect
#        az self-test
#
#        Get-Content .\install_logs.txt
