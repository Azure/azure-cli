# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from ..generated._client_factory import cf_ssh_public_key

    vm_ssh_public_key = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._ssh_public_keys_operations#SshPublicKeysOperations.{}',
        client_factory=cf_ssh_public_key,
    )
    with self.command_group('sshkey', vm_ssh_public_key, client_factory=cf_ssh_public_key) as g:
        g.custom_command('list', 'sshkey_list')
        g.custom_show_command('show', 'sshkey_show')
        g.custom_command('create', 'sshkey_create')
        g.custom_command('update', 'sshkey_update')
        g.custom_command('delete', 'sshkey_delete', confirmation=True)
        g.custom_command('generate-key-pair', 'sshkey_generate_key_pair')

    from ..generated._client_factory import cf_virtual_machine

    vm_virtual_machine = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._virtual_machines_operations#VirtualMachinesOperations.{}',
        client_factory=cf_virtual_machine,
    )
    with self.command_group('vm', vm_virtual_machine, client_factory=cf_virtual_machine, is_experimental=True) as g:
        g.custom_command('reimage', 'vm_reimage')

    from ..generated._client_factory import cf_virtual_machine_scale_set

    vm_virtual_machine_scale_set = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.compute.operations._virtual_machine_scale_sets_operations#VirtualMachineScaleSetsOperations.{}'
        ),
        client_factory=cf_virtual_machine_scale_set,
    )
    with self.command_group('vmss', vm_virtual_machine_scale_set, client_factory=cf_virtual_machine_scale_set) as g:
        g.custom_command(
            'force-recovery-service-fabric-platform-update-domain-walk',
            'vmss_force_recovery_service_fabric_platform_update_domain_walk',
        )
        g.custom_command('redeploy', 'vmss_redeploy')
        g.custom_command('reimage-all', 'vmss_reimage_all')

    from ..generated._client_factory import cf_virtual_machine_scale_set_vm_extension

    vm_virtual_machine_scale_set_vm_extension = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._virtual_machine_scale_set_vm_extensions_operations#VirtualMachineScaleSetVmExtensionsOperations.{}',
        client_factory=cf_virtual_machine_scale_set_vm_extension,
    )
    with self.command_group(
        'vmss vm-extension',
        vm_virtual_machine_scale_set_vm_extension,
        client_factory=cf_virtual_machine_scale_set_vm_extension,
    ) as g:
        g.custom_command('list', 'vmss_vm_extension_list')
        g.custom_show_command('show', 'vmss_vm_extension_show')
        g.custom_command('create', 'vmss_vm_extension_create', supports_no_wait=True)
        g.custom_wait_command('wait', 'vmss_vm_extension_show')

    from ..generated._client_factory import cf_virtual_machine_scale_set_vms

    vm_virtual_machine_scale_set_vms = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._virtual_machine_scale_set_vms_operations#VirtualMachineScaleSetVMsOperations.{}',
        client_factory=cf_virtual_machine_scale_set_vms,
    )
    with self.command_group(
        'vmss v-ms', vm_virtual_machine_scale_set_vms, client_factory=cf_virtual_machine_scale_set_vms
    ) as g:
        g.custom_command('redeploy', 'vmss_v_ms_redeploy')
        g.custom_command('reimage-all', 'vmss_v_ms_reimage_all')
        g.custom_command('retrieve-boot-diagnostic-data', 'vmss_v_ms_retrieve_boot_diagnostic_data')

    from ..generated._client_factory import cf_virtual_machine_scale_set_vm_run_command

    vm_virtual_machine_scale_set_vm_run_command = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._virtual_machine_scale_set_vm_run_commands_operations#VirtualMachineScaleSetVmRunCommandsOperations.{}',
        client_factory=cf_virtual_machine_scale_set_vm_run_command,
    )
    with self.command_group(
        'vmss vm-run',
        vm_virtual_machine_scale_set_vm_run_command,
        client_factory=cf_virtual_machine_scale_set_vm_run_command,
    ) as g:
        g.custom_command('list', 'vmss_vm_run_list')

    from ..generated._client_factory import cf_disk_access

    vm_disk_access = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._disk_accesses_operations#DiskAccessesOperations.{}',
        client_factory=cf_disk_access,
    )
    with self.command_group('vm disk-access', vm_disk_access, client_factory=cf_disk_access) as g:
        g.custom_command('delete-a-private-endpoint-connection', 'vm_disk_access_delete_a_private_endpoint_connection')
        g.custom_command('show-private-link-resource', 'vm_disk_access_show_private_link_resource')

    from ..generated._client_factory import cf_gallery_application

    vm_gallery_application = CliCommandType(
        operations_tmpl=(
            'azure.mgmt.compute.operations._gallery_applications_operations#GalleryApplicationsOperations.{}'
        ),
        client_factory=cf_gallery_application,
    )
    with self.command_group(
        'vm gallery-application', vm_gallery_application, client_factory=cf_gallery_application
    ) as g:
        g.custom_command('list', 'vm_gallery_application_list')
        g.custom_show_command('show', 'vm_gallery_application_show')
        g.custom_command('create', 'vm_gallery_application_create', supports_no_wait=True)
        g.custom_command('delete', 'vm_gallery_application_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'vm_gallery_application_show')

    from ..generated._client_factory import cf_gallery_application_version

    vm_gallery_application_version = CliCommandType(
        operations_tmpl='azure.mgmt.compute.operations._gallery_application_versions_operations#GalleryApplicationVersionsOperations.{}',
        client_factory=cf_gallery_application_version,
    )
    with self.command_group(
        'vm gallery-application-version', vm_gallery_application_version, client_factory=cf_gallery_application_version
    ) as g:
        g.custom_command('list', 'vm_gallery_application_version_list')
