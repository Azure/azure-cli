# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network virtual-appliance connection update",
)
class Update(AAZCommand):
    """Update a connection to Network Virtual Appliance, if it doesn't exist else updates the existing NVA connection'
    """

    _aaz_info = {
        "version": "2023-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkvirtualappliances/{}/networkvirtualapplianceconnections/{}", "2023-06-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.connection_name = AAZStrArg(
            options=["-n", "--name", "--connection-name"],
            help="The name of the NVA connection.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.appliance_name = AAZStrArg(
            options=["--appliance-name"],
            help="The name of the Network Virtual Appliance.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "NetworkVirtualApplianceConnectionParameters"

        _args_schema = cls._args_schema
        _args_schema.id = AAZResourceIdArg(
            options=["--id"],
            arg_group="NetworkVirtualApplianceConnectionParameters",
            help="Resource ID.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkVirtualAppliances/{}/networkVirtualApplianceConnections/{}",
            ),
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            arg_group="NetworkVirtualApplianceConnectionParameters",
            help="The name of the resource.",
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.asn = AAZIntArg(
            options=["--asn"],
            arg_group="Properties",
            help="Network Virtual Appliance ASN.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=0,
            ),
        )
        _args_schema.bgp_peer_address = AAZListArg(
            options=["--bgp-peer-address"],
            arg_group="Properties",
            help="List of bgpPeerAddresses for the NVA instances",
            nullable=True,
        )
        _args_schema.enable_internet_security = AAZBoolArg(
            options=["--enable-internet-security"],
            arg_group="Properties",
            help="Enable internet security.",
            nullable=True,
        )
        _args_schema.routing_config = AAZObjectArg(
            options=["--routing-config"],
            arg_group="Properties",
            help="The Routing Configuration indicating the associated and propagated route tables on this connection.",
            nullable=True,
        )
        _args_schema.tunnel_identifier = AAZIntArg(
            options=["--tunnel-identifier"],
            arg_group="Properties",
            help="Unique identifier for the connection.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=0,
            ),
        )

        bgp_peer_address = cls._args_schema.bgp_peer_address
        bgp_peer_address.Element = AAZStrArg(
            nullable=True,
        )

        routing_config = cls._args_schema.routing_config
        routing_config.associated_route_table = AAZStrArg(
            options=["associated-route-table"],
            help="The resource id RouteTable associated with this RoutingConfiguration.",
            nullable=True,
        )
        routing_config.inbound_route_map = AAZStrArg(
            options=["inbound-route-map"],
            help="The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.",
            nullable=True,
        )
        routing_config.outbound_route_map = AAZStrArg(
            options=["outbound-route-map"],
            help="The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.",
            nullable=True,
        )
        routing_config.propagated_route_tables = AAZObjectArg(
            options=["propagated-route-tables"],
            help="The list of RouteTables to advertise the routes to.",
            nullable=True,
        )
        routing_config.vnet_routes = AAZObjectArg(
            options=["vnet-routes"],
            help="List of routes that control routing from VirtualHub into a virtual network connection.",
            nullable=True,
        )

        propagated_route_tables = cls._args_schema.routing_config.propagated_route_tables
        propagated_route_tables.ids = AAZListArg(
            options=["ids"],
            help="The list of resource ids of all the RouteTables.",
            nullable=True,
        )
        propagated_route_tables.labels = AAZListArg(
            options=["labels"],
            help="The list of labels.",
            nullable=True,
        )

        ids = cls._args_schema.routing_config.propagated_route_tables.ids
        ids.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_sub_resource_update(ids.Element)

        labels = cls._args_schema.routing_config.propagated_route_tables.labels
        labels.Element = AAZStrArg(
            nullable=True,
        )

        vnet_routes = cls._args_schema.routing_config.vnet_routes
        vnet_routes.static_routes = AAZListArg(
            options=["static-routes"],
            help="List of all Static Routes.",
            nullable=True,
        )
        vnet_routes.static_routes_config = AAZObjectArg(
            options=["static-routes-config"],
            help="Configuration for static routes on this HubVnetConnection.",
            nullable=True,
        )

        static_routes = cls._args_schema.routing_config.vnet_routes.static_routes
        static_routes.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.routing_config.vnet_routes.static_routes.Element
        _element.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="List of all address prefixes.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the StaticRoute that is unique within a VnetRoute.",
            nullable=True,
        )
        _element.next_hop_ip_address = AAZStrArg(
            options=["next-hop-ip-address"],
            help="The ip address of the next hop.",
            nullable=True,
        )

        address_prefixes = cls._args_schema.routing_config.vnet_routes.static_routes.Element.address_prefixes
        address_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        static_routes_config = cls._args_schema.routing_config.vnet_routes.static_routes_config
        static_routes_config.vnet_local_route_override_criteria = AAZStrArg(
            options=["vnet-local-route-override-criteria"],
            help="Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.",
            nullable=True,
            enum={"Contains": "Contains", "Equal": "Equal"},
        )
        return cls._args_schema

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg(
            nullable=True,
        )

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )

        _schema.id = cls._args_sub_resource_update.id

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkVirtualApplianceConnectionsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.NetworkVirtualApplianceConnectionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkVirtualApplianceConnectionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/networkVirtualApplianceConnections/{connectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "connectionName", self.ctx.args.connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "networkVirtualApplianceName", self.ctx.args.appliance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_network_virtual_appliance_connection_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkVirtualApplianceConnectionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/networkVirtualApplianceConnections/{connectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "connectionName", self.ctx.args.connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "networkVirtualApplianceName", self.ctx.args.appliance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_network_virtual_appliance_connection_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("id", AAZStrType, ".id")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("resourceName", AAZStrType, ".resource_name")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("asn", AAZIntType, ".asn")
                properties.set_prop("bgpPeerAddress", AAZListType, ".bgp_peer_address")
                properties.set_prop("enableInternetSecurity", AAZBoolType, ".enable_internet_security")
                properties.set_prop("name", AAZStrType, ".connection_name")
                properties.set_prop("routingConfiguration", AAZObjectType, ".routing_config")
                properties.set_prop("tunnelIdentifier", AAZIntType, ".tunnel_identifier")

            bgp_peer_address = _builder.get(".properties.bgpPeerAddress")
            if bgp_peer_address is not None:
                bgp_peer_address.set_elements(AAZStrType, ".")

            routing_configuration = _builder.get(".properties.routingConfiguration")
            if routing_configuration is not None:
                routing_configuration.set_prop("associatedRouteTable", AAZObjectType)
                routing_configuration.set_prop("inboundRouteMap", AAZObjectType)
                routing_configuration.set_prop("outboundRouteMap", AAZObjectType)
                routing_configuration.set_prop("propagatedRouteTables", AAZObjectType, ".propagated_route_tables")
                routing_configuration.set_prop("vnetRoutes", AAZObjectType, ".vnet_routes")

            associated_route_table = _builder.get(".properties.routingConfiguration.associatedRouteTable")
            if associated_route_table is not None:
                associated_route_table.set_prop("id", AAZStrType, ".associated_route_table")

            inbound_route_map = _builder.get(".properties.routingConfiguration.inboundRouteMap")
            if inbound_route_map is not None:
                inbound_route_map.set_prop("id", AAZStrType, ".inbound_route_map")

            outbound_route_map = _builder.get(".properties.routingConfiguration.outboundRouteMap")
            if outbound_route_map is not None:
                outbound_route_map.set_prop("id", AAZStrType, ".outbound_route_map")

            propagated_route_tables = _builder.get(".properties.routingConfiguration.propagatedRouteTables")
            if propagated_route_tables is not None:
                propagated_route_tables.set_prop("ids", AAZListType, ".ids")
                propagated_route_tables.set_prop("labels", AAZListType, ".labels")

            ids = _builder.get(".properties.routingConfiguration.propagatedRouteTables.ids")
            if ids is not None:
                _UpdateHelper._build_schema_sub_resource_update(ids.set_elements(AAZObjectType, "."))

            labels = _builder.get(".properties.routingConfiguration.propagatedRouteTables.labels")
            if labels is not None:
                labels.set_elements(AAZStrType, ".")

            vnet_routes = _builder.get(".properties.routingConfiguration.vnetRoutes")
            if vnet_routes is not None:
                vnet_routes.set_prop("staticRoutes", AAZListType, ".static_routes")
                vnet_routes.set_prop("staticRoutesConfig", AAZObjectType, ".static_routes_config")

            static_routes = _builder.get(".properties.routingConfiguration.vnetRoutes.staticRoutes")
            if static_routes is not None:
                static_routes.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.routingConfiguration.vnetRoutes.staticRoutes[]")
            if _elements is not None:
                _elements.set_prop("addressPrefixes", AAZListType, ".address_prefixes")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("nextHopIpAddress", AAZStrType, ".next_hop_ip_address")

            address_prefixes = _builder.get(".properties.routingConfiguration.vnetRoutes.staticRoutes[].addressPrefixes")
            if address_prefixes is not None:
                address_prefixes.set_elements(AAZStrType, ".")

            static_routes_config = _builder.get(".properties.routingConfiguration.vnetRoutes.staticRoutesConfig")
            if static_routes_config is not None:
                static_routes_config.set_prop("vnetLocalRouteOverrideCriteria", AAZStrType, ".vnet_local_route_override_criteria")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_sub_resource_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    _schema_network_virtual_appliance_connection_read = None

    @classmethod
    def _build_schema_network_virtual_appliance_connection_read(cls, _schema):
        if cls._schema_network_virtual_appliance_connection_read is not None:
            _schema.id = cls._schema_network_virtual_appliance_connection_read.id
            _schema.properties = cls._schema_network_virtual_appliance_connection_read.properties
            _schema.resource_name = cls._schema_network_virtual_appliance_connection_read.resource_name
            return

        cls._schema_network_virtual_appliance_connection_read = _schema_network_virtual_appliance_connection_read = AAZObjectType()

        network_virtual_appliance_connection_read = _schema_network_virtual_appliance_connection_read
        network_virtual_appliance_connection_read.id = AAZStrType()
        network_virtual_appliance_connection_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        network_virtual_appliance_connection_read.resource_name = AAZStrType(
            serialized_name="resourceName",
        )

        properties = _schema_network_virtual_appliance_connection_read.properties
        properties.asn = AAZIntType()
        properties.bgp_peer_address = AAZListType(
            serialized_name="bgpPeerAddress",
        )
        properties.enable_internet_security = AAZBoolType(
            serialized_name="enableInternetSecurity",
        )
        properties.name = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.routing_configuration = AAZObjectType(
            serialized_name="routingConfiguration",
        )
        properties.tunnel_identifier = AAZIntType(
            serialized_name="tunnelIdentifier",
        )

        bgp_peer_address = _schema_network_virtual_appliance_connection_read.properties.bgp_peer_address
        bgp_peer_address.Element = AAZStrType()

        routing_configuration = _schema_network_virtual_appliance_connection_read.properties.routing_configuration
        routing_configuration.associated_route_table = AAZObjectType(
            serialized_name="associatedRouteTable",
        )
        cls._build_schema_sub_resource_read(routing_configuration.associated_route_table)
        routing_configuration.inbound_route_map = AAZObjectType(
            serialized_name="inboundRouteMap",
        )
        cls._build_schema_sub_resource_read(routing_configuration.inbound_route_map)
        routing_configuration.outbound_route_map = AAZObjectType(
            serialized_name="outboundRouteMap",
        )
        cls._build_schema_sub_resource_read(routing_configuration.outbound_route_map)
        routing_configuration.propagated_route_tables = AAZObjectType(
            serialized_name="propagatedRouteTables",
        )
        routing_configuration.vnet_routes = AAZObjectType(
            serialized_name="vnetRoutes",
        )

        propagated_route_tables = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.propagated_route_tables
        propagated_route_tables.ids = AAZListType()
        propagated_route_tables.labels = AAZListType()

        ids = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.propagated_route_tables.ids
        ids.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(ids.Element)

        labels = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.propagated_route_tables.labels
        labels.Element = AAZStrType()

        vnet_routes = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.vnet_routes
        vnet_routes.bgp_connections = AAZListType(
            serialized_name="bgpConnections",
            flags={"read_only": True},
        )
        vnet_routes.static_routes = AAZListType(
            serialized_name="staticRoutes",
        )
        vnet_routes.static_routes_config = AAZObjectType(
            serialized_name="staticRoutesConfig",
        )

        bgp_connections = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.vnet_routes.bgp_connections
        bgp_connections.Element = AAZObjectType()
        cls._build_schema_sub_resource_read(bgp_connections.Element)

        static_routes = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.vnet_routes.static_routes
        static_routes.Element = AAZObjectType()

        _element = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.vnet_routes.static_routes.Element
        _element.address_prefixes = AAZListType(
            serialized_name="addressPrefixes",
        )
        _element.name = AAZStrType()
        _element.next_hop_ip_address = AAZStrType(
            serialized_name="nextHopIpAddress",
        )

        address_prefixes = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.vnet_routes.static_routes.Element.address_prefixes
        address_prefixes.Element = AAZStrType()

        static_routes_config = _schema_network_virtual_appliance_connection_read.properties.routing_configuration.vnet_routes.static_routes_config
        static_routes_config.propagate_static_routes = AAZBoolType(
            serialized_name="propagateStaticRoutes",
            flags={"read_only": True},
        )
        static_routes_config.vnet_local_route_override_criteria = AAZStrType(
            serialized_name="vnetLocalRouteOverrideCriteria",
        )

        _schema.id = cls._schema_network_virtual_appliance_connection_read.id
        _schema.properties = cls._schema_network_virtual_appliance_connection_read.properties
        _schema.resource_name = cls._schema_network_virtual_appliance_connection_read.resource_name

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Update"]
