# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class List(AAZCommand):
    """List all Microsoft Azure consumption commitments for a billing account. The API is only supported for Microsoft Customer Agreements (MCA) and Direct Enterprise Agreement (EA)  billing accounts.
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/billingprofiles/{}/providers/microsoft.consumption/lots", "2023-11-01"],
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/providers/microsoft.consumption/lots", "2023-11-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_id = AAZStrArg(
            options=["--billing-account-id"],
            help="BillingAccount ID",
            required=True,
        )
        _args_schema.billing_profile_id = AAZStrArg(
            options=["--billing-profile-id"],
            help="Azure Billing Profile ID.",
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="May be used to filter the lots by Status, Source etc. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.billing_account_id) and has_value(self.ctx.args.billing_profile_id)
        condition_1 = has_value(self.ctx.args.billing_account_id) and has_value(self.ctx.args.billing_profile_id) is not True
        if condition_0:
            self.LotsListByBillingProfile(ctx=self.ctx)()
        if condition_1:
            self.LotsListByBillingAccount(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class LotsListByBillingProfile(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/lots",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountId", self.ctx.args.billing_account_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingProfileId", self.ctx.args.billing_profile_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType(
                flags={"read_only": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.e_tag = AAZStrType(
                serialized_name="eTag",
            )
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.organization_type = AAZStrType(
                serialized_name="OrganizationType",
                flags={"read_only": True},
            )
            properties.billing_currency = AAZStrType(
                serialized_name="billingCurrency",
                flags={"read_only": True},
            )
            properties.closed_balance = AAZObjectType(
                serialized_name="closedBalance",
            )
            _ListHelper._build_schema_amount_read(properties.closed_balance)
            properties.closed_balance_in_billing_currency = AAZObjectType(
                serialized_name="closedBalanceInBillingCurrency",
            )
            _ListHelper._build_schema_amount_with_exchange_rate_read(properties.closed_balance_in_billing_currency)
            properties.credit_currency = AAZStrType(
                serialized_name="creditCurrency",
                flags={"read_only": True},
            )
            properties.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True},
            )
            properties.expiration_date = AAZStrType(
                serialized_name="expirationDate",
                flags={"read_only": True},
            )
            properties.is_estimated_balance = AAZBoolType(
                serialized_name="isEstimatedBalance",
                flags={"read_only": True},
            )
            properties.original_amount = AAZObjectType(
                serialized_name="originalAmount",
            )
            _ListHelper._build_schema_amount_read(properties.original_amount)
            properties.original_amount_in_billing_currency = AAZObjectType(
                serialized_name="originalAmountInBillingCurrency",
            )
            _ListHelper._build_schema_amount_with_exchange_rate_read(properties.original_amount_in_billing_currency)
            properties.po_number = AAZStrType(
                serialized_name="poNumber",
                flags={"read_only": True},
            )
            properties.purchased_date = AAZStrType(
                serialized_name="purchasedDate",
                flags={"read_only": True},
            )
            properties.reseller = AAZObjectType()
            properties.source = AAZStrType(
                flags={"read_only": True},
            )
            properties.start_date = AAZStrType(
                serialized_name="startDate",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.used_amount = AAZObjectType(
                serialized_name="usedAmount",
            )
            _ListHelper._build_schema_amount_read(properties.used_amount)

            reseller = cls._schema_on_200.value.Element.properties.reseller
            reseller.reseller_description = AAZStrType(
                serialized_name="resellerDescription",
                flags={"read_only": True},
            )
            reseller.reseller_id = AAZStrType(
                serialized_name="resellerId",
                flags={"read_only": True},
            )

            return cls._schema_on_200

    class LotsListByBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/lots",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountId", self.ctx.args.billing_account_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType(
                flags={"read_only": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.e_tag = AAZStrType(
                serialized_name="eTag",
            )
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.organization_type = AAZStrType(
                serialized_name="OrganizationType",
                flags={"read_only": True},
            )
            properties.billing_currency = AAZStrType(
                serialized_name="billingCurrency",
                flags={"read_only": True},
            )
            properties.closed_balance = AAZObjectType(
                serialized_name="closedBalance",
            )
            _ListHelper._build_schema_amount_read(properties.closed_balance)
            properties.closed_balance_in_billing_currency = AAZObjectType(
                serialized_name="closedBalanceInBillingCurrency",
            )
            _ListHelper._build_schema_amount_with_exchange_rate_read(properties.closed_balance_in_billing_currency)
            properties.credit_currency = AAZStrType(
                serialized_name="creditCurrency",
                flags={"read_only": True},
            )
            properties.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True},
            )
            properties.expiration_date = AAZStrType(
                serialized_name="expirationDate",
                flags={"read_only": True},
            )
            properties.is_estimated_balance = AAZBoolType(
                serialized_name="isEstimatedBalance",
                flags={"read_only": True},
            )
            properties.original_amount = AAZObjectType(
                serialized_name="originalAmount",
            )
            _ListHelper._build_schema_amount_read(properties.original_amount)
            properties.original_amount_in_billing_currency = AAZObjectType(
                serialized_name="originalAmountInBillingCurrency",
            )
            _ListHelper._build_schema_amount_with_exchange_rate_read(properties.original_amount_in_billing_currency)
            properties.po_number = AAZStrType(
                serialized_name="poNumber",
                flags={"read_only": True},
            )
            properties.purchased_date = AAZStrType(
                serialized_name="purchasedDate",
                flags={"read_only": True},
            )
            properties.reseller = AAZObjectType()
            properties.source = AAZStrType(
                flags={"read_only": True},
            )
            properties.start_date = AAZStrType(
                serialized_name="startDate",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.used_amount = AAZObjectType(
                serialized_name="usedAmount",
            )
            _ListHelper._build_schema_amount_read(properties.used_amount)

            reseller = cls._schema_on_200.value.Element.properties.reseller
            reseller.reseller_description = AAZStrType(
                serialized_name="resellerDescription",
                flags={"read_only": True},
            )
            reseller.reseller_id = AAZStrType(
                serialized_name="resellerId",
                flags={"read_only": True},
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_amount_with_exchange_rate_read = None

    @classmethod
    def _build_schema_amount_with_exchange_rate_read(cls, _schema):
        if cls._schema_amount_with_exchange_rate_read is not None:
            _schema.currency = cls._schema_amount_with_exchange_rate_read.currency
            _schema.exchange_rate = cls._schema_amount_with_exchange_rate_read.exchange_rate
            _schema.exchange_rate_month = cls._schema_amount_with_exchange_rate_read.exchange_rate_month
            _schema.value = cls._schema_amount_with_exchange_rate_read.value
            return

        cls._schema_amount_with_exchange_rate_read = _schema_amount_with_exchange_rate_read = AAZObjectType()

        amount_with_exchange_rate_read = _schema_amount_with_exchange_rate_read
        amount_with_exchange_rate_read.currency = AAZStrType(
            flags={"read_only": True},
        )
        amount_with_exchange_rate_read.exchange_rate = AAZFloatType(
            serialized_name="exchangeRate",
            flags={"read_only": True},
        )
        amount_with_exchange_rate_read.exchange_rate_month = AAZIntType(
            serialized_name="exchangeRateMonth",
            flags={"read_only": True},
        )
        amount_with_exchange_rate_read.value = AAZFloatType(
            flags={"read_only": True},
        )

        _schema.currency = cls._schema_amount_with_exchange_rate_read.currency
        _schema.exchange_rate = cls._schema_amount_with_exchange_rate_read.exchange_rate
        _schema.exchange_rate_month = cls._schema_amount_with_exchange_rate_read.exchange_rate_month
        _schema.value = cls._schema_amount_with_exchange_rate_read.value

    _schema_amount_read = None

    @classmethod
    def _build_schema_amount_read(cls, _schema):
        if cls._schema_amount_read is not None:
            _schema.currency = cls._schema_amount_read.currency
            _schema.value = cls._schema_amount_read.value
            return

        cls._schema_amount_read = _schema_amount_read = AAZObjectType()

        amount_read = _schema_amount_read
        amount_read.currency = AAZStrType(
            flags={"read_only": True},
        )
        amount_read.value = AAZFloatType(
            flags={"read_only": True},
        )

        _schema.currency = cls._schema_amount_read.currency
        _schema.value = cls._schema_amount_read.value


__all__ = ["List"]
