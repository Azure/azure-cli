# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network lb address-pool",
)
class __CMDGroup(AAZCommandGroup):
    """Manage address pools of a load balancer.
    """
    pass


class Create(AAZCommand):
    """Create an address pool.

    :example: Create an address pool.
        az network lb address-pool create -g MyResourceGroup --lb-name MyLb -n MyAddressPool

    :example: Create an address pool with several backend addresses using shorthand syntax arguments.
        az network lb address-pool create -g MyResourceGroup --lb-name MyLb -n MyAddressPool --vnet MyVnetResource --backend-addresses "[{name:addr1,ip-address:10.0.0.1},{name:addr2,ip-address:10.0.0.2,subnet:subnetName}]"

    :example: Create an address pool with several backend addresses using config file
        az network lb address-pool create -g MyResourceGroup --lb-name MyLb -n MyAddressPool --backend-addresses config_file.json

    :example: Create an address pool with one backend address using key-value arguments.
        az network lb address-pool create -g MyResourceGroup --lb-name MyLb -n MyAddressPool --backend-address name=addr1 ip-address=10.0.0.1 subnet=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyRg/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet1
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["-n", "--name", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.drain_period_in_seconds = AAZIntArg(
            options=["--drain-period", "--drain-period-in-seconds"],
            arg_group="Properties",
            help="Amount of seconds Load Balancer waits for before sending RESET to client and backend address.",
        )
        _args_schema.backend_addresses = AAZListArg(
            options=["--backend-addresses"],
            singular_options=["--backend-address"],
            arg_group="Properties",
            help="An array of backend addresses.",
        )
        _args_schema.location = AAZStrArg(
            options=["--location"],
            arg_group="Properties",
            help="The location of the backend address pool.",
        )
        _args_schema.tunnel_interfaces = AAZListArg(
            options=["--tunnel-interfaces"],
            arg_group="Properties",
            help="An array of gateway load balancer tunnel interfaces.",
        )

        backend_addresses = cls._args_schema.backend_addresses
        backend_addresses.Element = AAZObjectArg()

        _element = cls._args_schema.backend_addresses.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the backend address.",
        )
        _element.admin_state = AAZStrArg(
            options=["admin-state"],
            help="A list of administrative states which once set can override health probe so that Load Balancer will always forward new connections to backend, or deny new connections and reset existing connections.",
            enum={"Down": "Down", "Drain": "Drain", "None": "None", "Up": "Up"},
        )
        _element.ip_address = AAZStrArg(
            options=["ip-address"],
            help="IP Address belonging to the referenced virtual network.",
        )
        _element.frontend_ip_address = AAZStrArg(
            options=["frontend-ip", "frontend-ip-address"],
            help="The frontend IP configuration ID of a regional load balance.",
        )
        _element.subnet = AAZStrArg(
            options=["subnet"],
            help="Name or Id of the subnet",
        )
        _element.virtual_network = AAZStrArg(
            options=["vnet", "virtual-network"],
            help="Name or Id of the virtual network",
        )

        tunnel_interfaces = cls._args_schema.tunnel_interfaces
        tunnel_interfaces.Element = AAZObjectArg()

        _element = cls._args_schema.tunnel_interfaces.Element
        _element.identifier = AAZIntArg(
            options=["identifier"],
            help="Identifier of gateway load balancer tunnel interface.",
        )
        _element.port = AAZIntArg(
            options=["port"],
            help="Port of gateway load balancer tunnel interface.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol of gateway load balancer tunnel interface.",
            enum={"Native": "Native", "None": "None", "VXLAN": "VXLAN"},
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Traffic type of gateway load balancer tunnel interface.",
            enum={"External": "External", "Internal": "Internal", "None": "None"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.LoadBalancerBackendAddressPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class LoadBalancerBackendAddressPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("name", AAZStrType, ".address_pool_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("drainPeriodInSeconds", AAZIntType, ".drain_period_in_seconds")
                properties.set_prop("loadBalancerBackendAddresses", AAZListType, ".backend_addresses")
                properties.set_prop("location", AAZStrType, ".location")
                properties.set_prop("tunnelInterfaces", AAZListType, ".tunnel_interfaces")

            load_balancer_backend_addresses = _builder.get(".properties.loadBalancerBackendAddresses")
            if load_balancer_backend_addresses is not None:
                load_balancer_backend_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.loadBalancerBackendAddresses[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.loadBalancerBackendAddresses[].properties")
            if properties is not None:
                properties.set_prop("adminState", AAZStrType, ".admin_state")
                properties.set_prop("ipAddress", AAZStrType, ".ip_address")
                properties.set_prop("loadBalancerFrontendIPConfiguration", AAZObjectType)
                properties.set_prop("subnet", AAZObjectType)
                properties.set_prop("virtualNetwork", AAZObjectType)

            load_balancer_frontend_ip_configuration = _builder.get(".properties.loadBalancerBackendAddresses[].properties.loadBalancerFrontendIPConfiguration")
            if load_balancer_frontend_ip_configuration is not None:
                load_balancer_frontend_ip_configuration.set_prop("id", AAZStrType, ".frontend_ip_address")

            subnet = _builder.get(".properties.loadBalancerBackendAddresses[].properties.subnet")
            if subnet is not None:
                subnet.set_prop("id", AAZStrType, ".subnet")

            virtual_network = _builder.get(".properties.loadBalancerBackendAddresses[].properties.virtualNetwork")
            if virtual_network is not None:
                virtual_network.set_prop("id", AAZStrType, ".virtual_network")

            tunnel_interfaces = _builder.get(".properties.tunnelInterfaces")
            if tunnel_interfaces is not None:
                tunnel_interfaces.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.tunnelInterfaces[]")
            if _elements is not None:
                _elements.set_prop("identifier", AAZIntType, ".identifier")
                _elements.set_prop("port", AAZIntType, ".port")
                _elements.set_prop("protocol", AAZStrType, ".protocol")
                _elements.set_prop("type", AAZStrType, ".type")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _CreateHelper._build_schema_backend_address_pool_read(cls._schema_on_200_201)

            return cls._schema_on_200_201


class Delete(AAZCommand):
    """Delete an address pool.

    :example: Delete an address pool.
        az network lb address-pool delete -g MyResourceGroup --lb-name MyLb -n MyAddressPool
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["-n", "--name", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.LoadBalancerBackendAddressPoolsDelete(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class LoadBalancerBackendAddressPoolsDelete(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [204]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_204,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "DELETE"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        def on_200(self, session):
            pass

        def on_204(self, session):
            pass


@register_command(
    "network lb address-pool list",
)
class List(AAZCommand):
    """List address pools.

    :example: List address pools.
        az network lb address-pool list -g MyResourceGroup --lb-name MyLb -o table
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools", "2022-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class LoadBalancerBackendAddressPoolsList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()
            _ListHelper._build_schema_backend_address_pool_read(value.Element)

            return cls._schema_on_200


@register_command(
    "network lb address-pool show",
)
class Show(AAZCommand):
    """Get the details of an address pool.

    :example: Get the details of an address pool.
        az network lb address-pool show -g MyResourceGroup --lb-name MyLb -n MyAddressPool
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["-n", "--name", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network lb address-pool update",
)
class Update(AAZCommand):
    """Update an address pool.

    :example: Update all backend addresses in the address pool using shorthand syntax
        az network lb address-pool update -g MyResourceGroup --lb-name MyLb -n MyAddressPool --vnet MyVnetResource --backend-addresses "[{name:addr1,ip-address:10.0.0.1},{name:addr2,ip-address:10.0.0.2,subnet:subnetName}]"

    :example: Update the subnet of the first backend address in the address pool using shorthand syntax
        az network lb address-pool update -g MyResourceGroup --lb-name MyLb -n MyAddressPool --backend-addresses [0].subnet=/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyRg/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet1

    :example: Remove the first backend address in the address pool using shorthand syntax
        az network lb address-pool update -g MyResourceGroup --lb-name MyLb -n MyAddressPool --backend-addresses [0]=null

    :example: Remove all the backend addresses in the address pool
        az network lb address-pool update -g MyResourceGroup --lb-name MyLb -n MyAddressPool --backend-addresses null
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["-n", "--name", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.drain_period_in_seconds = AAZIntArg(
            options=["--drain-period", "--drain-period-in-seconds"],
            arg_group="Properties",
            help="Amount of seconds Load Balancer waits for before sending RESET to client and backend address.",
            nullable=True,
        )
        _args_schema.backend_addresses = AAZListArg(
            options=["--backend-addresses"],
            singular_options=["--backend-address"],
            arg_group="Properties",
            help="An array of backend addresses.",
            nullable=True,
        )
        _args_schema.location = AAZStrArg(
            options=["--location"],
            arg_group="Properties",
            help="The location of the backend address pool.",
            nullable=True,
        )
        _args_schema.tunnel_interfaces = AAZListArg(
            options=["--tunnel-interfaces"],
            arg_group="Properties",
            help="An array of gateway load balancer tunnel interfaces.",
            nullable=True,
        )

        backend_addresses = cls._args_schema.backend_addresses
        backend_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.backend_addresses.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the backend address.",
            nullable=True,
        )
        _element.admin_state = AAZStrArg(
            options=["admin-state"],
            help="A list of administrative states which once set can override health probe so that Load Balancer will always forward new connections to backend, or deny new connections and reset existing connections.",
            nullable=True,
            enum={"Down": "Down", "Drain": "Drain", "None": "None", "Up": "Up"},
        )
        _element.ip_address = AAZStrArg(
            options=["ip-address"],
            help="IP Address belonging to the referenced virtual network.",
            nullable=True,
        )
        _element.frontend_ip_address = AAZStrArg(
            options=["frontend-ip", "frontend-ip-address"],
            help="The frontend IP configuration ID of a regional load balance.",
            nullable=True,
        )
        _element.subnet = AAZStrArg(
            options=["subnet"],
            help="Name or Id of the subnet",
            nullable=True,
        )
        _element.virtual_network = AAZStrArg(
            options=["vnet", "virtual-network"],
            help="Name or Id of the virtual network",
            nullable=True,
        )

        tunnel_interfaces = cls._args_schema.tunnel_interfaces
        tunnel_interfaces.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.tunnel_interfaces.Element
        _element.identifier = AAZIntArg(
            options=["identifier"],
            help="Identifier of gateway load balancer tunnel interface.",
            nullable=True,
        )
        _element.port = AAZIntArg(
            options=["port"],
            help="Port of gateway load balancer tunnel interface.",
            nullable=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol of gateway load balancer tunnel interface.",
            nullable=True,
            enum={"Native": "Native", "None": "None", "VXLAN": "VXLAN"},
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Traffic type of gateway load balancer tunnel interface.",
            nullable=True,
            enum={"External": "External", "Internal": "Internal", "None": "None"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.LoadBalancerBackendAddressPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200

    class LoadBalancerBackendAddressPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_backend_address_pool_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".address_pool_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("drainPeriodInSeconds", AAZIntType, ".drain_period_in_seconds")
                properties.set_prop("loadBalancerBackendAddresses", AAZListType, ".backend_addresses")
                properties.set_prop("location", AAZStrType, ".location")
                properties.set_prop("tunnelInterfaces", AAZListType, ".tunnel_interfaces")

            load_balancer_backend_addresses = _builder.get(".properties.loadBalancerBackendAddresses")
            if load_balancer_backend_addresses is not None:
                load_balancer_backend_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.loadBalancerBackendAddresses[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.loadBalancerBackendAddresses[].properties")
            if properties is not None:
                properties.set_prop("adminState", AAZStrType, ".admin_state")
                properties.set_prop("ipAddress", AAZStrType, ".ip_address")
                properties.set_prop("loadBalancerFrontendIPConfiguration", AAZObjectType)
                properties.set_prop("subnet", AAZObjectType)
                properties.set_prop("virtualNetwork", AAZObjectType)

            load_balancer_frontend_ip_configuration = _builder.get(".properties.loadBalancerBackendAddresses[].properties.loadBalancerFrontendIPConfiguration")
            if load_balancer_frontend_ip_configuration is not None:
                load_balancer_frontend_ip_configuration.set_prop("id", AAZStrType, ".frontend_ip_address")

            subnet = _builder.get(".properties.loadBalancerBackendAddresses[].properties.subnet")
            if subnet is not None:
                subnet.set_prop("id", AAZStrType, ".subnet")

            virtual_network = _builder.get(".properties.loadBalancerBackendAddresses[].properties.virtualNetwork")
            if virtual_network is not None:
                virtual_network.set_prop("id", AAZStrType, ".virtual_network")

            tunnel_interfaces = _builder.get(".properties.tunnelInterfaces")
            if tunnel_interfaces is not None:
                tunnel_interfaces.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.tunnelInterfaces[]")
            if _elements is not None:
                _elements.set_prop("identifier", AAZIntType, ".identifier")
                _elements.set_prop("port", AAZIntType, ".port")
                _elements.set_prop("protocol", AAZStrType, ".protocol")
                _elements.set_prop("type", AAZStrType, ".type")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


@register_command(
    "network lb address-pool wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["-n", "--name", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _WaitHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200


class _Helper:

    @staticmethod
    def _build_schema_network_interface_ip_configuration_read(cls, _schema):
        if cls._schema_network_interface_ip_configuration_read is not None:
            _schema.etag = cls._schema_network_interface_ip_configuration_read.etag
            _schema.id = cls._schema_network_interface_ip_configuration_read.id
            _schema.name = cls._schema_network_interface_ip_configuration_read.name
            _schema.properties = cls._schema_network_interface_ip_configuration_read.properties
            _schema.type = cls._schema_network_interface_ip_configuration_read.type
            return

        cls._schema_network_interface_ip_configuration_read = _schema_network_interface_ip_configuration_read = AAZObjectType()

        network_interface_ip_configuration_read = _schema_network_interface_ip_configuration_read
        network_interface_ip_configuration_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        network_interface_ip_configuration_read.id = AAZStrType()
        network_interface_ip_configuration_read.name = AAZStrType()
        network_interface_ip_configuration_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        network_interface_ip_configuration_read.type = AAZStrType()

        properties = _schema_network_interface_ip_configuration_read.properties
        properties.application_gateway_backend_address_pools = AAZListType(
            serialized_name="applicationGatewayBackendAddressPools",
        )
        properties.application_security_groups = AAZListType(
            serialized_name="applicationSecurityGroups",
        )
        properties.gateway_load_balancer = AAZObjectType(
            serialized_name="gatewayLoadBalancer",
        )
        cls._build_schema_sub_resource_read(properties.gateway_load_balancer)
        properties.load_balancer_backend_address_pools = AAZListType(
            serialized_name="loadBalancerBackendAddressPools",
        )
        properties.load_balancer_inbound_nat_rules = AAZListType(
            serialized_name="loadBalancerInboundNatRules",
        )
        properties.primary = AAZBoolType()
        properties.private_ip_address = AAZStrType(
            serialized_name="privateIPAddress",
        )
        properties.private_ip_address_version = AAZStrType(
            serialized_name="privateIPAddressVersion",
        )
        properties.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIPAllocationMethod",
        )
        properties.private_link_connection_properties = AAZObjectType(
            serialized_name="privateLinkConnectionProperties",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_ip_address = AAZObjectType(
            serialized_name="publicIPAddress",
        )
        cls._build_schema_public_ip_address_read(properties.public_ip_address)
        properties.subnet = AAZObjectType()
        cls._build_schema_subnet_read(properties.subnet)
        properties.virtual_network_taps = AAZListType(
            serialized_name="virtualNetworkTaps",
        )

        application_gateway_backend_address_pools = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools
        application_gateway_backend_address_pools.Element = AAZObjectType()

        _element = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties
        properties.backend_addresses = AAZListType(
            serialized_name="backendAddresses",
        )
        properties.backend_ip_configurations = AAZListType(
            serialized_name="backendIPConfigurations",
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        backend_addresses = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties.backend_addresses
        backend_addresses.Element = AAZObjectType()

        _element = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties.backend_addresses.Element
        _element.fqdn = AAZStrType()
        _element.ip_address = AAZStrType(
            serialized_name="ipAddress",
        )

        backend_ip_configurations = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties.backend_ip_configurations
        backend_ip_configurations.Element = AAZObjectType()
        cls._build_schema_network_interface_ip_configuration_read(backend_ip_configurations.Element)

        application_security_groups = _schema_network_interface_ip_configuration_read.properties.application_security_groups
        application_security_groups.Element = AAZObjectType()
        cls._build_schema_application_security_group_read(application_security_groups.Element)

        load_balancer_backend_address_pools = _schema_network_interface_ip_configuration_read.properties.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectType()
        cls._build_schema_backend_address_pool_read(load_balancer_backend_address_pools.Element)

        load_balancer_inbound_nat_rules = _schema_network_interface_ip_configuration_read.properties.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectType()

        _element = _schema_network_interface_ip_configuration_read.properties.load_balancer_inbound_nat_rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_network_interface_ip_configuration_read.properties.load_balancer_inbound_nat_rules.Element.properties
        properties.backend_address_pool = AAZObjectType(
            serialized_name="backendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.backend_address_pool)
        properties.backend_ip_configuration = AAZObjectType(
            serialized_name="backendIPConfiguration",
        )
        cls._build_schema_network_interface_ip_configuration_read(properties.backend_ip_configuration)
        properties.backend_port = AAZIntType(
            serialized_name="backendPort",
        )
        properties.enable_floating_ip = AAZBoolType(
            serialized_name="enableFloatingIP",
        )
        properties.enable_tcp_reset = AAZBoolType(
            serialized_name="enableTcpReset",
        )
        properties.frontend_ip_configuration = AAZObjectType(
            serialized_name="frontendIPConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.frontend_ip_configuration)
        properties.frontend_port = AAZIntType(
            serialized_name="frontendPort",
        )
        properties.frontend_port_range_end = AAZIntType(
            serialized_name="frontendPortRangeEnd",
        )
        properties.frontend_port_range_start = AAZIntType(
            serialized_name="frontendPortRangeStart",
        )
        properties.idle_timeout_in_minutes = AAZIntType(
            serialized_name="idleTimeoutInMinutes",
        )
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        private_link_connection_properties = _schema_network_interface_ip_configuration_read.properties.private_link_connection_properties
        private_link_connection_properties.fqdns = AAZListType(
            flags={"read_only": True},
        )
        private_link_connection_properties.group_id = AAZStrType(
            serialized_name="groupId",
            flags={"read_only": True},
        )
        private_link_connection_properties.required_member_name = AAZStrType(
            serialized_name="requiredMemberName",
            flags={"read_only": True},
        )

        fqdns = _schema_network_interface_ip_configuration_read.properties.private_link_connection_properties.fqdns
        fqdns.Element = AAZStrType()

        virtual_network_taps = _schema_network_interface_ip_configuration_read.properties.virtual_network_taps
        virtual_network_taps.Element = AAZObjectType()
        cls._build_schema_virtual_network_tap_read(virtual_network_taps.Element)

        _schema.etag = cls._schema_network_interface_ip_configuration_read.etag
        _schema.id = cls._schema_network_interface_ip_configuration_read.id
        _schema.name = cls._schema_network_interface_ip_configuration_read.name
        _schema.properties = cls._schema_network_interface_ip_configuration_read.properties
        _schema.type = cls._schema_network_interface_ip_configuration_read.type


@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_backend_address_pool_read", "..__cmds"),
    ("_build_schema_extended_location_read", "..__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_private_endpoint_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _CreateHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_backend_address_pool_read", "..__cmds"),
    ("_build_schema_extended_location_read", "..__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_private_endpoint_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _ListHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_backend_address_pool_read", "..__cmds"),
    ("_build_schema_extended_location_read", "..__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_private_endpoint_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _ShowHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_backend_address_pool_read", "..__cmds"),
    ("_build_schema_extended_location_read", "..__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_private_endpoint_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _UpdateHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "..__cmds"),
    ("_build_schema_backend_address_pool_read", "..__cmds"),
    ("_build_schema_extended_location_read", "..__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "..__cmds"),
    ("_build_schema_ip_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "..__cmds"),
    ("_build_schema_network_interface_read", "..__cmds"),
    ("_build_schema_network_security_group_read", "..__cmds"),
    ("_build_schema_private_endpoint_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "..__cmds"),
    ("_build_schema_private_link_service_connection_read", "..__cmds"),
    ("_build_schema_public_ip_address_read", "..__cmds"),
    ("_build_schema_security_rule_read", "..__cmds"),
    ("_build_schema_sub_resource_read", "..__cmds"),
    ("_build_schema_subnet_read", "..__cmds"),
    ("_build_schema_virtual_network_tap_read", "..__cmds"),
)
class _WaitHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



__all__ = ["Create","Delete","List","Show","Update","Wait","__CMDGroup"]
