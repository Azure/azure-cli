# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sql server create",
)
class Create(AAZCommand):
    """Create a server.

    :example: Create server
        az sql server create --resource-group sqlcrudtest-7398 --server-name sqlcrudtest-4645 --create-mode Normal --administrator-login dummylogin --administrator-login-password PLACEHOLDER --administrators "{principal-type:User,login:bob@contoso.com,sid:00000011-1111-2222-2222-123456789111,tenant-id:00000011-1111-2222-2222-123456789111,azure-ad-only-authentication:True}" --public-network-access Enabled --restrict-outbound-network-access Enabled --is-i-pv6-enabled Enabled --location Japan East

    :example: Restore server
        az sql server create --resource-group sqlcrudtest-7398 --server-name sqlcrudtest-4645 --create-mode Restore --administrator-login dummylogin --administrator-login-password PLACEHOLDER --administrators "{principal-type:User,login:bob@contoso.com,sid:00000011-1111-2222-2222-123456789111,tenant-id:00000011-1111-2222-2222-123456789111,azure-ad-only-authentication:True}" --public-network-access Enabled --restrict-outbound-network-access Enabled --is-i-pv6-enabled Enabled --location Japan East
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.sql/servers/{}", "2024-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.server_name = AAZStrArg(
            options=["-n", "--name", "--server-name"],
            help="The name of the server.",
            required=True,
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="Resource location.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.administrator_login = AAZStrArg(
            options=["--administrator-login"],
            arg_group="Properties",
            help="Administrator username for the server. Once created it cannot be changed.",
        )
        _args_schema.administrator_login_password = AAZStrArg(
            options=["--administrator-login-password"],
            arg_group="Properties",
            help="The administrator login password (required for server creation).",
        )
        _args_schema.administrators = AAZObjectArg(
            options=["--administrators"],
            arg_group="Properties",
            help="The Azure Active Directory administrator of the server. This can only be used at server create time. If used for server update, it will be ignored or it will result in an error. For updates individual APIs will need to be used.",
        )
        _args_schema.create_mode = AAZStrArg(
            options=["--create-mode"],
            arg_group="Properties",
            help="Create mode for server, only valid values for this are Normal and Restore.",
            enum={"DatabaseMigrationV1": "DatabaseMigrationV1", "Normal": "Normal", "Restore": "Restore", "ServerMigration": "ServerMigration", "ServerMigrationV1": "ServerMigrationV1", "Standby": "Standby"},
        )
        _args_schema.federated_client_id = AAZUuidArg(
            options=["--federated-client-id"],
            arg_group="Properties",
            help="The Client id used for cross tenant CMK scenario",
        )
        _args_schema.is_i_pv6_enabled = AAZStrArg(
            options=["--is-i-pv6-enabled"],
            arg_group="Properties",
            help="Whether or not to enable IPv6 support for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.key_id = AAZStrArg(
            options=["--key-id"],
            arg_group="Properties",
            help="A CMK URI of the key to use for encryption.",
        )
        _args_schema.minimal_tls_version = AAZStrArg(
            options=["--minimal-tls-version"],
            arg_group="Properties",
            help="Minimal TLS version. Allowed values: 'None', 1.0', '1.1', '1.2', '1.3'",
            enum={"1.0": "1.0", "1.1": "1.1", "1.2": "1.2", "1.3": "1.3", "None": "None"},
        )
        _args_schema.primary_user_assigned_identity_id = AAZStrArg(
            options=["--primary-user-assigned-identity-id"],
            arg_group="Properties",
            help="The resource id of a user assigned identity to be used by default.",
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled' or 'SecuredByPerimeter'",
            enum={"Disabled": "Disabled", "Enabled": "Enabled", "SecuredByPerimeter": "SecuredByPerimeter"},
        )
        _args_schema.restrict_outbound_network_access = AAZStrArg(
            options=["--restrict-outbound-network-access"],
            arg_group="Properties",
            help="Whether or not to restrict outbound network access for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.retention_days = AAZIntArg(
            options=["--retention-days"],
            arg_group="Properties",
            help="Number of days this server will stay soft-deleted.",
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="The version of the server.",
        )

        administrators = cls._args_schema.administrators
        administrators.administrator_type = AAZStrArg(
            options=["administrator-type"],
            help="Type of the sever administrator.",
            enum={"ActiveDirectory": "ActiveDirectory"},
        )
        administrators.azure_ad_only_authentication = AAZBoolArg(
            options=["azure-ad-only-authentication"],
            help="Azure Active Directory only Authentication enabled.",
        )
        administrators.login = AAZStrArg(
            options=["login"],
            help="Login name of the server administrator.",
        )
        administrators.principal_type = AAZStrArg(
            options=["principal-type"],
            help="Principal Type of the sever administrator.",
            enum={"Application": "Application", "Group": "Group", "User": "User"},
        )
        administrators.sid = AAZUuidArg(
            options=["sid"],
            help="SID (object ID) of the server administrator.",
        )
        administrators.tenant_id = AAZUuidArg(
            options=["tenant-id"],
            help="Tenant ID of the administrator.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ServersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ServersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serverName", self.ctx.args.server_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("administratorLogin", AAZStrType, ".administrator_login")
                properties.set_prop("administratorLoginPassword", AAZStrType, ".administrator_login_password", typ_kwargs={"flags": {"secret": True}})
                properties.set_prop("administrators", AAZObjectType, ".administrators")
                properties.set_prop("createMode", AAZStrType, ".create_mode")
                properties.set_prop("federatedClientId", AAZStrType, ".federated_client_id")
                properties.set_prop("isIPv6Enabled", AAZStrType, ".is_i_pv6_enabled")
                properties.set_prop("keyId", AAZStrType, ".key_id")
                properties.set_prop("minimalTlsVersion", AAZStrType, ".minimal_tls_version")
                properties.set_prop("primaryUserAssignedIdentityId", AAZStrType, ".primary_user_assigned_identity_id")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("restrictOutboundNetworkAccess", AAZStrType, ".restrict_outbound_network_access")
                properties.set_prop("retentionDays", AAZIntType, ".retention_days")
                properties.set_prop("version", AAZStrType, ".version")

            administrators = _builder.get(".properties.administrators")
            if administrators is not None:
                administrators.set_prop("administratorType", AAZStrType, ".administrator_type")
                administrators.set_prop("azureADOnlyAuthentication", AAZBoolType, ".azure_ad_only_authentication")
                administrators.set_prop("login", AAZStrType, ".login")
                administrators.set_prop("principalType", AAZStrType, ".principal_type")
                administrators.set_prop("sid", AAZStrType, ".sid")
                administrators.set_prop("tenantId", AAZStrType, ".tenant_id")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZIdentityObjectType()
            _schema_on_200_201.kind = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType()
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrator_login = AAZStrType(
                serialized_name="administratorLogin",
            )
            properties.administrators = AAZObjectType()
            properties.create_mode = AAZStrType(
                serialized_name="createMode",
            )
            properties.external_governance_status = AAZStrType(
                serialized_name="externalGovernanceStatus",
                flags={"read_only": True},
            )
            properties.federated_client_id = AAZStrType(
                serialized_name="federatedClientId",
            )
            properties.fully_qualified_domain_name = AAZStrType(
                serialized_name="fullyQualifiedDomainName",
                flags={"read_only": True},
            )
            properties.is_i_pv6_enabled = AAZStrType(
                serialized_name="isIPv6Enabled",
            )
            properties.key_id = AAZStrType(
                serialized_name="keyId",
            )
            properties.minimal_tls_version = AAZStrType(
                serialized_name="minimalTlsVersion",
            )
            properties.primary_user_assigned_identity_id = AAZStrType(
                serialized_name="primaryUserAssignedIdentityId",
            )
            properties.private_endpoint_connections = AAZListType(
                serialized_name="privateEndpointConnections",
                flags={"read_only": True},
            )
            properties.public_network_access = AAZStrType(
                serialized_name="publicNetworkAccess",
            )
            properties.restrict_outbound_network_access = AAZStrType(
                serialized_name="restrictOutboundNetworkAccess",
            )
            properties.retention_days = AAZIntType(
                serialized_name="retentionDays",
            )
            properties.state = AAZStrType(
                flags={"read_only": True},
            )
            properties.version = AAZStrType()
            properties.workspace_feature = AAZStrType(
                serialized_name="workspaceFeature",
                flags={"read_only": True},
            )

            administrators = cls._schema_on_200_201.properties.administrators
            administrators.administrator_type = AAZStrType(
                serialized_name="administratorType",
            )
            administrators.azure_ad_only_authentication = AAZBoolType(
                serialized_name="azureADOnlyAuthentication",
            )
            administrators.login = AAZStrType()
            administrators.principal_type = AAZStrType(
                serialized_name="principalType",
            )
            administrators.sid = AAZStrType()
            administrators.tenant_id = AAZStrType(
                serialized_name="tenantId",
            )

            private_endpoint_connections = cls._schema_on_200_201.properties.private_endpoint_connections
            private_endpoint_connections.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.private_endpoint_connections.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties
            properties.group_ids = AAZListType(
                serialized_name="groupIds",
                flags={"read_only": True},
            )
            properties.private_endpoint = AAZObjectType(
                serialized_name="privateEndpoint",
            )
            properties.private_link_service_connection_state = AAZObjectType(
                serialized_name="privateLinkServiceConnectionState",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            group_ids = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.group_ids
            group_ids.Element = AAZStrType()

            private_endpoint = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_endpoint
            private_endpoint.id = AAZStrType()

            private_link_service_connection_state = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
            private_link_service_connection_state.actions_required = AAZStrType(
                serialized_name="actionsRequired",
                flags={"read_only": True},
            )
            private_link_service_connection_state.description = AAZStrType(
                flags={"required": True},
            )
            private_link_service_connection_state.status = AAZStrType(
                flags={"required": True},
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
