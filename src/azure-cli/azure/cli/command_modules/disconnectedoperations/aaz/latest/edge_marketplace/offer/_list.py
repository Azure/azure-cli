# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class List(AAZCommand):
    """List Offer resources by parent
    """

    _aaz_info = {
        "version": "2023-08-01-preview",
        "resources": [
            ["mgmt-plane", "/{resourceuri}/providers/microsoft.edgemarketplace/offers", "2023-08-01-preview"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_uri = AAZStrArg(
            options=["--resource-uri"],
            help="The fully qualified Azure Resource manager identifier of the resource.",
            required=True,
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="Filter the result list using the given expression.",
        )
        _args_schema.maxpagesize = AAZIntArg(
            options=["--maxpagesize"],
            help="The maximum number of result items per page.",
        )
        _args_schema.skip = AAZIntArg(
            options=["--skip"],
            help="The number of result items to skip.",
            default=0,
        )
        _args_schema.skip_token = AAZStrArg(
            options=["--skip-token"],
            help="Skip over when retrieving results.",
        )
        _args_schema.top = AAZIntArg(
            options=["--top"],
            help="The number of result items to return.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OffersList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class OffersList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.EdgeMarketplace/offers",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "$skipToken", self.ctx.args.skip_token,
                ),
                **self.serialize_query_param(
                    "$top", self.ctx.args.top,
                ),
                **self.serialize_query_param(
                    "maxpagesize", self.ctx.args.maxpagesize,
                ),
                **self.serialize_query_param(
                    "skip", self.ctx.args.skip,
                ),
                **self.serialize_query_param(
                    "api-version", "2023-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.content_url = AAZStrType(
                serialized_name="contentUrl",
            )
            properties.content_version = AAZStrType(
                serialized_name="contentVersion",
            )
            properties.marketplace_skus = AAZListType(
                serialized_name="marketplaceSkus",
            )
            properties.offer_content = AAZObjectType(
                serialized_name="offerContent",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            marketplace_skus = cls._schema_on_200.value.Element.properties.marketplace_skus
            marketplace_skus.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.marketplace_skus.Element
            _element.catalog_plan_id = AAZStrType(
                serialized_name="catalogPlanId",
                flags={"required": True},
            )
            _element.description = AAZStrType()
            _element.display_name = AAZStrType(
                serialized_name="displayName",
            )
            _element.display_rank = AAZIntType(
                serialized_name="displayRank",
            )
            _element.generation = AAZStrType()
            _element.long_summary = AAZStrType(
                serialized_name="longSummary",
            )
            _element.marketplace_sku_id = AAZStrType(
                serialized_name="marketplaceSkuId",
                flags={"required": True},
            )
            _element.marketplace_sku_versions = AAZListType(
                serialized_name="marketplaceSkuVersions",
            )
            _element.operating_system = AAZObjectType(
                serialized_name="operatingSystem",
            )
            _element.summary = AAZStrType()
            _element.type = AAZStrType()

            marketplace_sku_versions = cls._schema_on_200.value.Element.properties.marketplace_skus.Element.marketplace_sku_versions
            marketplace_sku_versions.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.marketplace_skus.Element.marketplace_sku_versions.Element
            _element.minimum_download_size_in_mb = AAZIntType(
                serialized_name="minimumDownloadSizeInMb",
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.size_on_disk_in_mb = AAZIntType(
                serialized_name="sizeOnDiskInMb",
            )
            _element.stage_name = AAZStrType(
                serialized_name="stageName",
            )

            operating_system = cls._schema_on_200.value.Element.properties.marketplace_skus.Element.operating_system
            operating_system.family = AAZStrType()
            operating_system.name = AAZStrType(
                flags={"required": True},
            )
            operating_system.type = AAZStrType()

            offer_content = cls._schema_on_200.value.Element.properties.offer_content
            offer_content.availability = AAZStrType()
            offer_content.category_ids = AAZListType(
                serialized_name="categoryIds",
            )
            offer_content.description = AAZStrType()
            offer_content.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            offer_content.icon_file_uris = AAZObjectType(
                serialized_name="iconFileUris",
            )
            offer_content.long_summary = AAZStrType(
                serialized_name="longSummary",
            )
            offer_content.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_content.offer_publisher = AAZObjectType(
                serialized_name="offerPublisher",
            )
            offer_content.offer_type = AAZStrType(
                serialized_name="offerType",
            )
            offer_content.operating_systems = AAZListType(
                serialized_name="operatingSystems",
            )
            offer_content.popularity = AAZIntType()
            offer_content.release_type = AAZStrType(
                serialized_name="releaseType",
            )
            offer_content.summary = AAZStrType()
            offer_content.support_uri = AAZStrType(
                serialized_name="supportUri",
            )
            offer_content.terms_and_conditions = AAZObjectType(
                serialized_name="termsAndConditions",
            )

            category_ids = cls._schema_on_200.value.Element.properties.offer_content.category_ids
            category_ids.Element = AAZStrType()

            icon_file_uris = cls._schema_on_200.value.Element.properties.offer_content.icon_file_uris
            icon_file_uris.large = AAZStrType()
            icon_file_uris.medium = AAZStrType()
            icon_file_uris.small = AAZStrType()
            icon_file_uris.wide = AAZStrType()

            offer_publisher = cls._schema_on_200.value.Element.properties.offer_content.offer_publisher
            offer_publisher.publisher_display_name = AAZStrType(
                serialized_name="publisherDisplayName",
                flags={"required": True},
            )
            offer_publisher.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )

            operating_systems = cls._schema_on_200.value.Element.properties.offer_content.operating_systems
            operating_systems.Element = AAZStrType()

            terms_and_conditions = cls._schema_on_200.value.Element.properties.offer_content.terms_and_conditions
            terms_and_conditions.legal_terms_type = AAZStrType(
                serialized_name="legalTermsType",
            )
            terms_and_conditions.legal_terms_uri = AAZStrType(
                serialized_name="legalTermsUri",
            )
            terms_and_conditions.privacy_policy_uri = AAZStrType(
                serialized_name="privacyPolicyUri",
            )

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
