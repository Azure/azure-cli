# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_application_gateway_backend_health_on_demand
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    # STEP NOT FOUND: /ApplicationGateways/put/Create Application Gateway
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Ssl Predefined Policy by name
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Ssl Predefined Policies
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Ssl Options
    # STEP NOT FOUND: /ApplicationGateways/get/Get ApplicationGateway
    # STEP NOT FOUND: /ApplicationGateways/get/Lists all application gateways in a resource group
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Server Variables
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Response Headers
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Request Headers
    # STEP NOT FOUND: /ApplicationGateways/get/Get Available Waf Rule Sets
    # STEP NOT FOUND: /ApplicationGateways/get/Lists all application gateways in a subscription
    step_application_gateway_backend_health_on_demand(test, checks=[])
    # STEP NOT FOUND: /ApplicationGateways/post/Get Backend Health
    # STEP NOT FOUND: /ApplicationGateways/post/Start Application Gateway
    # STEP NOT FOUND: /ApplicationGateways/post/Stop Application Gateway
    # STEP NOT FOUND: /ApplicationGateways/patch/Update Application Gateway tags
    # STEP NOT FOUND: /ApplicationGateways/delete/Delete ApplicationGateway
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class ApplicationgatewaysScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(ApplicationgatewaysScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myApplicationGateway': 'appgw',
            'myNetworkInterface': 'nic1',
            'myPublicIpAddress': 'pub1',
            'myCustomIpPrefix': 'test-customipprefix',
            'myInboundNatRule': self.create_random_name(prefix='natRule1.1'[:5], length=10),
            'myDefaultSecurityRule': 'AllowVnetInBound',
            'myNetworkWatcher': 'nw1',
            'myVirtualNetwork': 'vnetName',
            'mySubnet': 'subnet1',
            'myVirtualNetworkGatewayConnection': 'vpngw',
            'myVpnSiteLink': 'vpnSiteLink1',
            'myVpnConnection': 'vpnConnection1',
            'myP2sVpnGateway': 'p2svpngateway',
            'myVirtualNetworkGateway': 'vpngateway',
        })

    @ResourceGroupPreparer(name_prefix='clitestnetwork_rg1'[:7], key='rg', parameter_name='rg')
    def test_applicationgateways_Scenario(self, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
