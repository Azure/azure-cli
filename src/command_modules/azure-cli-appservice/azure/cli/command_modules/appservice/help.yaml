version: 1
content:
- group:
    name: appservice
    summary: Manage App Service plans.
- group:
    name: webapp
    summary: Manage web apps.
- group:
    name: webapp auth
    summary: Manage webapp authentication and authorization
- command:
    name: webapp auth show
    summary: Show the authentification settings for the webapp.
- command:
    name: webapp auth update
    summary: Update the authentication settings for the webapp.
    examples:
    - summary: Enable AAD by enabling authentication and setting AAD-associated parameters. Default provider is set to AAD. Must have created a AAD service principal beforehand.
      command: >
        az webapp auth update  -g myResourceGroup -n myUniqueApp --enabled true \
          --action LoginWithAzureActiveDirectory \
          --aad-allowed-token-audiences https://webapp_name.azurewebsites.net/.auth/login/aad/callback \
          --aad-client-id ecbacb08-df8b-450d-82b3-3fced03f2b27 --aad-client-secret very_secret_password \
          --aad-token-issuer-url https://sts.windows.net/54826b22-38d6-4fb2-bad9-b7983a3e9c5a/
    - summary: Allow Facebook authentication by setting FB-associated parameters and turning on public-profile and email scopes; allow anonymous users
      command: >
        az webapp auth update -g myResourceGroup -n myUniqueApp --action AllowAnonymous \
          --facebook-app-id my_fb_id --facebook-app-secret my_fb_secret \
          --facebook-oauth-scopes public_profile email
- command:
    name: webapp identity assign
    summary: assign or disable managed service identity to the webapp
    examples:
    - summary: assign local identity and assign a reader role to the current resource group.
      command: >
        az webapp identity assign -g MyResourceGroup -n MyUniqueApp --role reader --scope /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/MyResourceGroup
    - summary: enable identity for the webapp.
      command: >
        az webapp identity assign -g MyResourceGroup -n MyUniqueApp
- group:
    name: webapp identity
    summary: manage webapp's managed service identity
- command:
    name: webapp identity show
    summary: display webapp's managed service identity
- command:
    name: webapp identity remove
    summary: Disable webapp's managed service identity
- group:
    name: functionapp identity
    summary: manage functionapp's managed service identity
- command:
    name: functionapp identity assign
    summary: assign or disable managed service identity to the functionapp
    examples:
    - summary: assign local identity and assign a reader role to the current resource group.
      command: >
        az functionapp identity assign -g MyResourceGroup -n MyUniqueApp --role reader --scope /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/MyResourceGroup
    - summary: enable identity for the functionapp.
      command: >
        az functionapp identity assign -g MyResourceGroup -n MyUniqueApp
- command:
    name: functionapp identity show
    summary: display functionapp's managed service identity
- command:
    name: functionapp identity remove
    summary: Disable functionapp's managed service identity
- group:
    name: webapp config
    summary: Configure a web app.
- command:
    name: webapp config show
    summary: Get the details of a web app's configuration.
- command:
    name: webapp config set
    summary: Set a web app's configuration.
- group:
    name: webapp config appsettings
    summary: Configure web app settings.
- command:
    name: webapp config appsettings delete
    summary: Delete web app settings.
- command:
    name: webapp config appsettings list
    summary: Get the details of a web app's settings.
- command:
    name: webapp config appsettings set
    summary: Set a web app's settings.
    examples:
    - summary: Set the default NodeJS version to 6.9.1 for a web app.
      command: >
        az webapp config appsettings set -g MyResourceGroup -n MyUniqueApp --settings WEBSITE_NODE_DEFAULT_VERSION=6.9.1
- group:
    name: webapp config storage-account
    summary: Manage a web app's Azure storage account configurations. (Linux Web Apps and Windows Containers Web Apps Only)
- command:
    name: webapp config storage-account list
    summary: Get a web app's Azure storage account configurations. (Linux Web Apps and Windows Containers Web Apps Only)
- command:
    name: webapp config storage-account add
    summary: Add an Azure storage account configuration to a web app. (Linux Web Apps and Windows Containers Web Apps Only)
    examples:
    - summary: Add a connection to the Azure Files file share called MyShare in the storage account named MyStorageAccount.
      command: >
        az webapp config storage-account add -g MyResourceGroup -n MyUniqueApp \
          --custom-id CustomId \
          --storage-type AzureFiles \
          --account-name MyStorageAccount \
          --share-name MyShare \
          --access-key MyAccessKey \
          --mount-path /path/to/mount
- command:
    name: webapp config storage-account update
    summary: Update an existing Azure storage account configuration on a web app. (Linux Web Apps and Windows Containers Web Apps Only)
    examples:
    - summary: Update the mount path for a connection to the Azure Files file share with the ID MyId.
      command: >
        az webapp config storage-account update -g MyResourceGroup -n MyUniqueApp \
          --custom-id CustomId \
          --mount-path /path/to/new/mount
- command:
    name: webapp config storage-account delete
    summary: Delete a web app's Azure storage account configuration. (Linux Web Apps and Windows Containers Web Apps Only)
- group:
    name: webapp config connection-string
    summary: Manage a web app's connection strings.
- command:
    name: webapp config connection-string list
    summary: Get a web app's connection strings.
- command:
    name: webapp config connection-string delete
    summary: Delete a web app's connection strings.
- command:
    name: webapp config connection-string set
    summary: Update a web app's connection strings.
    examples:
    - summary: Add a mysql connection string.
      command: >
        az webapp config connection-string set -g MyResourceGroup -n MyUniqueApp -t mysql \
            --settings mysql1='Server=myServer;Database=myDB;Uid=myUser;Pwd=myPwd;'
- group:
    name: webapp config container
    summary: Manage web app container settings.
- command:
    name: webapp config container show
    summary: Get details of a web app container's settings.
- command:
    name: webapp config container set
    summary: Set a web app container's settings.
- command:
    name: webapp config container delete
    summary: Delete a web app container's settings.
- group:
    name: webapp config ssl
    summary: Configure SSL certificates for web apps.
- command:
    name: webapp config ssl list
    summary: List SSL certificates for a web app.
- command:
    name: webapp config ssl bind
    summary: Bind an SSL certificate to a web app.
- command:
    name: webapp config ssl unbind
    summary: Unbind an SSL certificate from a web app.
- command:
    name: webapp config ssl delete
    summary: Delete an SSL certificate from a web app.
- command:
    name: webapp config ssl upload
    summary: Upload an SSL certificate to a web app.
- group:
    name: webapp config snapshot
    summary: Manage web app snapshots.
- command:
    name: webapp config snapshot list
    summary: List the restorable snapshots for a web app.
- command:
    name: webapp config snapshot restore
    summary: Restore a web app snapshot.
    examples:
    - summary: Restore web app files from a snapshot. Overwrites the web app's current files and settings.
      command: >
        az webapp config snapshot restore -g MyResourceGroup -n MySite --time 2018-12-11T23:34:16.8388367
    - summary: Restore a snapshot of web app SourceApp to web app TargetApp. Use --restore-content-only to not restore app settings. Overwrites TargetApp's files.
      command: >
        az webapp config snapshot restore -g TargetResourceGroup -n TargetApp --source-name SourceApp --source-resource-group OriginalResourceGroup --time 2018-12-11T23:34:16.8388367 --restore-content-only
- group:
    name: webapp deployment
    summary: Manage web app deployments.
- group:
    name: webapp deployment slot
    summary: Manage web app deployment slots.
- command:
    name: webapp deployment slot auto-swap
    summary: Configure deployment slot auto swap.
- group:
    name: webapp log
    summary: Manage web app logs.
- command:
    name: webapp log config
    summary: Configure logging for a web app.
- command:
    name: webapp log show
    summary: Get the details of a web app's logging configuration.
- command:
    name: webapp log download
    summary: Download a web app's log history as a zip file.
    description: This command may not work with web apps running on Linux.
- command:
    name: webapp log tail
    summary: Start live log tracing for a web app.
    description: This command may not work with web apps running on Linux.
- command:
    name: webapp deployment list-publishing-profiles
    summary: Get the details for available web app deployment profiles.
- group:
    name: webapp deployment container
    summary: Manage container-based continuous deployment.
- command:
    name: webapp deployment container config
    summary: Configure continuous deployment via containers.
- command:
    name: webapp deployment container show-cd-url
    summary: Get the URL which can be used to configure webhooks for continuous deployment.
- command:
    name: webapp deployment slot create
    summary: Create a deployment slot.
- command:
    name: webapp deployment slot swap
    summary: Change deployment slots for a web app.
    examples:
    - summary: Swap a staging slot into production for the MyUniqueApp web app.
      command: >
        az webapp deployment slot swap  -g MyResourceGroup -n MyUniqueApp --slot staging \
            --target-slot production
- command:
    name: webapp deployment slot list
    summary: List all deployment slots.
- command:
    name: webapp deployment slot delete
    summary: Delete a deployment slot.
- group:
    name: webapp deployment user
    summary: Manage user credentials for deployment.
- command:
    name: webapp deployment user set
    summary: Update deployment credentials.
    description: All function and web apps in the subscription will be impacted since they share the same deployment credentials.
    examples:
    - summary: Set FTP and git deployment credentials for all apps.
      command: >
        az webapp deployment user set --user-name MyUserName
- group:
    name: webapp deployment source
    summary: Manage web app deployment via source control.
- command:
    name: webapp deployment source config
    summary: Manage deployment from git or Mercurial repositories.
- command:
    name: webapp deployment source config-local-git
    summary: Get a URL for a git repository endpoint to clone and push to for web app deployment.
    examples:
    - summary: Get an endpoint and add it as a git remote.
      command: >
        az webapp deployment source config-local-git \
            -g MyResourceGroup -n MyUniqueApp

        git remote add azure \
            https://<deploy_user_name>@MyUniqueApp.scm.azurewebsites.net/MyUniqueApp.git
- command:
    name: webapp deployment source config-zip
    summary: Perform deployment using the kudu zip push deployment for a webapp.
    description: >
      By default Kudu assumes that zip deployments do not require any build-related actions like
      npm install or dotnet publish. This can be overridden by including a .deployment file in your
      zip file with the following content '[config] SCM_DO_BUILD_DURING_DEPLOYMENT = true',
      to enable Kudu detection logic and build script generation process.
      See https://github.com/projectkudu/kudu/wiki/Configurable-settings#enabledisable-build-actions-preview.
      Alternately the setting can be enabled using the az webapp config appsettings set command.
    examples:
    - summary: Perform deployment by using zip file content.
      command: >
        az webapp deployment source config-zip \
            -g {myRG} -n {myAppName} \
            --src {zipFilePathLocation}
- command:
    name: webapp deployment source delete
    summary: Delete a source control deployment configuration.
- command:
    name: webapp deployment source show
    summary: Get the details of a source control deployment configuration.
- command:
    name: webapp deployment source sync
    summary: Synchronize from the repository. Only needed under manual integration mode.
- group:
    name: webapp traffic-routing
    summary: Manage traffic routing for web apps.
- command:
    name: webapp traffic-routing set
    summary: Configure routing traffic to deployment slots.
- command:
    name: webapp traffic-routing show
    summary: Display the current distribution of traffic across slots.
- command:
    name: webapp traffic-routing clear
    summary: Clear the routing rules and send all traffic to production.
- group:
    name: webapp cors
    summary: Manage Cross-Origin Resource Sharing (CORS)
- command:
    name: webapp cors add
    summary: Add allowed origins
    examples:
    - summary: add a new allowed origin
      command: >
        az webapp cors add -g <myRG> -n <myAppName> --allowed-origins https://myapps.com
- command:
    name: webapp cors remove
    summary: Remove allowed origins
    examples:
    - summary: remove an allowed origin
      command: >
        az webapp cors remove -g <myRG> -n <myAppName> --allowed-origins https://myapps.com
    - summary: remove all allowed origins
      command: >
        az webapp cors remove -g <myRG> -n <myAppName> --allowed-origins *
- command:
    name: webapp cors show
    summary: show allowed origins
- group:
    name: appservice plan
    summary: Manage app service plans.
- command:
    name: appservice list-locations
    summary: List regions where a plan sku is available.
- command:
    name: appservice plan update
    summary: Update an app service plan.
- command:
    name: appservice plan create
    summary: Create an app service plan.
    examples:
    - summary: Create a basic app service plan.
      command: >
        az appservice plan create -g MyResourceGroup -n MyPlan
    - summary: Create a standard app service plan with with four Linux workers.
      command: >
        az appservice plan create -g MyResourceGroup -n MyPlan \
            --is-linux --number-of-workers 4 --sku S1
- command:
    name: appservice plan delete
    summary: Delete an app service plan.
- command:
    name: appservice plan list
    summary: List app service plans.
    examples:
    - summary: List all free tier App Service plans.
      command: >
        az appservice plan list --query "[?sku.tier=='Free']"
- command:
    name: appservice plan show
    summary: Get the app service plans for a resource group or a set of resource groups.
- group:
    name: webapp config hostname
    summary: Configure hostnames for a web app.
- command:
    name: webapp config hostname add
    summary: Bind a hostname to a web app.
- command:
    name: webapp config hostname delete
    summary: Unbind a hostname from a web app.
- command:
    name: webapp config hostname list
    summary: List all hostname bindings for a web app.
- command:
    name: webapp config hostname get-external-ip
    summary: Get the external-facing IP address for a web app.
- group:
    name: webapp config backup
    summary: Manage backups for web apps.
- command:
    name: webapp config backup list
    summary: List backups of a web app.
- command:
    name: webapp config backup create
    summary: Create a backup of a web app.
- command:
    name: webapp config backup show
    summary: Show the backup schedule for a web app.
- command:
    name: webapp config backup update
    summary: Configure a new backup schedule for a web app.
- command:
    name: webapp config backup restore
    summary: Restore a web app from a backup.
- group:
    name: webapp webjob
    summary: Allows management operations for webjobs on a webapp.
- group:
    name: webapp webjob continuous
    summary: Allows management operations of continuous webjobs on a webapp.
- command:
    name: webapp webjob continuous list
    summary: List all continuous webjobs on a selected webapp.
- command:
    name: webapp webjob continuous start
    summary: Start a specific continuous webjob on a selected webapp.
- command:
    name: webapp webjob continuous stop
    summary: Stop a specific continuous webjob.
- command:
    name: webapp webjob continuous remove
    summary: Delete a specific continuous webjob.
- group:
    name: webapp webjob triggered
    summary: Allows management operations of triggered webjobs on a webapp.
- command:
    name: webapp webjob triggered list
    summary: List all triggered webjobs hosted on a webapp.
- command:
    name: webapp webjob triggered run
    summary: Run a specific triggered webjob hosted on a webapp.
- command:
    name: webapp webjob triggered remove
    summary: Delete a specific triggered webjob hosted on a webapp.
- command:
    name: webapp webjob triggered log
    summary: Get history of a specific triggered webjob hosted on a webapp.
- command:
    name: webapp browse
    summary: Open a web app in a browser.
- command:
    name: webapp create
    summary: Create a web app.
    description: The web app's name must be able to produce a unique FQDN as AppName.azurewebsites.net.
    examples:
    - summary: Create a web app with the default configuration.
      command: >
        az webapp create -g MyResourceGroup -p MyPlan -n MyUniqueAppName
    - summary: Create a web app with a NodeJS 6.2 runtime and deployed from a local git repository.
      command: >
        az webapp create -g MyResourceGroup -p MyPlan -n MyUniqueAppName --runtime "node|6.2" --deployment-local-git
- command:
    name: webapp ssh
    summary: (Preview) SSH command establishes a ssh session to the web container and developer would get a shell terminal remotely.
    examples:
    - summary: ssh into a webapp
      command: >
        az webapp ssh -n MyUniqueAppName -g MyResourceGroup
- command:
    name: webapp up
    summary: (Preview) Create and deploy existing local code to the webapp, by running the command from the folder where the code is present. Supports running the command in preview mode using --dryrun parameter. Current supports includes Node, Python,.NET Core, ASP.NET, staticHtml. Node, Python apps are created as Linux apps. .Net Core, ASP.NET and static HTML apps are created as Windows apps. If command is run from an empty folder, an empty windows webapp is created.
    examples:
    - summary: View the details of the app that will be created, without actually running the operation
      command: >
        az webapp up -n MyUniqueAppName --dryrun
    - summary: Create a web app with the default configuration, by running the command from the folder where the code to deployed exists.
      command: >
        az webapp up -n MyUniqueAppName
    - summary: Create a web app in a sepcific region, by running the command from the folder where the code to deployed exists.
      command: >
        az webapp up -n MyUniqueAppName -l locationName
    - summary: Deploy new code to an app that was originally created using the same command
      command: >
        az webapp up -n MyUniqueAppName -l locationName
- command:
    name: webapp update
    summary: Update a web app.
    examples:
    - summary: Update the tags of a web app.
      command: >
        az webapp update -g MyResourceGroup -n MyAppName --set tags.tagName=tagValue
- command:
    name: webapp list-runtimes
    summary: List available built-in stacks which can be used for web apps.
- group:
    name: webapp deleted
    summary: Manage deleted web apps.
- command:
    name: webapp deleted list
    summary: List web apps that have been deleted.
- command:
    name: webapp deleted restore
    summary: Restore a deleted web app.
    description: Restores the files and settings of a deleted web app to the specified web app.
    examples:
    - summary: Restore a deleted app to the Staging slot of MySite.
      command: >
        az webapp deleted restore -g MyResourceGroup -n MySite -s Staging --deleted-id /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/deletedSites/1234
    - summary: Restore a deleted app to the app MySite. Do not restore the deleted app's settings.
      command: >
        az webapp deleted restore -g MyResourceGroup -n MySite --deleted-id /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/deletedSites/1234 --restore-content-only
- command:
    name: webapp delete
    summary: Delete a web app.
- command:
    name: webapp list
    summary: List web apps.
    examples:
    - summary: List default host name and state for all web apps.
      command: >
        az webapp list --query "[].{hostName: defaultHostName, state: state}"
    - summary: List all running web apps.
      command: >
        az webapp list --query "[?state=='Running']"
- command:
    name: webapp restart
    summary: Restart a web app.
- command:
    name: webapp start
    summary: Start a web app.
- command:
    name: webapp show
    summary: Get the details of a web app.
- command:
    name: webapp stop
    summary: Stop a web app.
- group:
    name: functionapp
    summary: Manage function apps.
- command:
    name: functionapp create
    summary: Create a function app.
    description: The function app's name must be able to produce a unique FQDN as AppName.azurewebsites.net.
    examples:
    - summary: Create a basic function app.
      command: >
        az functionapp create -g MyResourceGroup  -p MyPlan -n MyUniqueAppName -s MyStorageAccount
- command:
    name: functionapp update
    summary: Update a function app.
- command:
    name: functionapp delete
    summary: Delete a function app.
- command:
    name: functionapp list
    summary: List function apps.
    examples:
    - summary: List default host name and state for all function apps.
      command: >
        az functionapp list --query "[].{hostName: defaultHostName, state: state}"
    - summary: List all running function apps.
      command: >
        az functionapp list --query "[?state=='Running']"
- command:
    name: functionapp restart
    summary: Restart a function app.
- command:
    name: functionapp start
    summary: Start a function app.
- command:
    name: functionapp show
    summary: Get the details of a function app.
- command:
    name: functionapp stop
    summary: Stop a function app.
- command:
    name: functionapp list-consumption-locations
    summary: List available locations for running function apps.
- group:
    name: functionapp config
    summary: Configure a function app.
- group:
    name: functionapp config appsettings
    summary: Configure function app settings.
- command:
    name: functionapp config appsettings list
    summary: Show settings for a function app.
- command:
    name: functionapp config appsettings set
    summary: Update a function app's settings.
- command:
    name: functionapp config appsettings delete
    summary: Delete a function app's settings.
- group:
    name: functionapp config hostname
    summary: Configure hostnames for a function app.
- command:
    name: functionapp config hostname add
    summary: Bind a hostname to a function app.
- command:
    name: functionapp config hostname delete
    summary: Unbind a hostname from a function app.
- command:
    name: functionapp config hostname list
    summary: List all hostname bindings for a function app.
- command:
    name: functionapp config hostname get-external-ip
    summary: Get the external-facing IP address for a function app.
- group:
    name: functionapp config ssl
    summary: Configure SSL certificates.
- command:
    name: functionapp config ssl list
    summary: List SSL certificates for a function app.
- command:
    name: functionapp config ssl bind
    summary: Bind an SSL certificate to a function app.
- command:
    name: functionapp config ssl unbind
    summary: Unbind an SSL certificate from a function app.
- command:
    name: functionapp config ssl delete
    summary: Delete an SSL certificate from a function app.
- command:
    name: functionapp config ssl upload
    summary: Upload an SSL certificate to a function app.
- command:
    name: functionapp config show
    summary: Get the details of a web app's configuration.
- command:
    name: functionapp config set
    summary: Set the web app's configuration.
- group:
    name: functionapp deployment
    summary: Manage function app deployments.
- command:
    name: functionapp deployment list-publishing-profiles
    summary: Get the details for available function app deployment profiles.
- group:
    name: functionapp deployment source
    summary: Manage function app deployment via source control.
- command:
    name: functionapp deployment source config
    summary: Manage deployment from git or Mercurial repositories.
- command:
    name: functionapp deployment source config-local-git
    summary: Get a URL for a git repository endpoint to clone and push to for function app deployment.
    examples:
    - summary: Get an endpoint and add it as a git remote.
      command: >
        az functionapp deployment source config-local-git \
            -g MyResourceGroup -n MyUniqueApp

        git remote add azure \
            https://<deploy_user_name>@MyUniqueApp.scm.azurewebsites.net/MyUniqueApp.git
- command:
    name: functionapp deployment source delete
    summary: Delete a source control deployment configuration.
- command:
    name: functionapp deployment source show
    summary: Get the details of a source control deployment configuration.
- command:
    name: functionapp deployment source sync
    summary: Synchronize from the repository. Only needed under manual integration mode.
- group:
    name: functionapp deployment user
    summary: Manage user credentials for deployment.
- command:
    name: functionapp deployment user set
    summary: Update deployment credentials.
    description: All function and web apps in the subscription will be impacted since they share the same deployment credentials.
    examples:
    - summary: Set FTP and git deployment credentials for all apps.
      command: >
        az functionapp deployment user set
        --user-name MyUserName
- command:
    name: functionapp deployment source config-zip
    summary: Perform deployment using the kudu zip push deployment for a function app.
    description: >
      By default Kudu assumes that zip deployments do not require any build-related actions like
      npm install or dotnet publish. This can be overridden by including an .deployment file in your
      zip file with the following content '[config] SCM_DO_BUILD_DURING_DEPLOYMENT = true',
      to enable Kudu detection logic and build script generation process.
      See https://github.com/projectkudu/kudu/wiki/Configurable-settings#enabledisable-build-actions-preview.
      Alternately the setting can be enabled using the az functionapp config appsettings set command.
    examples:
    - summary: Perform deployment by using zip file content.
      command: >
        az functionapp deployment source config-zip \
            -g {myRG>} -n {myAppName} \
            --src {zipFilePathLocation}
- group:
    name: functionapp cors
    summary: Manage Cross-Origin Resource Sharing (CORS)
- command:
    name: functionapp cors add
    summary: Add allowed origins
    examples:
    - summary: add a new allowed origin
      command: >
        az functionapp cors add -g <myRG> -n <myAppName> --allowed-origins https://myapps.com
- command:
    name: functionapp cors remove
    summary: Remove allowed origins
    examples:
    - summary: remove an allowed origin
      command: >
        az functionapp cors remove -g <myRG> -n <myAppName> --allowed-origins https://myapps.com
    - summary: remove all allowed origins
      command: >
        az functionapp cors remove -g <myRG> -n <myAppName> --allowed-origins *
- command:
    name: functionapp cors show
    summary: show allowed origins
