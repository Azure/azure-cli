# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network application-gateway rewrite-rule set",
)
class __CMDGroup(AAZCommandGroup):
    """Manage rewrite rule sets of an application gateway.
    """
    pass


@register_command(
    "network application-gateway rewrite-rule set create",
)
class Create(AAZCommand):
    """Create a rewrite rule set.

    :example: Create a rewrite rule set.
        az network application-gateway rewrite-rule set create --gateway-name MyGateway --name MyRewriteRuleSet --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.rewriteRuleSets[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the rewrite rule set.",
            required=True,
        )

        # define Arg Group "Parameters.properties.rewriteRuleSets[]"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.rules = AAZListArg(
            options=["--rules"],
            arg_group="Properties",
            help="Rewrite rules in the rewrite rule set.",
        )

        rules = cls._args_schema.rules
        rules.Element = AAZObjectArg()

        _element = cls._args_schema.rules.Element
        _element.action_set = AAZObjectArg(
            options=["action-set"],
            help="Set of actions to be done as part of the rewrite Rule.",
        )
        _element.conditions = AAZListArg(
            options=["conditions"],
            help="Conditions based on which the action set execution will be evaluated.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the rewrite rule that is unique within an Application Gateway.",
        )
        _element.rule_sequence = AAZIntArg(
            options=["rule-sequence"],
            help="Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.",
        )

        action_set = cls._args_schema.rules.Element.action_set
        action_set.request_header_configurations = AAZListArg(
            options=["request-header-configurations"],
            help="Request Header Actions in the Action Set.",
        )
        action_set.response_header_configurations = AAZListArg(
            options=["response-header-configurations"],
            help="Response Header Actions in the Action Set.",
        )
        action_set.url_configuration = AAZObjectArg(
            options=["url-configuration"],
            help="Url Configuration Action in the Action Set.",
        )

        request_header_configurations = cls._args_schema.rules.Element.action_set.request_header_configurations
        request_header_configurations.Element = AAZObjectArg()
        cls._build_args_application_gateway_header_configuration_update(request_header_configurations.Element)

        response_header_configurations = cls._args_schema.rules.Element.action_set.response_header_configurations
        response_header_configurations.Element = AAZObjectArg()
        cls._build_args_application_gateway_header_configuration_update(response_header_configurations.Element)

        url_configuration = cls._args_schema.rules.Element.action_set.url_configuration
        url_configuration.modified_path = AAZStrArg(
            options=["modified-path"],
            help="Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.",
        )
        url_configuration.modified_query_string = AAZStrArg(
            options=["modified-query-string"],
            help="Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.",
        )
        url_configuration.reroute = AAZBoolArg(
            options=["reroute"],
            help="If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.",
        )

        conditions = cls._args_schema.rules.Element.conditions
        conditions.Element = AAZObjectArg()

        _element = cls._args_schema.rules.Element.conditions.Element
        _element.ignore_case = AAZBoolArg(
            options=["ignore-case"],
            help="Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.",
        )
        _element.negate = AAZBoolArg(
            options=["negate"],
            help="Setting this value as truth will force to check the negation of the condition given by the user.",
        )
        _element.pattern = AAZStrArg(
            options=["pattern"],
            help="The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.",
        )
        _element.variable = AAZStrArg(
            options=["variable"],
            help="The condition parameter of the RewriteRuleCondition.",
        )
        return cls._args_schema

    _args_application_gateway_header_configuration_update = None

    @classmethod
    def _build_args_application_gateway_header_configuration_update(cls, _schema):
        if cls._args_application_gateway_header_configuration_update is not None:
            _schema.header_name = cls._args_application_gateway_header_configuration_update.header_name
            _schema.header_value = cls._args_application_gateway_header_configuration_update.header_value
            return

        cls._args_application_gateway_header_configuration_update = AAZObjectArg()

        application_gateway_header_configuration_update = cls._args_application_gateway_header_configuration_update
        application_gateway_header_configuration_update.header_name = AAZStrArg(
            options=["header-name"],
            help="Header name of the header configuration.",
        )
        application_gateway_header_configuration_update.header_value = AAZStrArg(
            options=["header-value"],
            help="Header value of the header configuration.",
        )

        _schema.header_name = cls._args_application_gateway_header_configuration_update.header_name
        _schema.header_value = cls._args_application_gateway_header_configuration_update.header_value

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        yield self.ApplicationGatewaysCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _CreateHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200

    class ApplicationGatewaysCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _CreateHelper._build_schema_application_gateway_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("rewriteRules", AAZListType, ".rules")

            rewrite_rules = _builder.get(".properties.rewriteRules")
            if rewrite_rules is not None:
                rewrite_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rewriteRules[]")
            if _elements is not None:
                _elements.set_prop("actionSet", AAZObjectType, ".action_set")
                _elements.set_prop("conditions", AAZListType, ".conditions")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("ruleSequence", AAZIntType, ".rule_sequence")

            action_set = _builder.get(".properties.rewriteRules[].actionSet")
            if action_set is not None:
                action_set.set_prop("requestHeaderConfigurations", AAZListType, ".request_header_configurations")
                action_set.set_prop("responseHeaderConfigurations", AAZListType, ".response_header_configurations")
                action_set.set_prop("urlConfiguration", AAZObjectType, ".url_configuration")

            request_header_configurations = _builder.get(".properties.rewriteRules[].actionSet.requestHeaderConfigurations")
            if request_header_configurations is not None:
                _CreateHelper._build_schema_application_gateway_header_configuration_update(request_header_configurations.set_elements(AAZObjectType, "."))

            response_header_configurations = _builder.get(".properties.rewriteRules[].actionSet.responseHeaderConfigurations")
            if response_header_configurations is not None:
                _CreateHelper._build_schema_application_gateway_header_configuration_update(response_header_configurations.set_elements(AAZObjectType, "."))

            url_configuration = _builder.get(".properties.rewriteRules[].actionSet.urlConfiguration")
            if url_configuration is not None:
                url_configuration.set_prop("modifiedPath", AAZStrType, ".modified_path")
                url_configuration.set_prop("modifiedQueryString", AAZStrType, ".modified_query_string")
                url_configuration.set_prop("reroute", AAZBoolType, ".reroute")

            conditions = _builder.get(".properties.rewriteRules[].conditions")
            if conditions is not None:
                conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rewriteRules[].conditions[]")
            if _elements is not None:
                _elements.set_prop("ignoreCase", AAZBoolType, ".ignore_case")
                _elements.set_prop("negate", AAZBoolType, ".negate")
                _elements.set_prop("pattern", AAZStrType, ".pattern")
                _elements.set_prop("variable", AAZStrType, ".variable")

            return _instance_value


@register_command(
    "network application-gateway rewrite-rule set delete",
)
class Delete(AAZCommand):
    """Delete a rewrite rule set.

    :example: Delete a rewrite rule set.
        az network application-gateway rewrite-rule set delete -g MyResourceGroup --gateway-name MyGateway -n MyRuleSet
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.rewriteRuleSets[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the rewrite rule set.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        yield self.ApplicationGatewaysCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _DeleteHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200

    class ApplicationGatewaysCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _DeleteHelper._build_schema_application_gateway_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


@register_command(
    "network application-gateway rewrite-rule set list",
)
class List(AAZCommand):
    """List rewrite rule sets.

    :example: List rewrite rule sets.
        az network application-gateway rewrite-rule set list --gateway-name MyGateway --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.rewriteRuleSets"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.properties.rewriteRuleSets

        def _set(self, value):
            result = self.ctx.vars.instance
            result.properties.rewriteRuleSets = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ListHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway rewrite-rule set show",
)
class Show(AAZCommand):
    """Get the details of a rewrite rule set.

    :example: Get the details of a rewrite rule set.
        az network application-gateway rewrite-rule set show --gateway-name MyGateway --name MyRewriteRuleSet --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.rewriteRuleSets[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the rewrite rule set.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway rewrite-rule set update",
)
class Update(AAZCommand):
    """Update a rewrite rule set.

    :example: Update a rewrite rule set.
        az network application-gateway rewrite-rule set update --gateway-name MyGateway --name MyRewriteRuleSet --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.rewriteRuleSets[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the rewrite rule set.",
            required=True,
        )

        # define Arg Group "Parameters.properties.rewriteRuleSets[]"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.rules = AAZListArg(
            options=["--rules"],
            arg_group="Properties",
            help="Rewrite rules in the rewrite rule set.",
            nullable=True,
        )

        rules = cls._args_schema.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.rules.Element
        _element.action_set = AAZObjectArg(
            options=["action-set"],
            help="Set of actions to be done as part of the rewrite Rule.",
            nullable=True,
        )
        _element.conditions = AAZListArg(
            options=["conditions"],
            help="Conditions based on which the action set execution will be evaluated.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the rewrite rule that is unique within an Application Gateway.",
            nullable=True,
        )
        _element.rule_sequence = AAZIntArg(
            options=["rule-sequence"],
            help="Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.",
            nullable=True,
        )

        action_set = cls._args_schema.rules.Element.action_set
        action_set.request_header_configurations = AAZListArg(
            options=["request-header-configurations"],
            help="Request Header Actions in the Action Set.",
            nullable=True,
        )
        action_set.response_header_configurations = AAZListArg(
            options=["response-header-configurations"],
            help="Response Header Actions in the Action Set.",
            nullable=True,
        )
        action_set.url_configuration = AAZObjectArg(
            options=["url-configuration"],
            help="Url Configuration Action in the Action Set.",
            nullable=True,
        )

        request_header_configurations = cls._args_schema.rules.Element.action_set.request_header_configurations
        request_header_configurations.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_gateway_header_configuration_update(request_header_configurations.Element)

        response_header_configurations = cls._args_schema.rules.Element.action_set.response_header_configurations
        response_header_configurations.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_application_gateway_header_configuration_update(response_header_configurations.Element)

        url_configuration = cls._args_schema.rules.Element.action_set.url_configuration
        url_configuration.modified_path = AAZStrArg(
            options=["modified-path"],
            help="Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.",
            nullable=True,
        )
        url_configuration.modified_query_string = AAZStrArg(
            options=["modified-query-string"],
            help="Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.",
            nullable=True,
        )
        url_configuration.reroute = AAZBoolArg(
            options=["reroute"],
            help="If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.",
            nullable=True,
        )

        conditions = cls._args_schema.rules.Element.conditions
        conditions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.rules.Element.conditions.Element
        _element.ignore_case = AAZBoolArg(
            options=["ignore-case"],
            help="Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.",
            nullable=True,
        )
        _element.negate = AAZBoolArg(
            options=["negate"],
            help="Setting this value as truth will force to check the negation of the condition given by the user.",
            nullable=True,
        )
        _element.pattern = AAZStrArg(
            options=["pattern"],
            help="The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.",
            nullable=True,
        )
        _element.variable = AAZStrArg(
            options=["variable"],
            help="The condition parameter of the RewriteRuleCondition.",
            nullable=True,
        )
        return cls._args_schema

    _args_application_gateway_header_configuration_update = None

    @classmethod
    def _build_args_application_gateway_header_configuration_update(cls, _schema):
        if cls._args_application_gateway_header_configuration_update is not None:
            _schema.header_name = cls._args_application_gateway_header_configuration_update.header_name
            _schema.header_value = cls._args_application_gateway_header_configuration_update.header_value
            return

        cls._args_application_gateway_header_configuration_update = AAZObjectArg(
            nullable=True,
        )

        application_gateway_header_configuration_update = cls._args_application_gateway_header_configuration_update
        application_gateway_header_configuration_update.header_name = AAZStrArg(
            options=["header-name"],
            help="Header name of the header configuration.",
            nullable=True,
        )
        application_gateway_header_configuration_update.header_value = AAZStrArg(
            options=["header-value"],
            help="Header value of the header configuration.",
            nullable=True,
        )

        _schema.header_name = cls._args_application_gateway_header_configuration_update.header_name
        _schema.header_value = cls._args_application_gateway_header_configuration_update.header_value

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.selectors.subresource.required())
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.selectors.subresource.required())
        yield self.ApplicationGatewaysCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.rewriteRuleSets
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200

    class ApplicationGatewaysCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_application_gateway_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.selectors.subresource.required())

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("rewriteRules", AAZListType, ".rules")

            rewrite_rules = _builder.get(".properties.rewriteRules")
            if rewrite_rules is not None:
                rewrite_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rewriteRules[]")
            if _elements is not None:
                _elements.set_prop("actionSet", AAZObjectType, ".action_set")
                _elements.set_prop("conditions", AAZListType, ".conditions")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("ruleSequence", AAZIntType, ".rule_sequence")

            action_set = _builder.get(".properties.rewriteRules[].actionSet")
            if action_set is not None:
                action_set.set_prop("requestHeaderConfigurations", AAZListType, ".request_header_configurations")
                action_set.set_prop("responseHeaderConfigurations", AAZListType, ".response_header_configurations")
                action_set.set_prop("urlConfiguration", AAZObjectType, ".url_configuration")

            request_header_configurations = _builder.get(".properties.rewriteRules[].actionSet.requestHeaderConfigurations")
            if request_header_configurations is not None:
                _UpdateHelper._build_schema_application_gateway_header_configuration_update(request_header_configurations.set_elements(AAZObjectType, "."))

            response_header_configurations = _builder.get(".properties.rewriteRules[].actionSet.responseHeaderConfigurations")
            if response_header_configurations is not None:
                _UpdateHelper._build_schema_application_gateway_header_configuration_update(response_header_configurations.set_elements(AAZObjectType, "."))

            url_configuration = _builder.get(".properties.rewriteRules[].actionSet.urlConfiguration")
            if url_configuration is not None:
                url_configuration.set_prop("modifiedPath", AAZStrType, ".modified_path")
                url_configuration.set_prop("modifiedQueryString", AAZStrType, ".modified_query_string")
                url_configuration.set_prop("reroute", AAZBoolType, ".reroute")

            conditions = _builder.get(".properties.rewriteRules[].conditions")
            if conditions is not None:
                conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rewriteRules[].conditions[]")
            if _elements is not None:
                _elements.set_prop("ignoreCase", AAZBoolType, ".ignore_case")
                _elements.set_prop("negate", AAZBoolType, ".negate")
                _elements.set_prop("pattern", AAZStrType, ".pattern")
                _elements.set_prop("variable", AAZStrType, ".variable")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.selectors.subresource.required(),
                self.ctx.generic_update_args
            )


@register_command(
    "network application-gateway rewrite-rule set wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.rewriteRuleSets[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _WaitHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200


@link_helper(
    __package__,
    ("_build_schema_application_gateway_header_configuration_update", "..__cmds"),
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _CreateHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _DeleteHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _ListHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _ShowHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_header_configuration_update", "..__cmds"),
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _UpdateHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _WaitHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



__all__ = ["Create","Delete","List","Show","Update","Wait","__CMDGroup"]
