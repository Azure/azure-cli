# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TaskUpdateParameters(Model):
    """The parameters for updating a task.

    :param alias: The alternative updatable name for a task.
    :type alias: str
    :param status: The current status of task. Possible values include:
     'Disabled', 'Enabled'
    :type status: str or ~containerregistrybuild.models.TaskStatus
    :param platform: The platform properties against which the run has to
     happen.
    :type platform: ~containerregistrybuild.models.PlatformProperties
    :param agent_configuration: The machine configuration of the run agent.
    :type agent_configuration: ~containerregistrybuild.models.AgentProperties
    :param timeout: Run timeout in seconds.
    :type timeout: int
    :param step: The properties for updating a task step.
    :type step: ~containerregistrybuild.models.TaskStepProperties
    :param trigger: The properties that describe all triggers for the task.
    :type trigger: ~containerregistrybuild.models.TriggerProperties
    :param tags: The ARM resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'timeout': {'maximum': 28800, 'minimum': 300},
    }

    _attribute_map = {
        'alias': {'key': 'properties.alias', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'platform': {'key': 'properties.platform', 'type': 'PlatformProperties'},
        'agent_configuration': {'key': 'properties.agentConfiguration', 'type': 'AgentProperties'},
        'timeout': {'key': 'properties.timeout', 'type': 'int'},
        'step': {'key': 'properties.step', 'type': 'TaskStepProperties'},
        'trigger': {'key': 'properties.trigger', 'type': 'TriggerProperties'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, alias=None, status=None, platform=None, agent_configuration=None, timeout=None, step=None, trigger=None, tags=None):
        super(TaskUpdateParameters, self).__init__()
        self.alias = alias
        self.status = status
        self.platform = platform
        self.agent_configuration = agent_configuration
        self.timeout = timeout
        self.step = step
        self.trigger = trigger
        self.tags = tags
