# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *

@register_command(
    "sql mi link create",
)
class Create(AAZCommand):
    """Creates a new instance link.

    This command creates an Azure SQL Managed Instance link by joining distributed availability group on SQL Server based on the parameters passed.

    :example: Creates an instance link.
    az sql mi link create -g 'rg1' --instance-name 'mi1' --name 'link1' --databases 'db1'
    --partner-ag-name 'partnerag1' --instance-ag-name 'instanceag1'
    --partner-endpoint '"tcp://server1:5022" --instance-link-role 'Secondary'
    --failover-mode 'Manual' --seeding-mode 'Automatic' --no-wait')
    """

    _aaz_info = {
        "version": "2023-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.sql/managedinstances/{}/distributedavailabilitygroups/{}", "2023-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.distributed_availability_group_name = AAZStrArg(
            options=["-n", "--link", "--name", "--distributed-availability-group-name"],
            help="Name of the instance link.",
            required=True,
        )
        _args_schema.managed_instance_name = AAZStrArg(
            options=["--mi", "--instance-name", "--managed-instance", "--managed-instance-name"],
            help="Name of Azure SQL Managed Instance.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.partner_availability_group_name = AAZStrArg(
            options=["--partner-ag-name", "--partner-availability-group-name"],
            arg_group="Properties",
            help="Name of the partner availability group.",
        )
        _args_schema.instance_availability_group_name = AAZStrArg(
            options=["--instance-ag-name", "--instance-availability-group-name"],
            arg_group="Properties",
            help="Name of the instance availability group.",
        )
        _args_schema.partner_endpoint = AAZStrArg(
            options=["--partner-endpoint"],
            arg_group="Properties",
            help="IP address of the partner endpoint.",
        )
        _args_schema.databases = AAZListArg(
            options=["--databases"],
            arg_group="Properties",
            help="Database names in the distributed availability group.",
            required=True
        )
        _args_schema.failover_mode = AAZStrArg(
            options=["--failover-mode"],
            arg_group="Properties",
            help="Link failover mode.",
            required=False
        )
        _args_schema.instance_link_role = AAZStrArg(
            options=["--instance-link-role"],
            arg_group="Properties",
            help="Managed instance side link role.",
            required=False
        )
        _args_schema.seeding_mode = AAZStrArg(
            options=["--seeding-mode"],
            arg_group="Properties",
            help="Database seeding mode.",
            required=False
        )

        databases = cls._args_schema.databases
        databases.Element = AAZObjectArg()
        databases.Element.databaseName = AAZStrArg()

        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DistributedAvailabilityGroupsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DistributedAvailabilityGroupsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/distributedAvailabilityGroups/{distributedAvailabilityGroupName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "distributedAvailabilityGroupName", self.ctx.args.distributed_availability_group_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "managedInstanceName", self.ctx.args.managed_instance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("partnerAvailabilityGroupName", AAZStrType, ".partner_availability_group_name")
                properties.set_prop("instanceAvailabilityGroupName", AAZStrType, ".instance_availability_group_name")
                properties.set_prop("partnerEndpoint", AAZStrType, ".partner_endpoint")
                properties.set_prop("databases", AAZListType, ".databases")
                properties.set_prop("instanceLinkRole", AAZStrType, ".instance_link_role")
                properties.set_prop("seedingMode", AAZStrType, ".seeding_mode")
                properties.set_prop("failoverMode", AAZStrType, ".failover_mode")

            databases = _builder.get(".properties.databases")
            if databases is not None:
                databases.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.databases[]")
            if _elements is not None:
                _elements.set_prop("databaseName", AAZStrType, ".databaseName")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.distributed_availability_group_id = AAZStrType(
                serialized_name="distributedAvailabilityGroupId",
                flags={"read_only": True},
            )
            properties.distributed_availability_group_name = AAZStrType(
                serialized_name="distributedAvailabilityGroupName",
                flags={"read_only": True},
            )
            properties.instance_link_role = AAZStrType(
                serialized_name="instanceLinkRole",
            )
            properties.failover_mode = AAZStrType(
                serialized_name="failoverMode",
            )
            properties.partner_availability_group_name = AAZStrType(
                serialized_name="partnerAvailabilityGroupName",
            )
            properties.replication_mode = AAZStrType(
                serialized_name="replicationMode",
            )
            properties.instance_availability_group_name = AAZStrType(
                serialized_name="instanceAvailabilityGroupName",
            )
            properties.partner_endpoint = AAZStrType(
                serialized_name="partnerEndpoint",
            )
            properties.partner_link_role = AAZStrType(
                serialized_name="partnerLinkRole",
                flags={"read_only": True},
            )
            properties.databases = AAZListType(
                serialized_name="databases",
            )

            properties.seeding_mode = AAZStrType(
                serialized_name="seedingMode",
            )

            databases = properties.databases
            databases.Element = AAZObjectType()

            _element = databases.Element
            _element.connectedState = AAZStrType(
                flags={"read_only": True},
            )

            _element.databaseName = AAZStrType(
                flags={"read_only": True},
            )

            _element.instanceRedoReplicationLagSeconds = AAZIntType(
                flags={"read_only": True},
            )

            _element.instanceReplicaId = AAZStrType(
                flags={"read_only": True},
            )

            _element.instanceSendReplicationLagSeconds = AAZIntType(
                flags={"read_only": True},
            )

            _element.lastBackupLsn = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastBackupTime = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastCommitLsn = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastCommitTime = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastHardenedLsn = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastHardenedTime = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastReceivedLsn = AAZStrType(
                flags={"read_only": True},
            )

            _element.lastReceivedTime = AAZStrType(
                flags={"read_only": True},
            )

            _element.partnerReplicaId = AAZStrType(
                flags={"read_only": True},
            )

            _element.replicaState = AAZStrType(
                flags={"read_only": True},
            )

            _element.synhronizationHealth = AAZStrType(
                flags={"read_only": True},
            )

            _element.partnerAuthCertValidity = AAZDictType()
            partnerAuthCertValidity = _element.partnerAuthCertValidity

            partnerAuthCertValidity.certificateName = AAZStrType(
                serialized_name="certificateName",
                flags={"read_only": True},
            )

            partnerAuthCertValidity.expiryDate = AAZStrType(
                serialized_name="expiryDate",
                flags={"read_only": True},
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
