# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network express-route-cross-connection peering create",
)
class Create(AAZCommand):
    """Create a peering in the specified express route cross connection.
    """

    _aaz_info = {
        "version": "2023-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/expressroutecrossconnections/{}/peerings/{}", "2023-09-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cross_connection_name = AAZStrArg(
            options=["--cross-connection-name"],
            help="The name of the ExpressRouteCrossConnection.",
            required=True,
        )
        _args_schema.peering_name = AAZStrArg(
            options=["-n", "--name", "--peering-name"],
            help="The name of the peering.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "PeeringParameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.gateway_manager_etag = AAZStrArg(
            options=["--gateway-manager-etag"],
            arg_group="Properties",
            help="The GatewayManager Etag.",
        )
        _args_schema.ipv6_peering_config = AAZObjectArg(
            options=["--ipv6-peering-config"],
            arg_group="Properties",
            help="The IPv6 peering configuration.",
        )
        _args_schema.microsoft_peering_config = AAZObjectArg(
            options=["--microsoft-peering-config"],
            arg_group="Properties",
            help="The Microsoft peering configuration.",
        )
        cls._build_args_express_route_circuit_peering_config_create(_args_schema.microsoft_peering_config)
        _args_schema.peer_asn = AAZIntArg(
            options=["--peer-asn"],
            arg_group="Properties",
            help="The peer ASN.",
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        _args_schema.peering_type = AAZStrArg(
            options=["--peering-type"],
            arg_group="Properties",
            help="The peering type.",
            enum={"AzurePrivatePeering": "AzurePrivatePeering", "AzurePublicPeering": "AzurePublicPeering", "MicrosoftPeering": "MicrosoftPeering"},
        )
        _args_schema.primary_peer_address_prefix = AAZStrArg(
            options=["--primary-peer-address-prefix"],
            arg_group="Properties",
            help="The primary address prefix.",
        )
        _args_schema.secondary_peer_address_prefix = AAZStrArg(
            options=["--secondary-peer-address-prefix"],
            arg_group="Properties",
            help="The secondary address prefix.",
        )
        _args_schema.shared_key = AAZStrArg(
            options=["--shared-key"],
            arg_group="Properties",
            help="The shared key.",
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="The peering state.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.vlan_id = AAZIntArg(
            options=["--vlan-id"],
            arg_group="Properties",
            help="The VLAN ID.",
        )

        ipv6_peering_config = cls._args_schema.ipv6_peering_config
        ipv6_peering_config.microsoft_peering_config = AAZObjectArg(
            options=["microsoft-peering-config"],
            help="The Microsoft peering configuration.",
        )
        cls._build_args_express_route_circuit_peering_config_create(ipv6_peering_config.microsoft_peering_config)
        ipv6_peering_config.primary_peer_address_prefix = AAZStrArg(
            options=["primary-peer-address-prefix"],
            help="The primary address prefix.",
        )
        ipv6_peering_config.route_filter = AAZObjectArg(
            options=["route-filter"],
            help="The reference to the RouteFilter resource.",
        )
        ipv6_peering_config.secondary_peer_address_prefix = AAZStrArg(
            options=["secondary-peer-address-prefix"],
            help="The secondary address prefix.",
        )
        ipv6_peering_config.state = AAZStrArg(
            options=["state"],
            help="The state of peering.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        route_filter = cls._args_schema.ipv6_peering_config.route_filter
        route_filter.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        return cls._args_schema

    _args_express_route_circuit_peering_config_create = None

    @classmethod
    def _build_args_express_route_circuit_peering_config_create(cls, _schema):
        if cls._args_express_route_circuit_peering_config_create is not None:
            _schema.advertised_communities = cls._args_express_route_circuit_peering_config_create.advertised_communities
            _schema.advertised_public_prefixes = cls._args_express_route_circuit_peering_config_create.advertised_public_prefixes
            _schema.customer_asn = cls._args_express_route_circuit_peering_config_create.customer_asn
            _schema.legacy_mode = cls._args_express_route_circuit_peering_config_create.legacy_mode
            _schema.routing_registry_name = cls._args_express_route_circuit_peering_config_create.routing_registry_name
            return

        cls._args_express_route_circuit_peering_config_create = AAZObjectArg()

        express_route_circuit_peering_config_create = cls._args_express_route_circuit_peering_config_create
        express_route_circuit_peering_config_create.advertised_communities = AAZListArg(
            options=["advertised-communities"],
            help="The communities of bgp peering. Specified for microsoft peering.",
        )
        express_route_circuit_peering_config_create.advertised_public_prefixes = AAZListArg(
            options=["advertised-public-prefixes"],
            help="The reference to AdvertisedPublicPrefixes.",
        )
        express_route_circuit_peering_config_create.customer_asn = AAZIntArg(
            options=["customer-asn"],
            help="The CustomerASN of the peering.",
        )
        express_route_circuit_peering_config_create.legacy_mode = AAZIntArg(
            options=["legacy-mode"],
            help="The legacy mode of the peering.",
        )
        express_route_circuit_peering_config_create.routing_registry_name = AAZStrArg(
            options=["routing-registry-name"],
            help="The RoutingRegistryName of the configuration.",
        )

        advertised_communities = cls._args_express_route_circuit_peering_config_create.advertised_communities
        advertised_communities.Element = AAZStrArg()

        advertised_public_prefixes = cls._args_express_route_circuit_peering_config_create.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrArg()

        _schema.advertised_communities = cls._args_express_route_circuit_peering_config_create.advertised_communities
        _schema.advertised_public_prefixes = cls._args_express_route_circuit_peering_config_create.advertised_public_prefixes
        _schema.customer_asn = cls._args_express_route_circuit_peering_config_create.customer_asn
        _schema.legacy_mode = cls._args_express_route_circuit_peering_config_create.legacy_mode
        _schema.routing_registry_name = cls._args_express_route_circuit_peering_config_create.routing_registry_name

    def _execute_operations(self):
        self.pre_operations()
        yield self.ExpressRouteCrossConnectionPeeringsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ExpressRouteCrossConnectionPeeringsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "crossConnectionName", self.ctx.args.cross_connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "peeringName", self.ctx.args.peering_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("name", AAZStrType, ".peering_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("gatewayManagerEtag", AAZStrType, ".gateway_manager_etag")
                properties.set_prop("ipv6PeeringConfig", AAZObjectType, ".ipv6_peering_config")
                _CreateHelper._build_schema_express_route_circuit_peering_config_create(properties.set_prop("microsoftPeeringConfig", AAZObjectType, ".microsoft_peering_config"))
                properties.set_prop("peerASN", AAZIntType, ".peer_asn")
                properties.set_prop("peeringType", AAZStrType, ".peering_type")
                properties.set_prop("primaryPeerAddressPrefix", AAZStrType, ".primary_peer_address_prefix")
                properties.set_prop("secondaryPeerAddressPrefix", AAZStrType, ".secondary_peer_address_prefix")
                properties.set_prop("sharedKey", AAZStrType, ".shared_key")
                properties.set_prop("state", AAZStrType, ".state")
                properties.set_prop("vlanId", AAZIntType, ".vlan_id")

            ipv6_peering_config = _builder.get(".properties.ipv6PeeringConfig")
            if ipv6_peering_config is not None:
                _CreateHelper._build_schema_express_route_circuit_peering_config_create(ipv6_peering_config.set_prop("microsoftPeeringConfig", AAZObjectType, ".microsoft_peering_config"))
                ipv6_peering_config.set_prop("primaryPeerAddressPrefix", AAZStrType, ".primary_peer_address_prefix")
                ipv6_peering_config.set_prop("routeFilter", AAZObjectType, ".route_filter")
                ipv6_peering_config.set_prop("secondaryPeerAddressPrefix", AAZStrType, ".secondary_peer_address_prefix")
                ipv6_peering_config.set_prop("state", AAZStrType, ".state")

            route_filter = _builder.get(".properties.ipv6PeeringConfig.routeFilter")
            if route_filter is not None:
                route_filter.set_prop("id", AAZStrType, ".id")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.name = AAZStrType()
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.azure_asn = AAZIntType(
                serialized_name="azureASN",
                flags={"read_only": True},
            )
            properties.gateway_manager_etag = AAZStrType(
                serialized_name="gatewayManagerEtag",
            )
            properties.ipv6_peering_config = AAZObjectType(
                serialized_name="ipv6PeeringConfig",
            )
            properties.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            properties.microsoft_peering_config = AAZObjectType(
                serialized_name="microsoftPeeringConfig",
            )
            _CreateHelper._build_schema_express_route_circuit_peering_config_read(properties.microsoft_peering_config)
            properties.peer_asn = AAZIntType(
                serialized_name="peerASN",
            )
            properties.peering_type = AAZStrType(
                serialized_name="peeringType",
            )
            properties.primary_azure_port = AAZStrType(
                serialized_name="primaryAzurePort",
                flags={"read_only": True},
            )
            properties.primary_peer_address_prefix = AAZStrType(
                serialized_name="primaryPeerAddressPrefix",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.secondary_azure_port = AAZStrType(
                serialized_name="secondaryAzurePort",
                flags={"read_only": True},
            )
            properties.secondary_peer_address_prefix = AAZStrType(
                serialized_name="secondaryPeerAddressPrefix",
            )
            properties.shared_key = AAZStrType(
                serialized_name="sharedKey",
            )
            properties.state = AAZStrType()
            properties.vlan_id = AAZIntType(
                serialized_name="vlanId",
            )

            ipv6_peering_config = cls._schema_on_200_201.properties.ipv6_peering_config
            ipv6_peering_config.microsoft_peering_config = AAZObjectType(
                serialized_name="microsoftPeeringConfig",
            )
            _CreateHelper._build_schema_express_route_circuit_peering_config_read(ipv6_peering_config.microsoft_peering_config)
            ipv6_peering_config.primary_peer_address_prefix = AAZStrType(
                serialized_name="primaryPeerAddressPrefix",
            )
            ipv6_peering_config.route_filter = AAZObjectType(
                serialized_name="routeFilter",
            )
            ipv6_peering_config.secondary_peer_address_prefix = AAZStrType(
                serialized_name="secondaryPeerAddressPrefix",
            )
            ipv6_peering_config.state = AAZStrType()

            route_filter = cls._schema_on_200_201.properties.ipv6_peering_config.route_filter
            route_filter.id = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_express_route_circuit_peering_config_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("advertisedCommunities", AAZListType, ".advertised_communities")
        _builder.set_prop("advertisedPublicPrefixes", AAZListType, ".advertised_public_prefixes")
        _builder.set_prop("customerASN", AAZIntType, ".customer_asn")
        _builder.set_prop("legacyMode", AAZIntType, ".legacy_mode")
        _builder.set_prop("routingRegistryName", AAZStrType, ".routing_registry_name")

        advertised_communities = _builder.get(".advertisedCommunities")
        if advertised_communities is not None:
            advertised_communities.set_elements(AAZStrType, ".")

        advertised_public_prefixes = _builder.get(".advertisedPublicPrefixes")
        if advertised_public_prefixes is not None:
            advertised_public_prefixes.set_elements(AAZStrType, ".")

    _schema_express_route_circuit_peering_config_read = None

    @classmethod
    def _build_schema_express_route_circuit_peering_config_read(cls, _schema):
        if cls._schema_express_route_circuit_peering_config_read is not None:
            _schema.advertised_communities = cls._schema_express_route_circuit_peering_config_read.advertised_communities
            _schema.advertised_public_prefixes = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes
            _schema.advertised_public_prefixes_state = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes_state
            _schema.customer_asn = cls._schema_express_route_circuit_peering_config_read.customer_asn
            _schema.legacy_mode = cls._schema_express_route_circuit_peering_config_read.legacy_mode
            _schema.routing_registry_name = cls._schema_express_route_circuit_peering_config_read.routing_registry_name
            return

        cls._schema_express_route_circuit_peering_config_read = _schema_express_route_circuit_peering_config_read = AAZObjectType()

        express_route_circuit_peering_config_read = _schema_express_route_circuit_peering_config_read
        express_route_circuit_peering_config_read.advertised_communities = AAZListType(
            serialized_name="advertisedCommunities",
        )
        express_route_circuit_peering_config_read.advertised_public_prefixes = AAZListType(
            serialized_name="advertisedPublicPrefixes",
        )
        express_route_circuit_peering_config_read.advertised_public_prefixes_state = AAZStrType(
            serialized_name="advertisedPublicPrefixesState",
            flags={"read_only": True},
        )
        express_route_circuit_peering_config_read.customer_asn = AAZIntType(
            serialized_name="customerASN",
        )
        express_route_circuit_peering_config_read.legacy_mode = AAZIntType(
            serialized_name="legacyMode",
        )
        express_route_circuit_peering_config_read.routing_registry_name = AAZStrType(
            serialized_name="routingRegistryName",
        )

        advertised_communities = _schema_express_route_circuit_peering_config_read.advertised_communities
        advertised_communities.Element = AAZStrType()

        advertised_public_prefixes = _schema_express_route_circuit_peering_config_read.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrType()

        _schema.advertised_communities = cls._schema_express_route_circuit_peering_config_read.advertised_communities
        _schema.advertised_public_prefixes = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes
        _schema.advertised_public_prefixes_state = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes_state
        _schema.customer_asn = cls._schema_express_route_circuit_peering_config_read.customer_asn
        _schema.legacy_mode = cls._schema_express_route_circuit_peering_config_read.legacy_mode
        _schema.routing_registry_name = cls._schema_express_route_circuit_peering_config_read.routing_registry_name


__all__ = ["Create"]
