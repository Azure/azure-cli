#!/usr/bin/env python
# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from __future__ import print_function

import os
import sys
import argparse
import shutil
import tempfile
import subprocess
import tarfile
import platform
import stat

PACKAGES = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'packages')
VIRTUALENV_ARCHIVE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'virtualenv.tar.gz')
COMPLETION_FILENAME = 'az.completion'
COMPLETION_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), COMPLETION_FILENAME)

AZ_DISPATCH_TEMPLATE = """#!/usr/bin/env bash
{install_dir}/bin/python -m azure.cli "$@"
"""
DEFAULT_INSTALL_DIR = os.path.expanduser(os.path.join('~', 'lib', 'azure-cli'))
DEFAULT_EXEC_DIR = os.path.expanduser(os.path.join('~', 'bin'))
EXECUTABLE_NAME = 'az'


class CLIInstallError(Exception):
    pass

def _print_status(msg=''):
    print('-- '+msg, file=sys.stderr)

def _create_dir(dir):
    if not os.path.isdir(dir):
        os.makedirs(dir)

def _parse_dir(value):
    d = os.path.realpath(os.path.expanduser(value))
    if ' ' in d:
        raise argparse.ArgumentTypeError("The directory '{}' cannot contain spaces.".format(value))
    return d

def _exec_command(command_list, cwd=None):
    _print_status('Executing: '+str(command_list))
    subprocess.check_call(command_list, cwd=cwd)

def _bin():
    return 'Scripts' if platform.system() == 'Windows' else 'bin'

def verify_python_version(override_python_version_check):
    if override_python_version_check:
        return
    if platform.system() == 'Windows':
        raise CLIInstallError('This script does not support Windows.')
    v = sys.version_info
    if v < (2, 7):
        raise CLIInstallError('The CLI does not support Python versions less than 2.7.')
    if 'conda' in sys.version:
        raise CLIInstallError("This install does not support the Python Anaconda environment. "
                              "Create an Anaconda virtual environment and install with 'pip'")
    _print_status('Python version {}.{}.{} okay.'.format(v.major, v.minor, v.micro))

def create_install_dir(install_dir, overwrite_install_dir):
    _create_dir(install_dir)
    if os.listdir(install_dir):
        if overwrite_install_dir:
            shutil.rmtree(install_dir)
            _create_dir(install_dir)
        else:
            raise CLIInstallError("The install directory '{}' is not empty and may contain a previous installation. Use --overwrite-install-dir to overwrite.".format(install_dir))
    _print_status("Install directory is '{}'".format(install_dir))

def create_exec_dir(bin_dir):
    _create_dir(bin_dir)
    _print_status("The executable will be in '{}'".format(bin_dir))

def verify_install_dir_exec_path_conflict(install_dir, exec_path):
    if install_dir == exec_path:
        raise CLIInstallError("The executable file '{}' would clash with the install directory of '{}'. Choose either a different install directory or directory to place the executable.".format(exec_path, install_dir))

def create_virtualenv(tmp_dir, install_dir):
    package_tar = tarfile.open(VIRTUALENV_ARCHIVE)
    package_tar.extractall(path=tmp_dir)
    package_tar.close()
    working_dir = os.path.join(tmp_dir, os.listdir(tmp_dir)[0])
    cmd = [sys.executable, 'virtualenv.py', '--python', sys.executable, install_dir]
    _exec_command(cmd, cwd=working_dir)

def install_cli(tmp_dir, install_dir):
    path_to_pip = os.path.join(install_dir, _bin(), 'pip')
    cmd = [path_to_pip, 'install', '--cache-dir', tmp_dir, 'azure-cli', '--no-index', '--find-links', PACKAGES]
    _exec_command(cmd)
    # Temporary fix to make sure that we have empty __init__.py files for the azure site-packages folder.
    # (including the pkg_resources/declare namespace significantly impacts startup perf for the CLI)
    fixupcmd = [path_to_pip, 'install', '--cache-dir', tmp_dir, '--upgrade', '--force-reinstall', 'azure-nspkg', 'azure-mgmt-nspkg', '--no-index', '--find-links', PACKAGES]
    _exec_command(fixupcmd)

def create_executable(bin_dir, install_dir):
    _create_dir(bin_dir)
    exec_filepath = os.path.join(bin_dir, EXECUTABLE_NAME)
    with open(exec_filepath, 'w') as exec_file:
        exec_file.write(AZ_DISPATCH_TEMPLATE.format(install_dir=install_dir))
    cur_stat = os.stat(exec_filepath)
    os.chmod(exec_filepath, cur_stat.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
    _print_status("The executable is available at '{}'".format(exec_filepath))
    _print_status("Tip: Add the executable to your path: e.g. 'export PATH=$PATH:{}'".format(bin_dir))

def _native_dependencies_for_dist(verify_cmd_args, install_cmd_args, dep_list):
    try:
        _print_status("Executing: '{} {}'".format(' '.join(verify_cmd_args), ' '.join(dep_list)))
        subprocess.check_output(verify_cmd_args + dep_list, stderr=subprocess.STDOUT)
        _print_status('Native dependencies okay.')
    except subprocess.CalledProcessError:
        err_msg = 'One or more of the following native dependencies are not currently installed and may be required.\n'
        err_msg += '"{}"'.format(' '.join(install_cmd_args + dep_list))
        _print_status(err_msg)
        raise CLIInstallError('Please install the native dependencies and try again or use --override-native-check.')

def verify_native_dependencies(override_native_check):
    if override_native_check:
        return
    distname, version, _ = platform.linux_distribution()
    if not distname:
        # There's no distribution name so can't determine native dependencies required / or they may not be needed like on OS X
        return
    _print_status('Verifying native dependencies.')
    is_python3 = sys.version_info[0] == 3
    distname = distname.lower().strip()
    verify_cmd_args = None
    install_cmd_args = None
    dep_list = None
    if any(x in distname for x in ['ubuntu', 'debian']):
        verify_cmd_args = ['dpkg', '-s']
        install_cmd_args = ['apt-get', 'update', '&&', 'apt-get', 'install', '-y']
        python_dep = 'python3-dev' if is_python3 else 'python-dev'
        if distname == 'ubuntu' and version in ['12.04', '14.04'] or distname == 'debian' and version.startswith('7'):
            dep_list = ['libssl-dev', 'libffi-dev', python_dep]
        elif distname == 'ubuntu' and version in ['15.10', '16.04']or distname == 'debian' and version.startswith('8'):
            dep_list = ['libssl-dev', 'libffi-dev', python_dep, 'build-essential']
    elif any(x in distname for x in ['centos', 'rhel', 'red hat']):
        verify_cmd_args = ['rpm', '-q']
        install_cmd_args = ['yum', 'check-update', ';', 'yum', 'install', '-y']
        # python3-devel not available on yum but python3Xu-devel versions available.
        python_dep = 'python3{}u-devel'.format(sys.version_info[1]) if is_python3 else 'python-devel'
        dep_list = ['gcc', 'libffi-devel', python_dep, 'openssl-devel']
    elif any(x in distname for x in ['opensuse', 'suse']):
        verify_cmd_args = ['rpm', '-q']
        install_cmd_args = ['zypper', 'refresh', '&&', 'zypper', '--non-interactive', 'install']
        python_dep = 'python3-devel' if is_python3 else 'python-devel'
        dep_list = ['gcc', 'libffi-devel', python_dep, 'openssl-devel']
    if verify_cmd_args and install_cmd_args and dep_list:
        _native_dependencies_for_dist(verify_cmd_args, install_cmd_args, dep_list)
    else:
        _print_status("Unable to verify native dependencies. dist={}, version={}. Continuing...".format(distname, version))

def add_completion_file(install_dir):
    completion_file_path = os.path.join(install_dir, COMPLETION_FILENAME)
    shutil.copy(COMPLETION_PATH, completion_file_path)
    _print_status("Tip: Enable tab completion: e.g. 'source {}'".format(completion_file_path))

def main(install_dir, bin_dir, overwrite_install_dir, override_python_version_check, override_native_check):
    tmp_dir = tempfile.mkdtemp()
    verify_python_version(override_python_version_check)
    verify_native_dependencies(override_native_check)
    create_install_dir(install_dir, overwrite_install_dir)
    create_exec_dir(bin_dir)
    exec_path = os.path.join(bin_dir, EXECUTABLE_NAME)
    verify_install_dir_exec_path_conflict(install_dir, exec_path)
    create_virtualenv(tmp_dir, install_dir)
    install_cli(tmp_dir, install_dir)
    create_executable(bin_dir, install_dir)
    add_completion_file(install_dir)
    _print_status("Tip: Want to retain {} on your PATH and tab completion enabled? Add these two lines to your shell profile (e.g. ~/.bashrc, ~/.bash_profile, ~/.profile)".format(EXECUTABLE_NAME))
    _print_status("Done.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--install-dir', '-i',
                        help="In what directory would you like to place the install? "
                             "Tab completion can be enabled with the completion file in the install directory. "
                             "For example: source <install-dir>/{}".format(COMPLETION_FILENAME),
                        type=_parse_dir, default=DEFAULT_INSTALL_DIR)
    parser.add_argument('--bin-dir', '-b',
                        help="In what directory would you like to place the executable? "
                             "After the installation, add this directory to your path if it is not already. "
                             "For example: export PATH=$PATH:<bin-dir>",
                        type=_parse_dir, default=DEFAULT_EXEC_DIR)
    parser.add_argument('--overwrite-install-dir',
                        help='Override the install directory if it exists.',
                        default=False, action='store_true')
    parser.add_argument('--override-python-version-check',
                        help='Override the check for Python version',
                        default=False, action='store_true')
    parser.add_argument('--override-native-check',
                        help='Override the check for native dependencies and continue anyway',
                        default=False, action='store_true')
    args = parser.parse_args()
    try:
        main(args.install_dir,
             args.bin_dir,
             args.overwrite_install_dir,
             args.override_python_version_check,
             args.override_native_check)
    except CLIInstallError as cie:
        print('ERROR: '+str(cie), file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print('\n\nExiting...')
        sys.exit(1)

