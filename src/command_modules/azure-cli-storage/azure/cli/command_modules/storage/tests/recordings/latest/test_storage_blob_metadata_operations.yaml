interactions:
- request:
    body: !!python/unicode '{"location": "westus", "tags": {"use": "az-test"}}'
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [group create]
      Connection: [keep-alive]
      Content-Length: ['50']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/2.7.14 (Darwin-17.2.0-x86_64-i386-64bit) requests/2.18.4
          msrest/0.4.19 msrest_azure/0.4.18 resourcemanagementclient/1.2.1 Azure-SDK-For-Python
          AZURECLI/2.0.23]
      accept-language: [en-US]
    method: PUT
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/clitest.rg000001?api-version=2017-05-10
  response:
    body: {string: !!python/unicode '{"id":"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001","name":"clitest.rg000001","location":"westus","tags":{"use":"az-test"},"properties":{"provisioningState":"Succeeded"}}'}
    headers:
      cache-control: [no-cache]
      content-length: ['328']
      content-type: [application/json; charset=utf-8]
      date: ['Mon, 11 Dec 2017 21:31:09 GMT']
      expires: ['-1']
      pragma: [no-cache]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      x-ms-ratelimit-remaining-subscription-writes: ['1198']
    status: {code: 201, message: Created}
- request:
    body: !!python/unicode '{"sku": {"name": "Standard_LRS"}, "kind": "Storage", "location":
      "westus", "properties": {"supportsHttpsTrafficOnly": false}}'
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account create]
      Connection: [keep-alive]
      Content-Length: ['125']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/2.7.14 (Darwin-17.2.0-x86_64-i386-64bit) requests/2.18.4
          msrest/0.4.19 msrest_azure/0.4.18 storagemanagementclient/1.4.0 Azure-SDK-For-Python
          AZURECLI/2.0.23]
      accept-language: [en-US]
    method: PUT
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002?api-version=2017-10-01
  response:
    body: {string: !!python/unicode ''}
    headers:
      cache-control: [no-cache]
      content-length: ['0']
      date: ['Mon, 11 Dec 2017 21:31:09 GMT']
      expires: ['-1']
      location: ['https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Storage/locations/westus/asyncoperations/4b3ae8d3-26db-419a-883d-a410238b5d11?monitor=true&api-version=2017-10-01']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      x-ms-ratelimit-remaining-subscription-writes: ['1199']
    status: {code: 202, message: Accepted}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account create]
      Connection: [keep-alive]
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/2.7.14 (Darwin-17.2.0-x86_64-i386-64bit) requests/2.18.4
          msrest/0.4.19 msrest_azure/0.4.18 storagemanagementclient/1.4.0 Azure-SDK-For-Python
          AZURECLI/2.0.23]
      accept-language: [en-US]
    method: GET
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Storage/locations/westus/asyncoperations/4b3ae8d3-26db-419a-883d-a410238b5d11?monitor=true&api-version=2017-10-01
  response:
    body: {string: !!python/unicode '{"id":"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002","kind":"Storage","location":"westus","name":"clitest000002","properties":{"creationTime":"2017-12-11T21:31:10.9378946Z","encryption":{"keySource":"Microsoft.Storage","services":{"blob":{"enabled":true,"lastEnabledTime":"2017-12-11T21:31:10.9488968Z"},"file":{"enabled":true,"lastEnabledTime":"2017-12-11T21:31:10.9488968Z"}}},"networkAcls":{"bypass":"AzureServices","defaultAction":"Allow","ipRules":[],"virtualNetworkRules":[]},"primaryEndpoints":{"blob":"https://clitest000002.blob.core.windows.net/","file":"https://clitest000002.file.core.windows.net/","queue":"https://clitest000002.queue.core.windows.net/","table":"https://clitest000002.table.core.windows.net/"},"primaryLocation":"westus","provisioningState":"Succeeded","statusOfPrimary":"available","supportsHttpsTrafficOnly":false},"sku":{"name":"Standard_LRS","tier":"Standard"},"tags":{},"type":"Microsoft.Storage/storageAccounts"}

'}
    headers:
      cache-control: [no-cache]
      content-length: ['1170']
      content-type: [application/json]
      date: ['Mon, 11 Dec 2017 21:31:28 GMT']
      expires: ['-1']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      vary: [Accept-Encoding]
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account keys list]
      Connection: [keep-alive]
      Content-Length: ['0']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/2.7.14 (Darwin-17.2.0-x86_64-i386-64bit) requests/2.18.4
          msrest/0.4.19 msrest_azure/0.4.18 storagemanagementclient/1.4.0 Azure-SDK-For-Python
          AZURECLI/2.0.23]
      accept-language: [en-US]
    method: POST
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002/listKeys?api-version=2017-10-01
  response:
    body: {string: !!python/unicode '{"keys":[{"keyName":"key1","permissions":"Full","value":"Qkx7g2L3RYCGrVnXfxyctVrmD06x6EIuvIdPWTMN26lbxJAMP+RMI9tVOWUTsdiOLORbSBgV+/CPOelAa6347w=="},{"keyName":"key2","permissions":"Full","value":"65N6rl18g6U495HVnK/fVcuEO6o18N3U/RddbDVe75fSQ2UbbYnakrJxLGSw+s0+6yQc3+D0NBq5hErgvy+RZg=="}]}

'}
    headers:
      cache-control: [no-cache]
      content-length: ['289']
      content-type: [application/json]
      date: ['Mon, 11 Dec 2017 21:31:29 GMT']
      expires: ['-1']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      vary: [Accept-Encoding]
      x-ms-ratelimit-remaining-subscription-writes: ['1199']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [storage account keys list]
      Connection: [keep-alive]
      Content-Length: ['0']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/2.7.14 (Darwin-17.2.0-x86_64-i386-64bit) requests/2.18.4
          msrest/0.4.19 msrest_azure/0.4.18 storagemanagementclient/1.4.0 Azure-SDK-For-Python
          AZURECLI/2.0.23]
      accept-language: [en-US]
    method: POST
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/clitest.rg000001/providers/Microsoft.Storage/storageAccounts/clitest000002/listKeys?api-version=2017-10-01
  response:
    body: {string: !!python/unicode '{"keys":[{"keyName":"key1","permissions":"Full","value":"Qkx7g2L3RYCGrVnXfxyctVrmD06x6EIuvIdPWTMN26lbxJAMP+RMI9tVOWUTsdiOLORbSBgV+/CPOelAa6347w=="},{"keyName":"key2","permissions":"Full","value":"65N6rl18g6U495HVnK/fVcuEO6o18N3U/RddbDVe75fSQ2UbbYnakrJxLGSw+s0+6yQc3+D0NBq5hErgvy+RZg=="}]}

'}
    headers:
      cache-control: [no-cache]
      content-length: ['289']
      content-type: [application/json]
      date: ['Mon, 11 Dec 2017 21:31:29 GMT']
      expires: ['-1']
      pragma: [no-cache]
      server: [Microsoft-Azure-Storage-Resource-Provider/1.0, Microsoft-HTTPAPI/2.0]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      vary: [Accept-Encoding]
      x-ms-ratelimit-remaining-subscription-writes: ['1199']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      Content-Length: ['0']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 2.7.14; Darwin 17.2.0)
          AZURECLI/2.0.23]
      x-ms-date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003?restype=container
  response:
    body: {string: !!python/unicode ''}
    headers:
      date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      etag: ['"0x8D540DE8B550F77"']
      last-modified: ['Mon, 11 Dec 2017 21:31:30 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-version: ['2017-04-17']
    status: {code: 201, message: Created}
- request:
    body: !!python/unicode "# --------------------------------------------------------------------------------------------\n#
      Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under
      the MIT License. See License.txt in the project root for license information.\n#
      --------------------------------------------------------------------------------------------\n\nimport
      os\nimport re\nimport unittest\nfrom datetime import datetime, timedelta\nfrom
      azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer, StorageAccountPreparer,\n
      \                              JMESPathCheck, NoneCheck, api_version_constraint)\nfrom
      azure.cli.core.util import CLIError\nfrom azure.cli.command_modules.storage._factory
      import NO_CREDENTIALS_ERROR_MESSAGE\nfrom azure.cli.core.profiles import ResourceType\nfrom
      .storage_test_util import StorageScenarioMixin\n\n\n@api_version_constraint(ResourceType.MGMT_STORAGE,
      min_api='2016-12-01')\nclass StorageBlobUploadTests(StorageScenarioMixin, ScenarioTest):\n
      \   @ResourceGroupPreparer()\n    @StorageAccountPreparer(parameter_name='source_account')\n
      \   @StorageAccountPreparer(parameter_name='target_account')\n    def test_storage_blob_incremental_copy(self,
      resource_group, source_account, target_account):\n        source_file = self.create_temp_file(16)\n
      \       source_account_info = self.get_account_info(resource_group, source_account)\n
      \       source_container = self.create_container(source_account_info)\n        self.storage_cmd('storage
      blob upload -c {} -n src -f \"{}\" -t page', source_account_info,\n                         source_container,
      source_file)\n\n        snapshot = self.storage_cmd('storage blob snapshot -c
      {} -n src', source_account_info,\n                                    source_container).get_output_in_json()['snapshot']\n\n
      \       target_account_info = self.get_account_info(resource_group, target_account)\n
      \       target_container = self.create_container(target_account_info)\n        self.storage_cmd('storage
      blob incremental-copy start --source-container {} --source-blob '\n                         'src
      --source-account-name {} --source-account-key {} --source-snapshot '\n                         '{}
      --destination-container {} --destination-blob backup',\n                         target_account_info,
      source_container, source_account,\n                         source_account_info[1],
      snapshot, target_container)\n\n    def test_storage_blob_no_credentials_scenario(self):\n
      \       source_file = self.create_temp_file(1)\n        with self.assertRaisesRegexp(CLIError,
      re.escape(NO_CREDENTIALS_ERROR_MESSAGE)):\n            self.cmd('storage blob
      upload -c foo -n bar -f \"' + source_file + '\"')\n\n    @ResourceGroupPreparer()\n
      \   @StorageAccountPreparer()\n    def test_storage_blob_upload_small_file(self,
      resource_group, storage_account):\n        self.verify_blob_upload_and_download(resource_group,
      storage_account, 1, 'block', 0)\n\n    @ResourceGroupPreparer()\n    @StorageAccountPreparer()\n
      \   def test_storage_blob_upload_midsize_file(self, resource_group, storage_account):\n
      \       self.verify_blob_upload_and_download(resource_group, storage_account,
      4096, 'block', 0)\n\n    def verify_blob_upload_and_download(self, group, account,
      file_size_kb, blob_type,\n                                        block_count=0,
      skip_download=False):\n        local_dir = self.create_temp_dir()\n        local_file
      = self.create_temp_file(file_size_kb)\n        blob_name = self.create_random_name(prefix='blob',
      length=24)\n        account_info = self.get_account_info(group, account)\n\n
      \       container = self.create_container(account_info)\n\n        self.storage_cmd('storage
      blob exists -n {} -c {}', account_info, blob_name, container) \\\n            .assert_with_checks(JMESPathCheck('exists',
      False))\n\n        self.storage_cmd('storage blob upload -c {} -f \"{}\" -n
      {} --type {}', account_info,\n                         container, local_file,
      blob_name, blob_type)\n        self.storage_cmd('storage blob exists -n {} -c
      {}', account_info, blob_name, container) \\\n            .assert_with_checks(JMESPathCheck('exists',
      True))\n        self.storage_cmd('storage blob list -c {} -otable --num-results
      1', account_info, container)\n\n        self.storage_cmd('storage blob show
      -n {} -c {}', account_info, blob_name, container) \\\n            .assert_with_checks(JMESPathCheck('name',
      blob_name))\n\n        expiry = (datetime.utcnow() + timedelta(hours=1)).strftime('%Y-%m-%dT%H:%MZ')\n
      \       sas = self.storage_cmd('storage blob generate-sas -n {} -c {} --expiry
      {} --permissions '\n                               'r --https-only', account_info,
      blob_name, container, expiry).output\n        self.assertTrue(sas)\n        self.assertIn('sig',
      sas)\n\n        self.storage_cmd('storage blob update -n {} -c {} --content-type
      application/test-content',\n                         account_info, blob_name,
      container)\n\n        self.storage_cmd('storage blob show -n {} -c {}', account_info,
      blob_name, container) \\\n            .assert_with_checks(\n            [JMESPathCheck('properties.contentSettings.contentType',
      'application/test-content'),\n             JMESPathCheck('properties.contentLength',
      file_size_kb * 1024)])\n\n        self.storage_cmd('storage blob service-properties
      show', account_info) \\\n            .assert_with_checks(JMESPathCheck('hourMetrics.enabled',
      True))\n\n        if not skip_download:\n            downloaded = os.path.join(local_dir,
      'test.file')\n\n            self.storage_cmd('storage blob download -n {} -c
      {} --file \"{}\"',\n                             account_info, blob_name, container,
      downloaded)\n            self.assertTrue(os.path.isfile(downloaded), 'The file
      is not downloaded.')\n            self.assertEqual(file_size_kb * 1024, os.stat(downloaded).st_size,\n
      \                            'The download file size is not right.')\n\n        #
      Verify the requests in cassette to ensure the count of the block requests is
      expected\n        # This portion of validation doesn't verify anything during
      playback because the recording\n        # is fixed.\n\n        def is_block_put_req(request):\n
      \           if request.method != 'PUT':\n                return False\n\n            if
      not re.search('/cont[0-9]+/blob[0-9]+', request.path):\n                return
      False\n\n            comp_block = False\n            has_blockid = False\n            for
      key, value in request.query:\n                if key == 'comp' and value ==
      'block':\n                    comp_block = True\n                elif key ==
      'blockid':\n                    has_blockid = True\n\n            return comp_block
      and has_blockid\n\n        requests = self.cassette.requests\n        put_blocks
      = [request for request in requests if is_block_put_req(request)]\n        self.assertEqual(block_count,
      len(put_blocks),\n                         'The expected number of block put
      requests is {} but the actual '\n                         'number is {}.'.format(block_count,
      len(put_blocks)))\n\n    @ResourceGroupPreparer()\n    @StorageAccountPreparer()\n
      \   def test_storage_blob_lease_operations(self, resource_group, storage_account):\n
      \       account_info = self.get_account_info(resource_group, storage_account)\n
      \       local_file = self.create_temp_file(128)\n        c = self.create_container(account_info)\n
      \       b = self.create_random_name('blob', 24)\n        proposed_lease_id =
      'abcdabcd-abcd-abcd-abcd-abcdabcdabcd'\n        new_lease_id = 'dcbadcba-dcba-dcba-dcba-dcbadcbadcba'\n
      \       date = '2016-04-01t12:00z'\n\n        self.storage_cmd('storage blob
      upload -c {} -n {} -f \"{}\"', account_info, c, b, local_file)\n\n        #
      test lease operations\n        self.storage_cmd('storage blob lease acquire
      --lease-duration 60 -b {} -c {} '\n                         '--if-modified-since
      {} --proposed-lease-id {}', account_info, b, c, date,\n                         proposed_lease_id)\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\n                                JMESPathCheck('properties.lease.state',
      'leased'),\n                                JMESPathCheck('properties.lease.status',
      'locked'))\n        self.storage_cmd('storage blob lease change -b {} -c {}
      --lease-id {} '\n                         '--proposed-lease-id {}', account_info,
      b, c, proposed_lease_id,\n                         new_lease_id)\n        self.storage_cmd('storage
      blob lease renew -b {} -c {} --lease-id {}', account_info, b, c,\n                         new_lease_id)\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\n                                JMESPathCheck('properties.lease.state',
      'leased'),\n                                JMESPathCheck('properties.lease.status',
      'locked'))\n        self.storage_cmd('storage blob lease break -b {} -c {} --lease-break-period
      30',\n                         account_info, b, c)\n        self.storage_cmd('storage
      blob show -n {} -c {}', account_info, b, c) \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\n                                JMESPathCheck('properties.lease.state',
      'breaking'),\n                                JMESPathCheck('properties.lease.status',
      'locked'))\n        self.storage_cmd('storage blob lease release -b {} -c {}
      --lease-id {}', account_info, b, c,\n                         new_lease_id)\n
      \       self.storage_cmd('storage blob show -n {} -c {}', account_info, b, c)
      \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\n                                JMESPathCheck('properties.lease.state',
      'available'),\n                                JMESPathCheck('properties.lease.status',
      'unlocked'))\n\n    @ResourceGroupPreparer()\n    @StorageAccountPreparer()\n
      \   def test_storage_blob_snapshot_operations(self, resource_group, storage_account):\n
      \       account_info = self.get_account_info(resource_group, storage_account)\n
      \       local_file = self.create_temp_file(128)\n        c = self.create_container(account_info)\n
      \       b = self.create_random_name('blob', 24)\n\n        self.storage_cmd('storage
      blob upload -c {} -n {} -f \"{}\"', account_info, c, b, local_file)\n\n        snapshot_dt
      = self.storage_cmd('storage blob snapshot -c {} -n {}', account_info, c, b)
      \\\n            .get_output_in_json()['snapshot']\n        self.storage_cmd('storage
      blob exists -n {} -c {} --snapshot {}', account_info, b, c,\n                         snapshot_dt)
      \\\n            .assert_with_checks(JMESPathCheck('exists', True))\n\n    @ResourceGroupPreparer()\n
      \   @StorageAccountPreparer()\n    def test_storage_blob_metadata_operations(self,
      resource_group, storage_account):\n        account_info = self.get_account_info(resource_group,
      storage_account)\n        c = self.create_container(account_info)\n        b
      = self.create_random_name('blob', 24)\n\n        self.storage_cmd('storage blob
      upload -c {} -n {} -f \"{}\"', account_info, c, b, __file__)\n        self.storage_cmd('storage
      blob metadata update -n {} -c {} --metadata a=b c=d',\n                         account_info,
      b, c)\n        self.storage_cmd('storage blob metadata show -n {} -c {}', account_info,
      b, c) \\\n            .assert_with_checks(JMESPathCheck('a', 'b'), JMESPathCheck('c',
      'd'))\n        self.storage_cmd('storage blob metadata update -n {} -c {}',
      account_info, b, c)\n        self.storage_cmd('storage blob metadata show -n
      {} -c {}', account_info, b, c) \\\n            .assert_with_checks(NoneCheck())\n\n
      \   @ResourceGroupPreparer()\n    @StorageAccountPreparer()\n    def test_storage_blob_container_operations(self,
      resource_group, storage_account):\n        account_info = self.get_account_info(resource_group,
      storage_account)\n        c = self.create_container(account_info)\n        proposed_lease_id
      = 'abcdabcd-abcd-abcd-abcd-abcdabcdabcd'\n        new_lease_id = 'dcbadcba-dcba-dcba-dcba-dcbadcbadcba'\n
      \       date = '2016-04-01t12:00z'\n\n        self.storage_cmd('storage container
      exists -n {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('exists',
      True))\n\n        self.storage_cmd('storage container set-permission -n {} --public-access
      blob',\n                         account_info, c)\n        self.storage_cmd('storage
      container show-permission -n {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('publicAccess',
      'blob'))\n        self.storage_cmd('storage container set-permission -n {} --public-access
      off', account_info,\n                         c)\n        self.storage_cmd('storage
      container show-permission -n {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('publicAccess',
      'off'))\n\n        self.storage_cmd('storage container show -n {}', account_info,
      c) \\\n            .assert_with_checks(JMESPathCheck('name', c))\n\n        self.assertIn(c,
      self.storage_cmd('storage container list --query \"[].name\"',\n                                          account_info).get_output_in_json())\n\n
      \       self.storage_cmd('storage container metadata update -n {} --metadata
      foo=bar moo=bak',\n                         account_info, c)\n        self.storage_cmd('storage
      container metadata show -n {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('foo',
      'bar'), JMESPathCheck('moo', 'bak'))\n        self.storage_cmd('storage container
      metadata update -n {}', account_info, c)\n        self.storage_cmd('storage
      container metadata show -n {}', account_info, c) \\\n            .assert_with_checks(NoneCheck())\n\n
      \       # test lease operations\n        self.storage_cmd('storage container
      lease acquire --lease-duration 60 -c {} '\n                         '--if-modified-since
      {} --proposed-lease-id {}', account_info, c, date,\n                         proposed_lease_id)\n
      \       self.storage_cmd('storage container show --name {}', account_info, c)
      \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\n                                JMESPathCheck('properties.lease.state',
      'leased'),\n                                JMESPathCheck('properties.lease.status',
      'locked'))\n        self.storage_cmd('storage container lease change -c {} --lease-id
      {} '\n                         '--proposed-lease-id {}', account_info, c, proposed_lease_id,
      new_lease_id)\n        self.storage_cmd('storage container lease renew -c {}
      --lease-id {}',\n                         account_info, c, new_lease_id)\n        self.storage_cmd('storage
      container show -n {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      'fixed'),\n                                JMESPathCheck('properties.lease.state',
      'leased'),\n                                JMESPathCheck('properties.lease.status',
      'locked'))\n        self.storage_cmd('storage container lease break -c {} --lease-break-period
      30',\n                         account_info, c)\n        self.storage_cmd('storage
      container show --name {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\n                                JMESPathCheck('properties.lease.state',
      'breaking'),\n                                JMESPathCheck('properties.lease.status',
      'locked'))\n        self.storage_cmd('storage container lease release -c {}
      --lease-id {}', account_info, c,\n                         new_lease_id)\n        self.storage_cmd('storage
      container show --name {}', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('properties.lease.duration',
      None),\n                                JMESPathCheck('properties.lease.state',
      'available'),\n                                JMESPathCheck('properties.lease.status',
      'unlocked'))\n\n        self.assertIn('sig=', self.storage_cmd('storage container
      generate-sas -n {}', account_info,\n                                               c).output)\n\n
      \       # verify delete operation\n        self.storage_cmd('storage container
      delete --name {} --fail-not-exist', account_info, c) \\\n            .assert_with_checks(JMESPathCheck('deleted',
      True))\n        self.storage_cmd('storage container exists -n {}', account_info,
      c) \\\n            .assert_with_checks(JMESPathCheck('exists', False))\n\n\nif
      __name__ == '__main__':\n    unittest.main()\n"
    headers:
      Connection: [keep-alive]
      Content-Length: ['16165']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 2.7.14; Darwin 17.2.0)
          AZURECLI/2.0.23]
      x-ms-blob-content-type: [text/x-python]
      x-ms-blob-type: [BlockBlob]
      x-ms-date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004
  response:
    body: {string: !!python/unicode ''}
    headers:
      content-md5: [oE8VD72/wVa1zCtFOcrq0A==]
      date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      etag: ['"0x8D540DE8B4CFD59"']
      last-modified: ['Mon, 11 Dec 2017 21:31:30 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-request-server-encrypted: ['true']
      x-ms-version: ['2017-04-17']
    status: {code: 201, message: Created}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      Content-Length: ['0']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 2.7.14; Darwin 17.2.0)
          AZURECLI/2.0.23]
      x-ms-date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      x-ms-meta-a: [b]
      x-ms-meta-c: [d]
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: !!python/unicode ''}
    headers:
      date: ['Mon, 11 Dec 2017 21:31:31 GMT']
      etag: ['"0x8D540DE8B6D5E25"']
      last-modified: ['Mon, 11 Dec 2017 21:31:30 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-request-server-encrypted: ['true']
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 2.7.14; Darwin 17.2.0)
          AZURECLI/2.0.23]
      x-ms-date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      x-ms-version: ['2017-04-17']
    method: GET
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: !!python/unicode ''}
    headers:
      date: ['Mon, 11 Dec 2017 21:31:31 GMT']
      etag: ['"0x8D540DE8B6D5E25"']
      last-modified: ['Mon, 11 Dec 2017 21:31:30 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-meta-a: [b]
      x-ms-meta-c: [d]
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      Content-Length: ['0']
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 2.7.14; Darwin 17.2.0)
          AZURECLI/2.0.23]
      x-ms-date: ['Mon, 11 Dec 2017 21:31:31 GMT']
      x-ms-version: ['2017-04-17']
    method: PUT
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: !!python/unicode ''}
    headers:
      date: ['Mon, 11 Dec 2017 21:31:30 GMT']
      etag: ['"0x8D540DE8BC221F1"']
      last-modified: ['Mon, 11 Dec 2017 21:31:31 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-request-server-encrypted: ['true']
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Connection: [keep-alive]
      User-Agent: [Azure-Storage/0.37.1-0.37.1 (Python CPython 2.7.14; Darwin 17.2.0)
          AZURECLI/2.0.23]
      x-ms-date: ['Mon, 11 Dec 2017 21:31:31 GMT']
      x-ms-version: ['2017-04-17']
    method: GET
    uri: https://clitest000002.blob.core.windows.net/cont000003/blob000004?comp=metadata
  response:
    body: {string: !!python/unicode ''}
    headers:
      date: ['Mon, 11 Dec 2017 21:31:31 GMT']
      etag: ['"0x8D540DE8BC221F1"']
      last-modified: ['Mon, 11 Dec 2017 21:31:31 GMT']
      server: [Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0]
      transfer-encoding: [chunked]
      x-ms-version: ['2017-04-17']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: [application/json]
      Accept-Encoding: ['gzip, deflate']
      CommandName: [group delete]
      Connection: [keep-alive]
      Content-Length: ['0']
      Content-Type: [application/json; charset=utf-8]
      User-Agent: [python/2.7.14 (Darwin-17.2.0-x86_64-i386-64bit) requests/2.18.4
          msrest/0.4.19 msrest_azure/0.4.18 resourcemanagementclient/1.2.1 Azure-SDK-For-Python
          AZURECLI/2.0.23]
      accept-language: [en-US]
    method: DELETE
    uri: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/clitest.rg000001?api-version=2017-05-10
  response:
    body: {string: !!python/unicode ''}
    headers:
      cache-control: [no-cache]
      content-length: ['0']
      date: ['Mon, 11 Dec 2017 21:31:32 GMT']
      expires: ['-1']
      location: ['https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/operationresults/eyJqb2JJZCI6IlJFU09VUkNFR1JPVVBERUxFVElPTkpPQi1DTElURVNUOjJFUkdMUU5RMlRNWDdWT1lPMk9KNE1ZM0VOTzdDWEhHSVhJREJUNnxCRTg4Q0FCMDc0RDU0OURDLVdFU1RVUyIsImpvYkxvY2F0aW9uIjoid2VzdHVzIn0?api-version=2017-05-10']
      pragma: [no-cache]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      x-ms-ratelimit-remaining-subscription-writes: ['1199']
    status: {code: 202, message: Accepted}
version: 1
