# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .rule_condition import RuleCondition


class ThresholdRuleCondition(RuleCondition):
    """
    A rule condition based on a metric crossing a threshold.

    :param odata.type: Polymorphic Discriminator
    :type odata.type: str
    :param data_source: Gets or sets the resource from which the rule
     collects its data.
    :type data_source: :class:`RuleDataSource
     <insights.models.RuleDataSource>`
    :param operator: Gets or sets the operator used to compare the data and
     the threshold. Possible values include: 'GreaterThan',
     'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual'
    :type operator: str or :class:`ConditionOperator
     <insightsmanagementclient.models.ConditionOperator>`
    :param threshold: Gets or sets the threshold value that activates the
     alert.
    :type threshold: float
    :param window_size: Gets or sets the period of time that is used to
     monitor alert activity based on the threshold. Must be between 5 minutes
     and 1 day.
    :type window_size: :class:`TimeSpan <insights.models.TimeSpan>`
    :param time_aggregation: Gets or sets the time aggregation operator. How
     the data that is collected should be combined over time. The default
     value is the PrimaryAggregationType of the Metric. Possible values
     include: 'Average', 'Minimum', 'Maximum', 'Total', 'Last'
    :type time_aggregation: str or :class:`TimeAggregationOperator
     <insightsmanagementclient.models.TimeAggregationOperator>`
    """ 

    _validation = {
        'odata.type': {'required': True},
    }

    _attribute_map = {
        'odata.type': {'key': 'odata.type', 'type': 'str'},
        'data_source': {'key': 'dataSource', 'type': 'RuleDataSource'},
        'operator': {'key': 'operator', 'type': 'ConditionOperator'},
        'threshold': {'key': 'threshold', 'type': 'float'},
        'window_size': {'key': 'windowSize', 'type': 'TimeSpan'},
        'time_aggregation': {'key': 'timeAggregation', 'type': 'TimeAggregationOperator'},
    }

    def __init__(self, data_source=None, operator=None, threshold=None, window_size=None, time_aggregation=None):
        super(ThresholdRuleCondition, self).__init__()
        self.data_source = data_source
        self.operator = operator
        self.threshold = threshold
        self.window_size = window_size
        self.time_aggregation = time_aggregation
        self.odata.type = 'Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition'
