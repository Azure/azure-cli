# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

from typing import (Optional, List)
from azure.mgmt.cdn.models import (AFDEndpoint, HealthProbeRequestType, EnabledState, Route, LinkToDefaultDomain,
                                   ResourceReference, AFDEndpointProtocols, HttpsRedirect, ForwardingProtocol,
                                   AfdQueryStringCachingBehavior, HealthProbeParameters, MatchProcessingBehavior,
                                   AFDOrigin, AFDOriginGroup, SharedPrivateLinkResourceProperties, CompressionSettings,
                                   LoadBalancingSettingsParameters, SecurityPolicyWebApplicationFirewallParameters,
                                   SecurityPolicyWebApplicationFirewallAssociation, CustomerCertificateParameters,
                                   AFDDomain, AFDDomainHttpsParameters, AfdCertificateType, AfdMinimumTlsVersion,
                                   AFDEndpointUpdateParameters, SkuName, AfdPurgeParameters, ActivatedResourceReference,
                                   SecurityPolicy, ProfileUpdateParameters, AfdRouteCacheConfiguration,
                                   AutoGeneratedDomainNameLabelScope, Secret)

from azure.mgmt.cdn.operations import (AFDOriginGroupsOperations, AFDOriginsOperations, AFDProfilesOperations,
                                       SecretsOperations, AFDEndpointsOperations, RoutesOperations, RuleSetsOperations,
                                       RulesOperations, SecurityPoliciesOperations, AFDCustomDomainsOperations,
                                       ProfilesOperations)

from azure.cli.core.commands.client_factory import get_subscription_id
from azure.cli.core.util import (sdk_no_wait)
from azure.cli.core.azclierror import (InvalidArgumentValueError)
from azure.core.exceptions import (ResourceNotFoundError)

from knack.log import get_logger
from msrest.polling import LROPoller, NoPolling

from .custom import _update_mapper

logger = get_logger(__name__)


def default_content_types():
    return ["application/eot",
            "application/font",
            "application/font-sfnt",
            "application/javascript",
            "application/json",
            "application/opentype",
            "application/otf",
            "application/pkcs7-mime",
            "application/truetype",
            "application/ttf",
            "application/vnd.ms-fontobject",
            "application/xhtml+xml",
            "application/xml",
            "application/xml+rss",
            "application/x-font-opentype",
            "application/x-font-truetype",
            "application/x-font-ttf",
            "application/x-httpd-cgi",
            "application/x-javascript",
            "application/x-mpegurl",
            "application/x-opentype",
            "application/x-otf",
            "application/x-perl",
            "application/x-ttf",
            "font/eot",
            "font/ttf",
            "font/otf",
            "font/opentype",
            "image/svg+xml",
            "text/css",
            "text/csv",
            "text/html",
            "text/javascript",
            "text/js",
            "text/plain",
            "text/richtext",
            "text/tab-separated-values",
            "text/xml",
            "text/x-script",
            "text/x-component",
            "text/x-java-source"]


def add_afd_rule_condition(cmd, resource_group_name, profile_name, rule_set_name,
                           rule_name, match_variable, operator, match_values=None, selector=None,
                           negate_condition=None, transforms=None):
    from azure.cli.command_modules.cdn.aaz.latest.afd.rule import Create, Show

    existing_rule = Show(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name
    })

    from .custom import create_condition

    condition = create_condition(match_variable, operator, match_values, selector, negate_condition, transforms)
    existing_rule["conditions"].append(condition)

    return Create(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name,
        "rule": existing_rule,
    })

def add_afd_rule_action(cmd, resource_group_name, profile_name, rule_set_name,
                        rule_name, action_name, cache_behavior=None, cache_duration=None,
                        header_action=None, header_name=None, header_value=None,
                        query_parameters=None, redirect_type=None, redirect_protocol=None, custom_hostname=None,
                        custom_path=None, custom_querystring=None, custom_fragment=None, source_pattern=None,
                        destination=None, preserve_unmatched_path=None, origin_group=None,
                        forwarding_protocol: ForwardingProtocol = None,
                        query_string_caching_behavior: AfdQueryStringCachingBehavior = None,
                        is_compression_enabled=None,
                        enable_caching=None):
    from azure.cli.command_modules.cdn.aaz.latest.afd.rule import Create, Show

    existing_rule = Show(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name
    })

    from .custom import create_action
    action = create_action(action_name, cache_behavior, cache_duration, header_action, header_name,
                           header_value, None, None if query_parameters is None else ",".join(query_parameters),
                           redirect_type, redirect_protocol, custom_hostname, custom_path, custom_querystring,
                           custom_fragment, source_pattern, destination, preserve_unmatched_path,
                           cmd=cmd, resource_group_name=resource_group_name,
                           forwarding_protocol=forwarding_protocol,
                           origin_group=origin_group, profile_name=profile_name,
                           query_string_caching_behavior=query_string_caching_behavior,
                           is_compression_enabled=is_compression_enabled,
                           enable_caching=enable_caching)

    existing_rule["actions"].append(action)

    return Create(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name,
        "rule": existing_rule,
    })

def remove_afd_rule_condition(cmd, resource_group_name, profile_name,
                              rule_set_name, rule_name, index):
    from azure.cli.command_modules.cdn.aaz.latest.afd.rule import Create, Show

    existing_rule = Show(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name
    })
    if len(existing_rule["conditions"]) > 1 and index < len(existing_rule["conditions"]):
        existing_rule["conditions"].pop(index)
    else:
        logger.warning("Invalid condition index found. This command will be skipped. Please check the rule.")

    return Create(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name,
        "rule": existing_rule,
    })


def remove_afd_rule_action(cmd, resource_group_name, profile_name, rule_set_name, rule_name, index):
    from azure.cli.command_modules.cdn.aaz.latest.afd.rule import Create, Show

    existing_rule = Show(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name
    })
    if len(existing_rule["actions"]) > 1 and index < len(existing_rule["actions"]):
        existing_rule["actions"].pop(index)
    else:
        logger.warning("Invalid condition index found. This command will be skipped. Please check the rule.")

    return Create(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name,
        "rule": existing_rule,
    })


def list_afd_rule_condition(cmd, resource_group_name,
                            profile_name, rule_set_name,
                            rule_name):
    from azure.cli.command_modules.cdn.aaz.latest.afd.rule import Show

    rule = Show(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name
    })

    return rule["conditions"]


def list_afd_rule_action(cmd, resource_group_name,
                         profile_name, rule_set_name,
                         rule_name):
    from azure.cli.command_modules.cdn.aaz.latest.afd.rule import Show

    rule = Show(cli_ctx=cmd.cli_ctx)(command_args={
        "resource_group": resource_group_name,
        "profile_name": profile_name,
        "rule_set_name": rule_set_name,
        "rule_name": rule_name
    })
    
    return rule["actions"]


from azure.cli.command_modules.cdn.aaz.latest.afd.origin import Create as _AFDOriginCreate
class AFDOriginCreate(_AFDOriginCreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZFileArg, AAZBoolArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.enable_private_link = AAZFileArg(options=['--enable-private-link'],
                                                  help="Indicates whether private link is enanbled on that origin.",
                                                  required=True,
                                                  fmt=AAZBoolArgFormat,)
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        if args.enable_private_link is None:
            args.private_link_location = None
            args.private_link_resource = None
            args.private_link_request_message = None
            args.private_link_sub_resource_type = None

from azure.cli.command_modules.cdn.aaz.latest.afd.origin import Update as _AFDOriginUpdate
class AFDOriginUpdate(_AFDOriginUpdate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZFileArg, AAZBoolArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.enable_private_link = AAZFileArg(options=['--enable-private-link'],
                                                  help="Indicates whether private link is enanbled on that origin.",
                                                  required=True,
                                                  fmt=AAZBoolArgFormat,)
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        if args.enable_private_link is None:
            args.private_link_location = None
            args.private_link_resource = None
            args.private_link_request_message = None
            args.private_link_sub_resource_type = None

from azure.cli.command_modules.cdn.aaz.latest.afd.route import Create as _AFDRouteCreate
class AFDRouteCreate(_AFDRouteCreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZFileArg, AAZBoolArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.enable_caching = AAZFileArg(options=['--enable-caching'],
                                                  help="Indicates whether caching is enanbled on that route.",
                                                  required=True,
                                                  fmt=AAZBoolArgFormat,)
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        if args.enable_caching is None:
            args.query_string_caching_behavior = None
            args.query_parameters = None

from azure.cli.command_modules.cdn.aaz.latest.afd.route import Update as _AFDRouteUpdate
class AFDRouteUpdate(_AFDRouteUpdate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZFileArg, AAZBoolArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.enable_caching = AAZFileArg(options=['--enable-caching'],
                                                  help="Indicates whether caching is enanbled on that route.",
                                                  required=True,
                                                  fmt=AAZBoolArgFormat,)
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        if args.enable_caching is None:
            args.query_string_caching_behavior = None
            args.query_parameters = None