# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .codec import Codec


class Video(Codec):
    """Base class for all video codecs.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: Image, H264Video

    :param label: Gets or sets the codec label.
    :type label: str
    :param odatatype: Constant filled by server.
    :type odatatype: str
    :param preserve_resolution_after_rotation: Gets or sets a value indicating
     whether to disable resolution change rotation.
    :type preserve_resolution_after_rotation: bool
    :param key_frame_interval: Gets or sets the distance between two key
     frames.
    :type key_frame_interval: timedelta
    :param stretch_mode: Gets or sets the Resolution Mode. Possible values
     include: 'None', 'AutoSize', 'AutoFit'
    :type stretch_mode: str or ~accounts.models.StretchMode
    :param sync_mode: Gets or sets the Video Sync Mode. Possible values
     include: 'Auto', 'Passthrough', 'Cfr', 'Vfr', 'Drop'
    :type sync_mode: str or ~accounts.models.VideoSyncMode
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
        'preserve_resolution_after_rotation': {'key': 'preserveResolutionAfterRotation', 'type': 'bool'},
        'key_frame_interval': {'key': 'keyFrameInterval', 'type': 'duration'},
        'stretch_mode': {'key': 'stretchMode', 'type': 'StretchMode'},
        'sync_mode': {'key': 'syncMode', 'type': 'VideoSyncMode'},
    }

    _subtype_map = {
        'odatatype': {'#Microsoft.Media.Image': 'Image', '#Microsoft.Media.H264Video': 'H264Video'}
    }

    def __init__(self, label=None, preserve_resolution_after_rotation=None, key_frame_interval=None, stretch_mode=None, sync_mode=None):
        super(Video, self).__init__(label=label)
        self.preserve_resolution_after_rotation = preserve_resolution_after_rotation
        self.key_frame_interval = key_frame_interval
        self.stretch_mode = stretch_mode
        self.sync_mode = sync_mode
        self.odatatype = '#Microsoft.Media.Video'
