# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network watcher",
)
class __CMDGroup(AAZCommandGroup):
    """Manage the Azure Network Watcher. Network Watcher assists with monitoring and diagnosing conditions at a network scenario level. To learn more visit https://docs.microsoft.com/azure/network-watcher/.
    """
    pass


class Create(AAZCommand):
    """Create a network watcher in the specified resource group.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}", "2022-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the network watcher.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.running_operation_ids = AAZListArg(
            options=["--running-operation-ids"],
            arg_group="Properties",
            help="List of running operation IDs.",
        )

        running_operation_ids = cls._args_schema.running_operation_ids
        running_operation_ids.Element = AAZIntArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkWatchersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("runningOperationIds", AAZListType, ".running_operation_ids")

            running_operation_ids = _builder.get(".properties.runningOperationIds")
            if running_operation_ids is not None:
                running_operation_ids.set_elements(AAZIntType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.running_operation_ids = AAZListType(
                serialized_name="runningOperationIds",
            )

            running_operation_ids = cls._schema_on_200_201.properties.running_operation_ids
            running_operation_ids.Element = AAZIntType()

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class Delete(AAZCommand):
    """Delete the specified network watcher resource.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkWatchersDelete(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class NetworkWatchersDelete(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    None,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [204]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_204,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "DELETE"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        def on_204(self, session):
            pass


@register_command(
    "network watcher list",
)
class List(AAZCommand):
    """List Network Watchers.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.network/networkwatchers", "2022-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkWatchersListAll(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        return result

    class NetworkWatchersListAll(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZStrType()
            _element.location = AAZStrType()
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.running_operation_ids = AAZListType(
                serialized_name="runningOperationIds",
            )

            running_operation_ids = cls._schema_on_200.value.Element.properties.running_operation_ids
            running_operation_ids.Element = AAZStrType()

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


@register_command(
    "network watcher run-configuration-diagnostic",
)
class RunConfigurationDiagnostic(AAZCommand):
    """Run a configuration diagnostic on a target resource.

    Requires that Network Watcher is enabled for the region in which the target is located.

    :example: Run configuration diagnostic on a VM with a single query.
        az network watcher run-configuration-diagnostic --resource {VM_ID} --direction Inbound --protocol TCP --source 12.11.12.14 --destination 10.1.1.4 --port 12100

    :example: Run configuration diagnostic on a VM with multiple queries.
        az network watcher run-configuration-diagnostic --resource {VM_ID} --queries '[{"direction": "Inbound", "protocol": "TCP", "source": "12.11.12.14", "destination": "10.1.1.4", "destinationPort": "12100"}, {"direction": "Inbound", "protocol": "TCP", "source": "12.11.12.0/32", "destination": "10.1.1.4", "destinationPort": "12100"}, {"direction": "Outbound", "protocol": "TCP", "source": "12.11.12.14", "destination": "10.1.1.4", "destinationPort": "12100"}]'
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/networkconfigurationdiagnostic", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.watcher_name = AAZStrArg(
            options=["--watcher-name"],
            help="Name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.watcher_rg = AAZResourceGroupNameArg(
            options=["--watcher-rg"],
            help="Name of the resource group the watcher is in.",
            required=True,
        )

        # define Arg Group "Parameters"

        # define Arg Group "Query"

        _args_schema = cls._args_schema
        _args_schema.queries = AAZListArg(
            options=["--queries"],
            arg_group="Query",
            help="JSON list of queries to use. Use `@{path}` to load from a file.",
            required=True,
        )

        queries = cls._args_schema.queries
        queries.Element = AAZObjectArg()

        _element = cls._args_schema.queries.Element
        _element.destination = AAZStrArg(
            options=["destination"],
            help="Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag.",
            required=True,
        )
        _element.destination_port = AAZStrArg(
            options=["destination-port"],
            help="Traffic destination port. Accepted values are '*' and a single port in the range (0 - 65535).",
            required=True,
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the traffic.",
            required=True,
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol to be verified on. Accepted values are '*', TCP, UDP.",
            required=True,
        )
        _element.source = AAZStrArg(
            options=["source"],
            help="Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.",
            required=True,
        )

        # define Arg Group "Target"

        _args_schema = cls._args_schema
        _args_schema.resource = AAZStrArg(
            options=["--resource"],
            arg_group="Target",
            help="Name or ID of the target resource to diagnose. If an ID is given, other resource arguments should not be given.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkWatchersGetNetworkConfigurationDiagnostic(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersGetNetworkConfigurationDiagnostic(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.watcher_rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("profiles", AAZListType, ".queries", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("targetResourceId", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            profiles = _builder.get(".profiles")
            if profiles is not None:
                profiles.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".profiles[]")
            if _elements is not None:
                _elements.set_prop("destination", AAZStrType, ".destination", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("destinationPort", AAZStrType, ".destination_port", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("source", AAZStrType, ".source", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _RunConfigurationDiagnosticHelper._build_schema_network_configuration_diagnostic_response_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network watcher show-next-hop",
)
class ShowNextHop(AAZCommand):
    """Get information on the `next hop` of a VM.

    Requires that Network Watcher is enabled for the region in which the VM is located. For more information about show-next-hop visit https://learn.microsoft.com/en-us/azure/network-watcher/diagnose-vm-network-routing-problem-cli.

    :example: Get the next hop from a VMs assigned IP address to a destination at 10.1.0.4.
        az network watcher show-next-hop -g MyResourceGroup --vm MyVm --source-ip 10.0.0.4 --dest-ip 10.1.0.4
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/nexthop", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.watcher_name = AAZStrArg(
            options=["--watcher-name"],
            help="Name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.watcher_rg = AAZResourceGroupNameArg(
            options=["--watcher-rg"],
            help="Name of the resource group the watcher is in.",
            required=True,
        )
        _args_schema.dest_ip = AAZStrArg(
            options=["--dest-ip"],
            help="Destination IPv4 address.",
            required=True,
        )
        _args_schema.source_ip = AAZStrArg(
            options=["--source-ip"],
            help="Source IPv4 address.",
            required=True,
        )
        _args_schema.nic = AAZStrArg(
            options=["--nic"],
            help="Name or ID of the NIC resource to test. If the VM has multiple NICs and IP forwarding is enabled on any of them, this parameter is required.",
        )
        _args_schema.vm = AAZStrArg(
            options=["--vm"],
            help="Name or ID of the VM to target. If the name of the VM is provided, the `--resource-group` is required.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkWatchersGetNextHop(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersGetNextHop(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.watcher_rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("destinationIPAddress", AAZStrType, ".dest_ip", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("sourceIPAddress", AAZStrType, ".source_ip", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("targetNicResourceId", AAZStrType, ".nic")
            _builder.set_prop("targetResourceId", AAZStrType, ".vm", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowNextHopHelper._build_schema_next_hop_result_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network watcher show-security-group-view",
)
class ShowSecurityGroupView(AAZCommand):
    """Get detailed security information on a VM for the currently configured network security group.

    For more information on using security group view visit https://learn.microsoft.com/en-us/azure/network-watcher/network-watcher-security-group-view-cli.

    :example: Get the network security group information for the specified VM.
        az network watcher show-security-group-view -g MyResourceGroup --vm MyVm
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/securitygroupview", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.watcher_name = AAZStrArg(
            options=["--watcher-name"],
            help="Name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.watcher_rg = AAZResourceGroupNameArg(
            options=["--watcher-rg"],
            help="Name of the resource group the watcher is in.",
            required=True,
        )
        _args_schema.vm = AAZStrArg(
            options=["--vm"],
            help="Name or ID of the VM to target. If the name of the VM is provided, the `--resource-group` is required.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkWatchersGetVMSecurityRules(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersGetVMSecurityRules(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.watcher_rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("targetResourceId", AAZStrType, ".vm", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowSecurityGroupViewHelper._build_schema_security_group_view_result_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network watcher show-topology",
)
class ShowTopology(AAZCommand):
    """Get the network topology of a resource group, virtual network or subnet.

    For more information about using network topology visit https://learn.microsoft.com/en-us/azure/network-watcher/view-network-topology.

    :example: Use show-topology to get the topology of resources within a resource group.
        az network watcher show-topology -g MyResourceGroup
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/topology", "2022-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.watcher_name = AAZStrArg(
            options=["--watcher-name"],
            help="Name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.watcher_rg = AAZResourceGroupNameArg(
            options=["--watcher-rg"],
            help="Name of the resource group the watcher is in.",
            required=True,
        )

        # define Arg Group "Target"

        _args_schema = cls._args_schema
        _args_schema.resource_group_name = AAZStrArg(
            options=["--resource-group-name"],
            arg_group="Target",
            help="Name of the target resource group to perform topology on.",
        )
        _args_schema.subnet = AAZStrArg(
            options=["--subnet"],
            arg_group="Target",
            help="Name or ID of the subnet to target. If name is used, --vnet NAME must also be supplied.",
        )
        _args_schema.vnet = AAZStrArg(
            options=["--vnet"],
            arg_group="Target",
            help="Name or ID of the virtual network to target.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkWatchersGetTopology(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersGetTopology(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.watcher_rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("targetResourceGroupName", AAZStrType, ".resource_group_name")
            _builder.set_prop("targetSubnet", AAZObjectType)
            _builder.set_prop("targetVirtualNetwork", AAZObjectType)

            target_subnet = _builder.get(".targetSubnet")
            if target_subnet is not None:
                target_subnet.set_prop("id", AAZStrType, ".subnet")

            target_virtual_network = _builder.get(".targetVirtualNetwork")
            if target_virtual_network is not None:
                target_virtual_network.set_prop("id", AAZStrType, ".vnet")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.created_date_time = AAZStrType(
                serialized_name="createdDateTime",
                flags={"read_only": True},
            )
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.last_modified = AAZStrType(
                serialized_name="lastModified",
                flags={"read_only": True},
            )
            _schema_on_200.resources = AAZListType()

            resources = cls._schema_on_200.resources
            resources.Element = AAZObjectType()

            _element = cls._schema_on_200.resources.Element
            _element.associations = AAZListType()
            _element.id = AAZStrType()
            _element.location = AAZStrType()
            _element.name = AAZStrType()

            associations = cls._schema_on_200.resources.Element.associations
            associations.Element = AAZObjectType()

            _element = cls._schema_on_200.resources.Element.associations.Element
            _element.association_type = AAZStrType(
                serialized_name="associationType",
            )
            _element.name = AAZStrType()
            _element.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            return cls._schema_on_200


@register_command(
    "network watcher test-connectivity",
    is_preview=True,
)
class TestConnectivity(AAZCommand):
    """Test if a connection can be established between a Virtual Machine and a given endpoint.

    To check connectivity between two VMs in different regions, use the VM ids instead of the VM names for the source and destination resource arguments. To register for this feature or see additional examples visit https://learn.microsoft.com/en-us/azure/network-watcher/network-watcher-connectivity-cli.

    :example: Check connectivity between two virtual machines in the same resource group over port 80.
        az network watcher test-connectivity -g MyResourceGroup --source-resource MyVmName1 --dest-resource MyVmName2 --dest-port 80

    :example: Check connectivity between two virtual machines in the same subscription in two different resource groups over port 80.
        az network watcher test-connectivity --source-resource MyVmId1 --dest-resource MyVmId2 --dest-port 80
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/connectivitycheck", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.watcher_name = AAZStrArg(
            options=["--watcher-name"],
            help="Name of the network watcher resource.",
            required=True,
            id_part="name",
        )
        _args_schema.watcher_rg = AAZResourceGroupNameArg(
            options=["--watcher-rg"],
            help="Name of the resource group the watcher is in.",
            required=True,
        )
        _args_schema.protocol = AAZStrArg(
            options=["--protocol"],
            help="Protocol to test on.",
            enum={"Http": "Http", "Https": "Https", "Icmp": "Icmp", "Tcp": "Tcp"},
        )
        _args_schema.source_port = AAZIntArg(
            options=["--source-port"],
            help="Port number from which to originate traffic.",
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=0,
            ),
        )
        _args_schema.source_resource = AAZStrArg(
            options=["--source-resource"],
            help="Name or ID of the resource from which to originate traffic. Currently only Virtual Machines are supported.",
            required=True,
        )

        # define Arg Group "Destination"

        _args_schema = cls._args_schema
        _args_schema.dest_address = AAZStrArg(
            options=["--dest-address"],
            arg_group="Destination",
            help="IP address or URI at which to receive traffic.",
        )
        _args_schema.dest_port = AAZIntArg(
            options=["--dest-port"],
            arg_group="Destination",
            help="Port number on which to receive traffic.",
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=0,
            ),
        )
        _args_schema.dest_resource = AAZStrArg(
            options=["--dest-resource"],
            arg_group="Destination",
            help="Name or ID of the resource to receive traffic. Currently only Virtual Machines are supported.",
        )

        # define Arg Group "HTTP Configuration"

        _args_schema = cls._args_schema
        _args_schema.headers_obj = AAZListArg(
            options=["--headers-obj"],
            arg_group="HTTP Configuration",
            help="List of HTTP headers.",
        )
        _args_schema.method = AAZStrArg(
            options=["--method"],
            arg_group="HTTP Configuration",
            help="HTTP method to use.",
            enum={"Get": "Get"},
        )
        _args_schema.valid_status_codes = AAZListArg(
            options=["--valid-status-codes"],
            arg_group="HTTP Configuration",
            help="Space-separated list of HTTP status codes considered valid.",
        )

        headers_obj = cls._args_schema.headers_obj
        headers_obj.Element = AAZObjectArg()

        _element = cls._args_schema.headers_obj.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name in HTTP header.",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value in HTTP header.",
        )

        valid_status_codes = cls._args_schema.valid_status_codes
        valid_status_codes.Element = AAZIntArg()

        # define Arg Group "Parameters"
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkWatchersCheckConnectivity(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersCheckConnectivity(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.watcher_rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("destination", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("protocol", AAZStrType, ".protocol")
            _builder.set_prop("protocolConfiguration", AAZObjectType)
            _builder.set_prop("source", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            destination = _builder.get(".destination")
            if destination is not None:
                destination.set_prop("address", AAZStrType, ".dest_address")
                destination.set_prop("port", AAZIntType, ".dest_port")
                destination.set_prop("resourceId", AAZStrType, ".dest_resource")

            protocol_configuration = _builder.get(".protocolConfiguration")
            if protocol_configuration is not None:
                protocol_configuration.set_prop("HTTPConfiguration", AAZObjectType)

            http_configuration = _builder.get(".protocolConfiguration.HTTPConfiguration")
            if http_configuration is not None:
                http_configuration.set_prop("headers", AAZListType, ".headers_obj")
                http_configuration.set_prop("method", AAZStrType, ".method")
                http_configuration.set_prop("validStatusCodes", AAZListType, ".valid_status_codes")

            headers = _builder.get(".protocolConfiguration.HTTPConfiguration.headers")
            if headers is not None:
                headers.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".protocolConfiguration.HTTPConfiguration.headers[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            valid_status_codes = _builder.get(".protocolConfiguration.HTTPConfiguration.validStatusCodes")
            if valid_status_codes is not None:
                valid_status_codes.set_elements(AAZIntType, ".")

            source = _builder.get(".source")
            if source is not None:
                source.set_prop("port", AAZIntType, ".source_port")
                source.set_prop("resourceId", AAZStrType, ".source_resource", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _TestConnectivityHelper._build_schema_connectivity_information_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network watcher test-ip-flow",
)
class TestIpFlow(AAZCommand):
    """Test IP flow to/from a VM given the currently configured network security group rules.

    Requires that Network Watcher is enabled for the region in which the VM is located. For more information visit https://learn.microsoft.com/en-us/azure/network-watcher/diagnose-vm-network-traffic-filtering-problem-cli.

    :example: Run test-ip-flow verify to test logical connectivity from a VM to the specified destination IPv4 address and port.
        az network watcher test-ip-flow -g MyResourceGroup --direction Outbound --protocol TCP --local 10.0.0.4:* --remote 10.1.0.4:80 --vm MyVm
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/ipflowverify", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.watcher_name = AAZStrArg(
            options=["--watcher-name"],
            help="Name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.watcher_rg = AAZResourceGroupNameArg(
            options=["--watcher-rg"],
            help="Name of the resource group the watcher is in.",
            required=True,
        )
        _args_schema.direction = AAZStrArg(
            options=["--direction"],
            help="Direction of the packet relative to the VM.",
            required=True,
            enum={"Inbound": "Inbound", "Outbound": "Outbound"},
        )
        _args_schema.protocol = AAZStrArg(
            options=["--protocol"],
            help="Protocol to test.",
            required=True,
            enum={"TCP": "TCP", "UDP": "UDP"},
        )
        _args_schema.nic = AAZStrArg(
            options=["--nic"],
            help="Name or ID of the NIC resource to test. If the VM has multiple NICs and IP forwarding is enabled on any of them, this parameter is required.",
        )
        _args_schema.vm = AAZStrArg(
            options=["--vm"],
            help="Name or ID of the VM to target. If the name of the VM is provided, the `--resource-group` is required.",
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.local_ip_address = AAZStrArg(
            options=["--local-ip-address"],
            arg_group="Parameters",
            help="The local IP address. Acceptable values are valid IPv4 addresses.",
            required=True,
        )
        _args_schema.local_port = AAZStrArg(
            options=["--local-port"],
            arg_group="Parameters",
            help="The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.",
            required=True,
        )
        _args_schema.remote_ip_address = AAZStrArg(
            options=["--remote-ip-address"],
            arg_group="Parameters",
            help="The remote IP address. Acceptable values are valid IPv4 addresses.",
            required=True,
        )
        _args_schema.remote_port = AAZStrArg(
            options=["--remote-port"],
            arg_group="Parameters",
            help="The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkWatchersVerifyIPFlow(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersVerifyIPFlow(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.watcher_rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("localIPAddress", AAZStrType, ".local_ip_address", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("localPort", AAZStrType, ".local_port", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("remoteIPAddress", AAZStrType, ".remote_ip_address", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("remotePort", AAZStrType, ".remote_port", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("targetNicResourceId", AAZStrType, ".nic")
            _builder.set_prop("targetResourceId", AAZStrType, ".vm", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _TestIpFlowHelper._build_schema_verification_ip_flow_result_read(cls._schema_on_200)

            return cls._schema_on_200


class Update(AAZCommand):
    """Update a network watcher in the specified resource group.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the network watcher.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.running_operation_ids = AAZListArg(
            options=["--running-operation-ids"],
            arg_group="Properties",
            help="List of running operation IDs.",
            nullable=True,
        )

        running_operation_ids = cls._args_schema.running_operation_ids
        running_operation_ids.Element = AAZIntArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkWatchersGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.NetworkWatchersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkWatchersGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_network_watcher_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkWatchersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkWatcherName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_network_watcher_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("runningOperationIds", AAZListType, ".running_operation_ids")

            running_operation_ids = _builder.get(".properties.runningOperationIds")
            if running_operation_ids is not None:
                running_operation_ids.set_elements(AAZIntType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _RunConfigurationDiagnosticHelper:
    _schema_network_configuration_diagnostic_response_read = None


    @classmethod
    def _build_schema_network_configuration_diagnostic_response_read(cls, _schema):
        if cls._schema_network_configuration_diagnostic_response_read is not None:
            _schema.results = cls._schema_network_configuration_diagnostic_response_read.results
            return

        cls._schema_network_configuration_diagnostic_response_read = _schema_network_configuration_diagnostic_response_read = AAZObjectType()

        network_configuration_diagnostic_response_read = _schema_network_configuration_diagnostic_response_read
        network_configuration_diagnostic_response_read.results = AAZListType(
            flags={"read_only": True},
        )

        results = _schema_network_configuration_diagnostic_response_read.results
        results.Element = AAZObjectType()

        _element = _schema_network_configuration_diagnostic_response_read.results.Element
        _element.network_security_group_result = AAZObjectType(
            serialized_name="networkSecurityGroupResult",
        )
        _element.profile = AAZObjectType()

        network_security_group_result = _schema_network_configuration_diagnostic_response_read.results.Element.network_security_group_result
        network_security_group_result.evaluated_network_security_groups = AAZListType(
            serialized_name="evaluatedNetworkSecurityGroups",
            flags={"read_only": True},
        )
        network_security_group_result.security_rule_access_result = AAZStrType(
            serialized_name="securityRuleAccessResult",
        )

        evaluated_network_security_groups = _schema_network_configuration_diagnostic_response_read.results.Element.network_security_group_result.evaluated_network_security_groups
        evaluated_network_security_groups.Element = AAZObjectType()

        _element = _schema_network_configuration_diagnostic_response_read.results.Element.network_security_group_result.evaluated_network_security_groups.Element
        _element.applied_to = AAZStrType(
            serialized_name="appliedTo",
        )
        _element.matched_rule = AAZObjectType(
            serialized_name="matchedRule",
        )
        _element.network_security_group_id = AAZStrType(
            serialized_name="networkSecurityGroupId",
        )
        _element.rules_evaluation_result = AAZListType(
            serialized_name="rulesEvaluationResult",
            flags={"read_only": True},
        )

        matched_rule = _schema_network_configuration_diagnostic_response_read.results.Element.network_security_group_result.evaluated_network_security_groups.Element.matched_rule
        matched_rule.action = AAZStrType()
        matched_rule.rule_name = AAZStrType(
            serialized_name="ruleName",
        )

        rules_evaluation_result = _schema_network_configuration_diagnostic_response_read.results.Element.network_security_group_result.evaluated_network_security_groups.Element.rules_evaluation_result
        rules_evaluation_result.Element = AAZObjectType()

        _element = _schema_network_configuration_diagnostic_response_read.results.Element.network_security_group_result.evaluated_network_security_groups.Element.rules_evaluation_result.Element
        _element.destination_matched = AAZBoolType(
            serialized_name="destinationMatched",
        )
        _element.destination_port_matched = AAZBoolType(
            serialized_name="destinationPortMatched",
        )
        _element.name = AAZStrType()
        _element.protocol_matched = AAZBoolType(
            serialized_name="protocolMatched",
        )
        _element.source_matched = AAZBoolType(
            serialized_name="sourceMatched",
        )
        _element.source_port_matched = AAZBoolType(
            serialized_name="sourcePortMatched",
        )

        profile = _schema_network_configuration_diagnostic_response_read.results.Element.profile
        profile.destination = AAZStrType(
            flags={"required": True},
        )
        profile.destination_port = AAZStrType(
            serialized_name="destinationPort",
            flags={"required": True},
        )
        profile.direction = AAZStrType(
            flags={"required": True},
        )
        profile.protocol = AAZStrType(
            flags={"required": True},
        )
        profile.source = AAZStrType(
            flags={"required": True},
        )

        _schema.results = cls._schema_network_configuration_diagnostic_response_read.results


class _ShowNextHopHelper:
    _schema_next_hop_result_read = None


    @classmethod
    def _build_schema_next_hop_result_read(cls, _schema):
        if cls._schema_next_hop_result_read is not None:
            _schema.next_hop_ip_address = cls._schema_next_hop_result_read.next_hop_ip_address
            _schema.next_hop_type = cls._schema_next_hop_result_read.next_hop_type
            _schema.route_table_id = cls._schema_next_hop_result_read.route_table_id
            return

        cls._schema_next_hop_result_read = _schema_next_hop_result_read = AAZObjectType()

        next_hop_result_read = _schema_next_hop_result_read
        next_hop_result_read.next_hop_ip_address = AAZStrType(
            serialized_name="nextHopIpAddress",
        )
        next_hop_result_read.next_hop_type = AAZStrType(
            serialized_name="nextHopType",
        )
        next_hop_result_read.route_table_id = AAZStrType(
            serialized_name="routeTableId",
        )

        _schema.next_hop_ip_address = cls._schema_next_hop_result_read.next_hop_ip_address
        _schema.next_hop_type = cls._schema_next_hop_result_read.next_hop_type
        _schema.route_table_id = cls._schema_next_hop_result_read.route_table_id


class _ShowSecurityGroupViewHelper:
    _schema_application_security_group_read = None

    _schema_security_group_view_result_read = None

    _schema_security_rule_read = None


    @classmethod
    def _build_schema_application_security_group_read(cls, _schema):
        if cls._schema_application_security_group_read is not None:
            _schema.etag = cls._schema_application_security_group_read.etag
            _schema.id = cls._schema_application_security_group_read.id
            _schema.location = cls._schema_application_security_group_read.location
            _schema.name = cls._schema_application_security_group_read.name
            _schema.properties = cls._schema_application_security_group_read.properties
            _schema.tags = cls._schema_application_security_group_read.tags
            _schema.type = cls._schema_application_security_group_read.type
            return

        cls._schema_application_security_group_read = _schema_application_security_group_read = AAZObjectType()

        application_security_group_read = _schema_application_security_group_read
        application_security_group_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        application_security_group_read.id = AAZStrType()
        application_security_group_read.location = AAZStrType()
        application_security_group_read.name = AAZStrType(
            flags={"read_only": True},
        )
        application_security_group_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        application_security_group_read.tags = AAZDictType()
        application_security_group_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_application_security_group_read.properties
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.resource_guid = AAZStrType(
            serialized_name="resourceGuid",
            flags={"read_only": True},
        )

        tags = _schema_application_security_group_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_application_security_group_read.etag
        _schema.id = cls._schema_application_security_group_read.id
        _schema.location = cls._schema_application_security_group_read.location
        _schema.name = cls._schema_application_security_group_read.name
        _schema.properties = cls._schema_application_security_group_read.properties
        _schema.tags = cls._schema_application_security_group_read.tags
        _schema.type = cls._schema_application_security_group_read.type

    @classmethod
    def _build_schema_security_group_view_result_read(cls, _schema):
        if cls._schema_security_group_view_result_read is not None:
            _schema.network_interfaces = cls._schema_security_group_view_result_read.network_interfaces
            return

        cls._schema_security_group_view_result_read = _schema_security_group_view_result_read = AAZObjectType()

        security_group_view_result_read = _schema_security_group_view_result_read
        security_group_view_result_read.network_interfaces = AAZListType(
            serialized_name="networkInterfaces",
        )

        network_interfaces = _schema_security_group_view_result_read.network_interfaces
        network_interfaces.Element = AAZObjectType()

        _element = _schema_security_group_view_result_read.network_interfaces.Element
        _element.id = AAZStrType()
        _element.security_rule_associations = AAZObjectType(
            serialized_name="securityRuleAssociations",
        )

        security_rule_associations = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations
        security_rule_associations.default_security_rules = AAZListType(
            serialized_name="defaultSecurityRules",
        )
        security_rule_associations.effective_security_rules = AAZListType(
            serialized_name="effectiveSecurityRules",
        )
        security_rule_associations.network_interface_association = AAZObjectType(
            serialized_name="networkInterfaceAssociation",
        )
        security_rule_associations.subnet_association = AAZObjectType(
            serialized_name="subnetAssociation",
        )

        default_security_rules = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.default_security_rules
        default_security_rules.Element = AAZObjectType()
        cls._build_schema_security_rule_read(default_security_rules.Element)

        effective_security_rules = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules
        effective_security_rules.Element = AAZObjectType()

        _element = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element
        _element.access = AAZStrType()
        _element.destination_address_prefix = AAZStrType(
            serialized_name="destinationAddressPrefix",
        )
        _element.destination_address_prefixes = AAZListType(
            serialized_name="destinationAddressPrefixes",
        )
        _element.destination_port_range = AAZStrType(
            serialized_name="destinationPortRange",
        )
        _element.destination_port_ranges = AAZListType(
            serialized_name="destinationPortRanges",
        )
        _element.direction = AAZStrType()
        _element.expanded_destination_address_prefix = AAZListType(
            serialized_name="expandedDestinationAddressPrefix",
        )
        _element.expanded_source_address_prefix = AAZListType(
            serialized_name="expandedSourceAddressPrefix",
        )
        _element.name = AAZStrType()
        _element.priority = AAZIntType()
        _element.protocol = AAZStrType()
        _element.source_address_prefix = AAZStrType(
            serialized_name="sourceAddressPrefix",
        )
        _element.source_address_prefixes = AAZListType(
            serialized_name="sourceAddressPrefixes",
        )
        _element.source_port_range = AAZStrType(
            serialized_name="sourcePortRange",
        )
        _element.source_port_ranges = AAZListType(
            serialized_name="sourcePortRanges",
        )

        destination_address_prefixes = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element.destination_address_prefixes
        destination_address_prefixes.Element = AAZStrType()

        destination_port_ranges = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element.destination_port_ranges
        destination_port_ranges.Element = AAZStrType()

        expanded_destination_address_prefix = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element.expanded_destination_address_prefix
        expanded_destination_address_prefix.Element = AAZStrType()

        expanded_source_address_prefix = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element.expanded_source_address_prefix
        expanded_source_address_prefix.Element = AAZStrType()

        source_address_prefixes = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element.source_address_prefixes
        source_address_prefixes.Element = AAZStrType()

        source_port_ranges = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.effective_security_rules.Element.source_port_ranges
        source_port_ranges.Element = AAZStrType()

        network_interface_association = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.network_interface_association
        network_interface_association.id = AAZStrType(
            flags={"read_only": True},
        )
        network_interface_association.security_rules = AAZListType(
            serialized_name="securityRules",
        )

        security_rules = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.network_interface_association.security_rules
        security_rules.Element = AAZObjectType()
        cls._build_schema_security_rule_read(security_rules.Element)

        subnet_association = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.subnet_association
        subnet_association.id = AAZStrType(
            flags={"read_only": True},
        )
        subnet_association.security_rules = AAZListType(
            serialized_name="securityRules",
        )

        security_rules = _schema_security_group_view_result_read.network_interfaces.Element.security_rule_associations.subnet_association.security_rules
        security_rules.Element = AAZObjectType()
        cls._build_schema_security_rule_read(security_rules.Element)

        _schema.network_interfaces = cls._schema_security_group_view_result_read.network_interfaces

    @classmethod
    def _build_schema_security_rule_read(cls, _schema):
        if cls._schema_security_rule_read is not None:
            _schema.etag = cls._schema_security_rule_read.etag
            _schema.id = cls._schema_security_rule_read.id
            _schema.name = cls._schema_security_rule_read.name
            _schema.properties = cls._schema_security_rule_read.properties
            _schema.type = cls._schema_security_rule_read.type
            return

        cls._schema_security_rule_read = _schema_security_rule_read = AAZObjectType()

        security_rule_read = _schema_security_rule_read
        security_rule_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        security_rule_read.id = AAZStrType()
        security_rule_read.name = AAZStrType()
        security_rule_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        security_rule_read.type = AAZStrType()

        properties = _schema_security_rule_read.properties
        properties.access = AAZStrType(
            flags={"required": True},
        )
        properties.description = AAZStrType()
        properties.destination_address_prefix = AAZStrType(
            serialized_name="destinationAddressPrefix",
        )
        properties.destination_address_prefixes = AAZListType(
            serialized_name="destinationAddressPrefixes",
        )
        properties.destination_application_security_groups = AAZListType(
            serialized_name="destinationApplicationSecurityGroups",
        )
        properties.destination_port_range = AAZStrType(
            serialized_name="destinationPortRange",
        )
        properties.destination_port_ranges = AAZListType(
            serialized_name="destinationPortRanges",
        )
        properties.direction = AAZStrType(
            flags={"required": True},
        )
        properties.priority = AAZIntType()
        properties.protocol = AAZStrType(
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.source_address_prefix = AAZStrType(
            serialized_name="sourceAddressPrefix",
        )
        properties.source_address_prefixes = AAZListType(
            serialized_name="sourceAddressPrefixes",
        )
        properties.source_application_security_groups = AAZListType(
            serialized_name="sourceApplicationSecurityGroups",
        )
        properties.source_port_range = AAZStrType(
            serialized_name="sourcePortRange",
        )
        properties.source_port_ranges = AAZListType(
            serialized_name="sourcePortRanges",
        )

        destination_address_prefixes = _schema_security_rule_read.properties.destination_address_prefixes
        destination_address_prefixes.Element = AAZStrType()

        destination_application_security_groups = _schema_security_rule_read.properties.destination_application_security_groups
        destination_application_security_groups.Element = AAZObjectType()
        cls._build_schema_application_security_group_read(destination_application_security_groups.Element)

        destination_port_ranges = _schema_security_rule_read.properties.destination_port_ranges
        destination_port_ranges.Element = AAZStrType()

        source_address_prefixes = _schema_security_rule_read.properties.source_address_prefixes
        source_address_prefixes.Element = AAZStrType()

        source_application_security_groups = _schema_security_rule_read.properties.source_application_security_groups
        source_application_security_groups.Element = AAZObjectType()
        cls._build_schema_application_security_group_read(source_application_security_groups.Element)

        source_port_ranges = _schema_security_rule_read.properties.source_port_ranges
        source_port_ranges.Element = AAZStrType()

        _schema.etag = cls._schema_security_rule_read.etag
        _schema.id = cls._schema_security_rule_read.id
        _schema.name = cls._schema_security_rule_read.name
        _schema.properties = cls._schema_security_rule_read.properties
        _schema.type = cls._schema_security_rule_read.type


class _TestConnectivityHelper:
    _schema_connectivity_information_read = None

    _schema_connectivity_issue_read = None

    _schema_hop_link_read = None


    @classmethod
    def _build_schema_connectivity_information_read(cls, _schema):
        if cls._schema_connectivity_information_read is not None:
            _schema.avg_latency_in_ms = cls._schema_connectivity_information_read.avg_latency_in_ms
            _schema.connection_status = cls._schema_connectivity_information_read.connection_status
            _schema.hops = cls._schema_connectivity_information_read.hops
            _schema.max_latency_in_ms = cls._schema_connectivity_information_read.max_latency_in_ms
            _schema.min_latency_in_ms = cls._schema_connectivity_information_read.min_latency_in_ms
            _schema.probes_failed = cls._schema_connectivity_information_read.probes_failed
            _schema.probes_sent = cls._schema_connectivity_information_read.probes_sent
            return

        cls._schema_connectivity_information_read = _schema_connectivity_information_read = AAZObjectType()

        connectivity_information_read = _schema_connectivity_information_read
        connectivity_information_read.avg_latency_in_ms = AAZIntType(
            serialized_name="avgLatencyInMs",
            flags={"read_only": True},
        )
        connectivity_information_read.connection_status = AAZStrType(
            serialized_name="connectionStatus",
            flags={"read_only": True},
        )
        connectivity_information_read.hops = AAZListType(
            flags={"read_only": True},
        )
        connectivity_information_read.max_latency_in_ms = AAZIntType(
            serialized_name="maxLatencyInMs",
            flags={"read_only": True},
        )
        connectivity_information_read.min_latency_in_ms = AAZIntType(
            serialized_name="minLatencyInMs",
            flags={"read_only": True},
        )
        connectivity_information_read.probes_failed = AAZIntType(
            serialized_name="probesFailed",
            flags={"read_only": True},
        )
        connectivity_information_read.probes_sent = AAZIntType(
            serialized_name="probesSent",
            flags={"read_only": True},
        )

        hops = _schema_connectivity_information_read.hops
        hops.Element = AAZObjectType()

        _element = _schema_connectivity_information_read.hops.Element
        _element.address = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.issues = AAZListType(
            flags={"read_only": True},
        )
        _element.links = AAZListType(
            flags={"read_only": True},
        )
        _element.next_hop_ids = AAZListType(
            serialized_name="nextHopIds",
            flags={"read_only": True},
        )
        _element.previous_hop_ids = AAZListType(
            serialized_name="previousHopIds",
            flags={"read_only": True},
        )
        _element.previous_links = AAZListType(
            serialized_name="previousLinks",
            flags={"read_only": True},
        )
        _element.resource_id = AAZStrType(
            serialized_name="resourceId",
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        issues = _schema_connectivity_information_read.hops.Element.issues
        issues.Element = AAZObjectType()
        cls._build_schema_connectivity_issue_read(issues.Element)

        links = _schema_connectivity_information_read.hops.Element.links
        links.Element = AAZObjectType()
        cls._build_schema_hop_link_read(links.Element)

        next_hop_ids = _schema_connectivity_information_read.hops.Element.next_hop_ids
        next_hop_ids.Element = AAZStrType()

        previous_hop_ids = _schema_connectivity_information_read.hops.Element.previous_hop_ids
        previous_hop_ids.Element = AAZStrType()

        previous_links = _schema_connectivity_information_read.hops.Element.previous_links
        previous_links.Element = AAZObjectType()
        cls._build_schema_hop_link_read(previous_links.Element)

        _schema.avg_latency_in_ms = cls._schema_connectivity_information_read.avg_latency_in_ms
        _schema.connection_status = cls._schema_connectivity_information_read.connection_status
        _schema.hops = cls._schema_connectivity_information_read.hops
        _schema.max_latency_in_ms = cls._schema_connectivity_information_read.max_latency_in_ms
        _schema.min_latency_in_ms = cls._schema_connectivity_information_read.min_latency_in_ms
        _schema.probes_failed = cls._schema_connectivity_information_read.probes_failed
        _schema.probes_sent = cls._schema_connectivity_information_read.probes_sent

    @classmethod
    def _build_schema_connectivity_issue_read(cls, _schema):
        if cls._schema_connectivity_issue_read is not None:
            _schema.context = cls._schema_connectivity_issue_read.context
            _schema.origin = cls._schema_connectivity_issue_read.origin
            _schema.severity = cls._schema_connectivity_issue_read.severity
            _schema.type = cls._schema_connectivity_issue_read.type
            return

        cls._schema_connectivity_issue_read = _schema_connectivity_issue_read = AAZObjectType()

        connectivity_issue_read = _schema_connectivity_issue_read
        connectivity_issue_read.context = AAZListType(
            flags={"read_only": True},
        )
        connectivity_issue_read.origin = AAZStrType(
            flags={"read_only": True},
        )
        connectivity_issue_read.severity = AAZStrType(
            flags={"read_only": True},
        )
        connectivity_issue_read.type = AAZStrType(
            flags={"read_only": True},
        )

        context = _schema_connectivity_issue_read.context
        context.Element = AAZDictType()

        _element = _schema_connectivity_issue_read.context.Element
        _element.Element = AAZStrType()

        _schema.context = cls._schema_connectivity_issue_read.context
        _schema.origin = cls._schema_connectivity_issue_read.origin
        _schema.severity = cls._schema_connectivity_issue_read.severity
        _schema.type = cls._schema_connectivity_issue_read.type

    @classmethod
    def _build_schema_hop_link_read(cls, _schema):
        if cls._schema_hop_link_read is not None:
            _schema.context = cls._schema_hop_link_read.context
            _schema.issues = cls._schema_hop_link_read.issues
            _schema.link_type = cls._schema_hop_link_read.link_type
            _schema.next_hop_id = cls._schema_hop_link_read.next_hop_id
            _schema.properties = cls._schema_hop_link_read.properties
            _schema.resource_id = cls._schema_hop_link_read.resource_id
            return

        cls._schema_hop_link_read = _schema_hop_link_read = AAZObjectType()

        hop_link_read = _schema_hop_link_read
        hop_link_read.context = AAZDictType(
            flags={"read_only": True},
        )
        hop_link_read.issues = AAZListType(
            flags={"read_only": True},
        )
        hop_link_read.link_type = AAZStrType(
            serialized_name="linkType",
            flags={"read_only": True},
        )
        hop_link_read.next_hop_id = AAZStrType(
            serialized_name="nextHopId",
            flags={"read_only": True},
        )
        hop_link_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        hop_link_read.resource_id = AAZStrType(
            serialized_name="resourceId",
            flags={"read_only": True},
        )

        context = _schema_hop_link_read.context
        context.Element = AAZStrType()

        issues = _schema_hop_link_read.issues
        issues.Element = AAZObjectType()
        cls._build_schema_connectivity_issue_read(issues.Element)

        properties = _schema_hop_link_read.properties
        properties.round_trip_time_avg = AAZIntType(
            serialized_name="roundTripTimeAvg",
            flags={"read_only": True},
        )
        properties.round_trip_time_max = AAZIntType(
            serialized_name="roundTripTimeMax",
            flags={"read_only": True},
        )
        properties.round_trip_time_min = AAZIntType(
            serialized_name="roundTripTimeMin",
            flags={"read_only": True},
        )

        _schema.context = cls._schema_hop_link_read.context
        _schema.issues = cls._schema_hop_link_read.issues
        _schema.link_type = cls._schema_hop_link_read.link_type
        _schema.next_hop_id = cls._schema_hop_link_read.next_hop_id
        _schema.properties = cls._schema_hop_link_read.properties
        _schema.resource_id = cls._schema_hop_link_read.resource_id


class _TestIpFlowHelper:
    _schema_verification_ip_flow_result_read = None


    @classmethod
    def _build_schema_verification_ip_flow_result_read(cls, _schema):
        if cls._schema_verification_ip_flow_result_read is not None:
            _schema.access = cls._schema_verification_ip_flow_result_read.access
            _schema.rule_name = cls._schema_verification_ip_flow_result_read.rule_name
            return

        cls._schema_verification_ip_flow_result_read = _schema_verification_ip_flow_result_read = AAZObjectType()

        verification_ip_flow_result_read = _schema_verification_ip_flow_result_read
        verification_ip_flow_result_read.access = AAZStrType()
        verification_ip_flow_result_read.rule_name = AAZStrType(
            serialized_name="ruleName",
        )

        _schema.access = cls._schema_verification_ip_flow_result_read.access
        _schema.rule_name = cls._schema_verification_ip_flow_result_read.rule_name


class _UpdateHelper:
    _schema_network_watcher_read = None


    @classmethod
    def _build_schema_network_watcher_read(cls, _schema):
        if cls._schema_network_watcher_read is not None:
            _schema.etag = cls._schema_network_watcher_read.etag
            _schema.id = cls._schema_network_watcher_read.id
            _schema.location = cls._schema_network_watcher_read.location
            _schema.name = cls._schema_network_watcher_read.name
            _schema.properties = cls._schema_network_watcher_read.properties
            _schema.tags = cls._schema_network_watcher_read.tags
            _schema.type = cls._schema_network_watcher_read.type
            return

        cls._schema_network_watcher_read = _schema_network_watcher_read = AAZObjectType()

        network_watcher_read = _schema_network_watcher_read
        network_watcher_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        network_watcher_read.id = AAZStrType()
        network_watcher_read.location = AAZStrType()
        network_watcher_read.name = AAZStrType(
            flags={"read_only": True},
        )
        network_watcher_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        network_watcher_read.tags = AAZDictType()
        network_watcher_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_network_watcher_read.properties
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.running_operation_ids = AAZListType(
            serialized_name="runningOperationIds",
        )

        running_operation_ids = _schema_network_watcher_read.properties.running_operation_ids
        running_operation_ids.Element = AAZIntType()

        tags = _schema_network_watcher_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_network_watcher_read.etag
        _schema.id = cls._schema_network_watcher_read.id
        _schema.location = cls._schema_network_watcher_read.location
        _schema.name = cls._schema_network_watcher_read.name
        _schema.properties = cls._schema_network_watcher_read.properties
        _schema.tags = cls._schema_network_watcher_read.tags
        _schema.type = cls._schema_network_watcher_read.type


__all__ = ["Create","Delete","List","RunConfigurationDiagnostic","ShowNextHop","ShowSecurityGroupView","ShowTopology","TestConnectivity","TestIpFlow","Update","__CMDGroup"]
