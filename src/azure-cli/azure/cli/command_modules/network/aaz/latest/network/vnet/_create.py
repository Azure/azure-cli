# Resources:
#   - /subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}

from azure.cli.core.aaz import AAZCommand, register_command, AAZStrArg, AAZDictArg, AAZObjectArg, AAZListArg, AAZIntArg, AAZArgEnum, AAZBoolArg, AAZFloatArg


@register_command("network vnet create")
class Create(AAZCommand):
    """ Create a virtual network.

    You may also create a subnet at the same time by specifying a subnet name and (optionally) an address prefix.
    To learn about how to create a virtual network visit https://docs.microsoft.com/azure/virtual-network/manage-virtual-network#create-a-virtual-network

    :example: Create a virtual network.
        az network vnet create -g MyResourceGroup -n MyVnet

    :example: Create a virtual network with a specific address prefix and one subnet.
        az network vnet create -g MyResourceGroup -n MyVnet --address-prefix 10.0.0.0/16
        --subnet-name MySubnet --subnet-prefix 10.0.0.0/24

    :example: Create a virtual network. (autogenerated)
        az network vnet create --address-prefixes 10.0.0.0/16 --name MyVirtualNetwork --resource-group MyResourceGroup
        --subnet-name MyAseSubnet --subnet-prefixes 10.0.0.0/24

    """

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        schema = super()._build_arguments_schema(*args, **kwargs)

        schema.virtual_network_name = AAZStrArg(
            options=["--virtual-network-name", "--name", "-n"], required=True, id_part="name",
            help="The name of the virtual network.",
        )
        schema.location = AAZStrArg(
            options=["--location", "-l"], required=True,
            help="Resource location.",
        )
        schema.count = AAZIntArg(
            options=["--count", '-c'],
            help="Integer argument"
        )
        schema.enable = AAZBoolArg(
            options=["--enable", "-e"],
            help="Boolean argument"
        )
        schema.float = AAZFloatArg(
            options=["--float", "-f"],
            help="Float argument"
        )
        schema.encrypt_type = AAZStrArg(
            options=["--encrypt-type", "--et"],
            enum=AAZArgEnum({
                "AS": "a-secret",
                "BS": "b-secret"
            }),
            help="Encrypt Type"
        )

        schema.tags = AAZDictArg(
            options=["--tags"],
            help="Resource tags."
        )
        schema.tags.Element = AAZStrArg()

        schema.flags = AAZListArg(
            options=["--flags"],
            help="Flags"
        )
        schema.flags.Element = AAZIntArg()

        schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            help="The extended location of the virtual network."
        )
        schema.extended_location.name = AAZStrArg(
            help="The name of the extended location."
        )
        schema.extended_location.type = AAZStrArg(
            help="The type of the extended location.",
            enum=AAZArgEnum(["EdgeZone", "CoreZone"])
        )

        schema.address_space = AAZObjectArg(
            options=["--address-space"],
            help="The AddressSpace that contains an array of IP address ranges that can be used by subnets."
        )
        schema.address_space.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="A list of address blocks reserved for this virtual network in CIDR notation.",
        )
        schema.address_space.address_prefixes.Element = AAZStrArg()

        schema.dhcp_options = AAZObjectArg(
            options=["--dhcp-options"],
            help="The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network."
        )
        schema.dhcp_options.dns_servers = AAZListArg(
            options=["dns-servers"],
            help="The list of DNS servers IP addresses."
        )
        schema.dhcp_options.dns_servers.Element = AAZStrArg()

        schema.flow_timeout_in_minutes = AAZIntArg(
            options=["--flow-timeout-in-minutes"],
            help="The FlowTimeout value (in minutes) for the Virtual Network"
        )

        schema.subnets = AAZListArg(
            options=["--subnets"],
            help="A list of subnets in a Virtual Network.",
        )
        schema.subnets.Element = AAZObjectArg()
        schema.subnets.Element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The address prefix for the subnet."
        )
        schema.subnets.Element.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="List of address prefixes for the subnet.",
        )
        schema.subnets.Element.address_prefixes.Element = AAZStrArg()
        schema.subnets.Element.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference to the NetworkSecurityGroup resource.",
        )
        schema.subnets.Element.network_security_group.id = AAZStrArg(
            options=["id"],
            help="Resource ID."
        )

        return schema



