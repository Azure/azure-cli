# Resources:
#   - /subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}

from azure.cli.core.aaz import *


@register_command("network vnet create", is_experimental=True)
class Create(AAZCommand):
    """ Create a virtual network.

    You may also create a subnet at the same time by specifying a subnet name and (optionally) an address prefix.
    To learn about how to create a virtual network visit https://docs.microsoft.com/azure/virtual-network/manage-virtual-network#create-a-virtual-network

    :example: Create a virtual network.
        az network vnet create -g MyResourceGroup -n MyVnet

    :example: Create a virtual network with a specific address prefix and one subnet.
        az network vnet create -g MyResourceGroup -n MyVnet --address-prefix 10.0.0.0/16
        --subnet-name MySubnet --subnet-prefix 10.0.0.0/24

    :example: Create a virtual network. (autogenerated)
        az network vnet create --address-prefixes 10.0.0.0/16 --name MyVirtualNetwork --resource-group MyResourceGroup
        --subnet-name MyAseSubnet --subnet-prefixes 10.0.0.0/24

    """

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema

        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        _args_schema = cls._args_schema
        _args_schema.virtual_network_name = AAZStrArg(
            options=["--virtual-network-name", "--name", "-n"], required=True, id_part="name",
            help="The name of the virtual network.",
        )
        _args_schema.location = AAZStrArg(
            options=["--location", "-l"], required=True,
            help="Resource location.",
        )
        _args_schema.count = AAZIntArg(
            options=["--count", '-c'],
            help="Integer argument"
        )
        _args_schema.enable = AAZBoolArg(
            options=["--enable", "-e"],
            help="Boolean argument"
        )
        _args_schema.float = AAZFloatArg(
            options=["--float", "-f"],
            help="Float argument"
        )
        _args_schema.encrypt_type = AAZStrArg(
            options=["--encrypt-type", "--et"],
            enum={
                "AS": "a-secret",
                "BS": "b-secret"
            },
            help="Encrypt Type"
        )

        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Resource tags."
        )
        _args_schema.tags.Element = AAZStrArg()

        _args_schema.flags = AAZListArg(
            options=["--flags"],
            singular_options=["--flag"],
            help="Flags"
        )
        _args_schema.flags.Element = AAZIntArg()

        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            help="The extended location of the virtual network."
        )
        _args_schema.extended_location.name = AAZStrArg(
            help="The name of the extended location."
        )
        _args_schema.extended_location.type = AAZStrArg(
            help="The type of the extended location.",
            enum=["EdgeZone", "CoreZone"]
        )

        _args_schema.address_space = AAZObjectArg(
            options=["--address-space"],
            help="The AddressSpace that contains an array of IP address ranges that can be used by subnets."
        )
        _args_schema.address_space.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="A list of address blocks reserved for this virtual network in CIDR notation.",
        )
        _args_schema.address_space.address_prefixes.Element = AAZStrArg()

        _args_schema.dhcp_options = AAZObjectArg(
            options=["--dhcp-options"],
            help="The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network."
        )
        _args_schema.dhcp_options.dns_servers = AAZListArg(
            options=["dns-servers"],
            help="The list of DNS servers IP addresses."
        )
        _args_schema.dhcp_options.dns_servers.Element = AAZStrArg()

        _args_schema.flow_timeout_in_minutes = AAZIntArg(
            options=["--flow-timeout-in-minutes"],
            help="The FlowTimeout value (in minutes) for the Virtual Network"
        )

        _args_schema.subnets = AAZListArg(
            options=["--subnets"],
            help="A list of subnets in a Virtual Network.",
        )
        _args_schema.subnets.Element = AAZObjectArg()
        _args_schema.subnets.Element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="The address prefix for the subnet."
        )
        _args_schema.subnets.Element.address_prefixes = AAZListArg(
            options=["address-prefixes"],
            help="List of address prefixes for the subnet.",
        )
        _args_schema.subnets.Element.address_prefixes.Element = AAZStrArg()
        _args_schema.subnets.Element.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="The reference to the NetworkSecurityGroup resource.",
        )
        _args_schema.subnets.Element.network_security_group.id = AAZStrArg(
            options=["id"],
            help="Resource ID."
        )

        return _args_schema

    _args_address_space_create = None

    @classmethod
    def _build_args_address_space_create(cls, schema):
        if cls._args_address_space_create is not None:
            schema.address_prefixes = cls._args_address_space_create.address_prefixes
            return

        cls._args_address_space_create = _args_address_space_create = AAZObjectArg()
        _args_address_space_create.address_prefixes = AAZListArg(
            options=["address-prefixes"], singular_options=["address-prefix"],
            help="A list of address blocks reserved for this virtual network in CIDR notation.",
        )
        # assign schema
        schema.address_prefixes = _args_address_space_create.address_prefixes

        # define deeper
        address_prefixes = _args_address_space_create.address_prefixes
        address_prefixes.Element = AAZStrArg()

    class VirtualNetworksCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"
        ERROR_FORMAT = "MgmtErrorFormat"
        # ignore implement here

        @property
        def content(self):

            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
            )

            _builder.set_prop('id', AAZStrType, '.id')
            _builder.set_prop('location', AAZStrType, '.location')
            _builder.set_prop('subnets', AAZListType, '.subnets')
            _builder.set_prop('tags', AAZDictType, '.tags')
            _builder.set_prop('extendedLocation', AAZObjectType, '.extended_location')
            _builder.set_prop('properties', AAZObjectType, '.')

            tags = _builder.get('.tags')
            if tags is not None:
                tags.set_elements(AAZStrType, '.')

            extended_location = _builder.get('.extendedLocation')
            if extended_location is not None:
                extended_location.set_prop('name', AAZStrType, '.name')
                extended_location.set_prop('type', AAZStrType, '.type')

            properties = _builder.get('.properties')
            if properties is not None:
                properties.set_prop(
                    'addressSpace', AAZObjectType, '.address_space')
                properties.set_prop('addressPrefixes', AAZListType, '.address_prefixes')

            address_prefixes = _builder.get('.properties.addressPrefixes')
            if address_prefixes is not None:
                address_prefixes.set_elements(AAZStrType, '.')

            subnets = _builder.get('.subnets')
            if subnets is not None:
                subnets.set_elements(AAZObjectType, '.')

            elements = _builder.get('.subnets[]')
            if elements is not None:
                elements.set_prop('id', AAZStrType, '.id')
                elements.set_prop('properties', AAZObjectType, '.')

            properties = _builder.get('.subnets[].properties')
            if properties is not None:
                properties.set_prop('addressPrefix', AAZStrType, '.address_prefix')
                properties.set_prop('addressPrefixes', AAZListType, '.address_prefixes')

            address_prefixes = _builder.get('.subnets[].properties.addressPrefixes')
            if address_prefixes is not None:
                address_prefixes.set_elements(AAZStrType, '.')

            return self.serialize_content(_content_value)

        # @staticmethod
        # def


__all__ = ["Create"]
