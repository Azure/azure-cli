# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "maintenance2 maintenance-configuration delete",
    confirmation="Are you sure you want to perform this operation?",
)
class Delete(AAZCommand):
    """Test
    """

    _aaz_info = {
        "version": "2022-07-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}", "2022-07-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["-n", "--name", "--resource-name"],
            help="Maintenance Configuration Name",
            required=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MaintenanceConfigurationsDelete(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MaintenanceConfigurationsDelete(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)
            if session.http_response.status_code in [204]:
                return self.on_204(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "DELETE"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-07-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.extension_properties = AAZDictType(
                serialized_name="extensionProperties",
            )
            properties.install_patches = AAZObjectType(
                serialized_name="installPatches",
            )
            properties.maintenance_scope = AAZStrType(
                serialized_name="maintenanceScope",
            )
            properties.maintenance_window = AAZObjectType(
                serialized_name="maintenanceWindow",
                flags={"client_flatten": True},
            )
            properties.namespace = AAZStrType()
            properties.visibility = AAZStrType()

            extension_properties = cls._schema_on_200.properties.extension_properties
            extension_properties.Element = AAZStrType()

            install_patches = cls._schema_on_200.properties.install_patches
            install_patches.linux_parameters = AAZObjectType(
                serialized_name="linuxParameters",
            )
            install_patches.reboot_setting = AAZStrType(
                serialized_name="rebootSetting",
            )
            install_patches.tasks = AAZObjectType(
                flags={"client_flatten": True},
            )
            install_patches.windows_parameters = AAZObjectType(
                serialized_name="windowsParameters",
            )

            linux_parameters = cls._schema_on_200.properties.install_patches.linux_parameters
            linux_parameters.classifications_to_include = AAZListType(
                serialized_name="classificationsToInclude",
            )
            linux_parameters.package_name_masks_to_exclude = AAZListType(
                serialized_name="packageNameMasksToExclude",
            )
            linux_parameters.package_name_masks_to_include = AAZListType(
                serialized_name="packageNameMasksToInclude",
            )

            classifications_to_include = cls._schema_on_200.properties.install_patches.linux_parameters.classifications_to_include
            classifications_to_include.Element = AAZStrType()

            package_name_masks_to_exclude = cls._schema_on_200.properties.install_patches.linux_parameters.package_name_masks_to_exclude
            package_name_masks_to_exclude.Element = AAZStrType()

            package_name_masks_to_include = cls._schema_on_200.properties.install_patches.linux_parameters.package_name_masks_to_include
            package_name_masks_to_include.Element = AAZStrType()

            tasks = cls._schema_on_200.properties.install_patches.tasks
            tasks.post_tasks = AAZListType(
                serialized_name="postTasks",
            )
            tasks.pre_tasks = AAZListType(
                serialized_name="preTasks",
            )

            post_tasks = cls._schema_on_200.properties.install_patches.tasks.post_tasks
            post_tasks.Element = AAZObjectType()
            _DeleteHelper._build_schema_task_properties_read(post_tasks.Element)

            pre_tasks = cls._schema_on_200.properties.install_patches.tasks.pre_tasks
            pre_tasks.Element = AAZObjectType()
            _DeleteHelper._build_schema_task_properties_read(pre_tasks.Element)

            windows_parameters = cls._schema_on_200.properties.install_patches.windows_parameters
            windows_parameters.classifications_to_include = AAZListType(
                serialized_name="classificationsToInclude",
            )
            windows_parameters.exclude_kbs_requiring_reboot = AAZBoolType(
                serialized_name="excludeKbsRequiringReboot",
            )
            windows_parameters.kb_numbers_to_exclude = AAZListType(
                serialized_name="kbNumbersToExclude",
            )
            windows_parameters.kb_numbers_to_include = AAZListType(
                serialized_name="kbNumbersToInclude",
            )

            classifications_to_include = cls._schema_on_200.properties.install_patches.windows_parameters.classifications_to_include
            classifications_to_include.Element = AAZStrType()

            kb_numbers_to_exclude = cls._schema_on_200.properties.install_patches.windows_parameters.kb_numbers_to_exclude
            kb_numbers_to_exclude.Element = AAZStrType()

            kb_numbers_to_include = cls._schema_on_200.properties.install_patches.windows_parameters.kb_numbers_to_include
            kb_numbers_to_include.Element = AAZStrType()

            maintenance_window = cls._schema_on_200.properties.maintenance_window
            maintenance_window.duration = AAZStrType()
            maintenance_window.expiration_date_time = AAZStrType(
                serialized_name="expirationDateTime",
            )
            maintenance_window.recur_every = AAZStrType(
                serialized_name="recurEvery",
            )
            maintenance_window.start_date_time = AAZStrType(
                serialized_name="startDateTime",
            )
            maintenance_window.time_zone = AAZStrType(
                serialized_name="timeZone",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200

        def on_204(self, session):
            pass


class _DeleteHelper:
    """Helper class for Delete"""

    _schema_task_properties_read = None

    @classmethod
    def _build_schema_task_properties_read(cls, _schema):
        if cls._schema_task_properties_read is not None:
            _schema.parameters = cls._schema_task_properties_read.parameters
            _schema.source = cls._schema_task_properties_read.source
            _schema.task_scope = cls._schema_task_properties_read.task_scope
            return

        cls._schema_task_properties_read = _schema_task_properties_read = AAZObjectType()

        task_properties_read = _schema_task_properties_read
        task_properties_read.parameters = AAZDictType()
        task_properties_read.source = AAZStrType()
        task_properties_read.task_scope = AAZStrType(
            serialized_name="taskScope",
        )

        parameters = _schema_task_properties_read.parameters
        parameters.Element = AAZStrType()

        _schema.parameters = cls._schema_task_properties_read.parameters
        _schema.source = cls._schema_task_properties_read.source
        _schema.task_scope = cls._schema_task_properties_read.task_scope


__all__ = ["Delete"]
