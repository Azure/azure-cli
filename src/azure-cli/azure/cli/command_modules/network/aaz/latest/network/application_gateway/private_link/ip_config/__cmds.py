# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network application-gateway private-link ip-config",
    is_preview=True,
)
class __CMDGroup(AAZCommandGroup):
    """Manage IP configuration of a private link to configure its capability.
    """
    pass


@register_command(
    "network application-gateway private-link ip-config add",
    is_preview=True,
)
class Add(AAZCommand):
    """Add an IP configuration to a private link to scale up its capability.

    :example: Add an IP configuration to a private link.
        az network application-gateway private-link ip-config add -n MyIPConfig -g MyResourceGroup  --gateway-name MyGateway --private-link MyPrivateLink --primary true
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.privateLinkConfigurations[].properties.ipConfigurations[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.private_link = AAZStrArg(
            options=["--private-link"],
            help="Name of private link.",
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the private IP for private link.",
            required=True,
        )

        # define Arg Group "Parameters.properties.privateLinkConfigurations[].properties.ipConfigurations[]"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.primary = AAZBoolArg(
            options=["--primary"],
            arg_group="Properties",
            help="Whether the IP configuration is primary or not.",
        )
        _args_schema.ip_address = AAZStrArg(
            options=["--ip-address"],
            arg_group="Properties",
            help="Static private IP address of a subnet for private link. If omitting, a dynamic one will be created.",
        )
        _args_schema.private_ip_allocation_method = AAZStrArg(
            options=["--private-ip-allocation-method"],
            arg_group="Properties",
            help="The private IP address allocation method.",
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        _args_schema.subnet = AAZObjectArg(
            options=["--subnet"],
            arg_group="Properties",
            help="Reference to the subnet resource.",
        )
        cls._build_args_sub_resource_update(_args_schema.subnet)
        return cls._args_schema

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg()

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )

        _schema.id = cls._args_sub_resource_update.id

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        yield self.ApplicationGatewaysCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AddHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200

    class ApplicationGatewaysCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _AddHelper._build_schema_application_gateway_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("primary", AAZBoolType, ".primary")
                properties.set_prop("privateIPAddress", AAZStrType, ".ip_address")
                properties.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
                _AddHelper._build_schema_sub_resource_update(properties.set_prop("subnet", AAZObjectType, ".subnet"))

            return _instance_value


@register_command(
    "network application-gateway private-link ip-config list",
    is_preview=True,
)
class List(AAZCommand):
    """List all the IP configurations of a private link.

    :example: List all the IP configurations of a private link.
        az network application-gateway private-link ip-config list -g MyResourceGroup --gateway-name MyGateway --private-link MyPrivateLink
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.privateLinkConfigurations[].properties.ipConfigurations"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.private_link = AAZStrArg(
            options=["--private-link"],
            help="Name of private link.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            return result.properties.ipConfigurations

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result.properties.ipConfigurations = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ListHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway private-link ip-config remove",
    is_preview=True,
    confirmation="Are you sure you want to perform this operation?",
)
class Remove(AAZCommand):
    """Remove an IP configuration from a private link to scale down its capability.

    :example: Remove an IP configuration from a private link.
        az network application-gateway private-link ip-config remove -n MyIPConfig -g MyResourceGroup --gateway-name MyGateway --private-link MyPrivateLink --yes
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.privateLinkConfigurations[].properties.ipConfigurations[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.private_link = AAZStrArg(
            options=["--private-link"],
            help="Name of private link.",
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the private IP for private link.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        yield self.ApplicationGatewaysCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _RemoveHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200

    class ApplicationGatewaysCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _RemoveHelper._build_schema_application_gateway_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


@register_command(
    "network application-gateway private-link ip-config show",
    is_preview=True,
)
class Show(AAZCommand):
    """Show an IP configuration of a private link.

    :example: Show an IP configuration of a private link.
        az network application-gateway private-link ip-config show -n MyIPConfig -g MyResourceGroup --gateway-name MyGateway --private-link MyPrivateLink
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.privateLinkConfigurations[].properties.ipConfigurations[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.private_link = AAZStrArg(
            options=["--private-link"],
            help="Name of private link.",
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the private IP for private link.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.privateLinkConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.private_link,
                filters
            )
            idx = next(filters)[0]
            result = result[idx]
            result = result.properties.ipConfigurations
            filters = enumerate(result)
            filters = filter(
                lambda e: e[1].name == self.ctx.args.name,
                filters
            )
            idx = next(filters, [len(result)])[0]
            result[idx] = value
            return

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network application-gateway private-link ip-config wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/applicationgateways/{}", "2022-05-01", "properties.privateLinkConfigurations[].properties.ipConfigurations[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gateway_name = AAZStrArg(
            options=["--gateway-name"],
            help="Name of the application gateway.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApplicationGatewaysGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ApplicationGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "applicationGatewayName", self.ctx.args.gateway_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _WaitHelper._build_schema_application_gateway_read(cls._schema_on_200)

            return cls._schema_on_200


@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _AddHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None


    @classmethod
    def _build_schema_sub_resource_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")


@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _ListHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _RemoveHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _ShowHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_gateway_backend_address_pool_read", "...__cmds"),
    ("_build_schema_application_gateway_custom_error_read", "...__cmds"),
    ("_build_schema_application_gateway_header_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ip_configuration_read", "...__cmds"),
    ("_build_schema_application_gateway_ssl_policy_read", "...__cmds"),
    ("_build_schema_application_gateway_read", "..__cmds"),
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _WaitHelper:
    _schema_application_gateway_backend_address_pool_read = None

    _schema_application_gateway_custom_error_read = None

    _schema_application_gateway_header_configuration_read = None

    _schema_application_gateway_ip_configuration_read = None

    _schema_application_gateway_ssl_policy_read = None

    _schema_application_gateway_read = None

    _schema_application_security_group_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



__all__ = ["Add","List","Remove","Show","Wait","__CMDGroup"]
