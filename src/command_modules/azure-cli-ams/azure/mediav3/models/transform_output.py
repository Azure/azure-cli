# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class TransformOutput(Model):
    """Describes an Output from the Transform.

    :param on_error: Describes what to do if the output fails with the rest of
     the other outputs. The default is stop the rest of the outputs. Possible
     values include: 'StopProcessingJob', 'ContinueJob'
    :type on_error: str or ~accounts.models.OnErrorType
    :param relative_priority: Sets the relative priority of the
     TransformOutputs within a Transform. This gives a hint to the system that
     one TransformOutput is higher priority than another in the same Transform.
     The default is normal. Possible values include: 'Low', 'Normal', 'High'
    :type relative_priority: str or ~accounts.models.Priority
    :param preset: Preset that describes the Media Processor operation that
     will be used to generate the output.
    :type preset: ~accounts.models.Preset
    """

    _validation = {
        'preset': {'required': True},
    }

    _attribute_map = {
        'on_error': {'key': 'onError', 'type': 'OnErrorType'},
        'relative_priority': {'key': 'relativePriority', 'type': 'Priority'},
        'preset': {'key': 'preset', 'type': 'Preset'},
    }

    def __init__(self, preset, on_error=None, relative_priority=None):
        super(TransformOutput, self).__init__()
        self.on_error = on_error
        self.relative_priority = relative_priority
        self.preset = preset
