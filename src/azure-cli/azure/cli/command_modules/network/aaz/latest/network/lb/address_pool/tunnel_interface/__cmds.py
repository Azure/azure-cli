# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command_group(
    "network lb address-pool tunnel-interface",
    is_preview=True,
)
class __CMDGroup(AAZCommandGroup):
    """Manage tunnel interfaces of a load balancer.
    """
    pass


@register_command(
    "network lb address-pool tunnel-interface add",
    is_preview=True,
)
class Add(AAZCommand):
    """Add one tunnel interface into the load balance tunnel interface pool.

    :example: Add one tunnel interface into the load balance tunnel interface pool.
        az network lb address-pool tunnel-interface add -g MyResourceGroup --lb-name MyLb --address-pool MyAddressPool --type external --protocol vxlan --identifier 901 --port 10000
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01", "properties.tunnelInterfaces[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["--address-pool", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.index = AAZIntArg(
            options=["--index"],
            help="Index of the tunnel interfaces to change.",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.identifier = AAZIntArg(
            options=["--identifier"],
            arg_group="Properties",
            help="Identifier of gateway load balancer tunnel interface.",
        )
        _args_schema.port = AAZIntArg(
            options=["--port"],
            arg_group="Properties",
            help="Port of gateway load balancer tunnel interface.",
        )
        _args_schema.protocol = AAZStrArg(
            options=["--protocol"],
            arg_group="Properties",
            help="Protocol of gateway load balancer tunnel interface.",
            enum={"Native": "Native", "None": "None", "VXLAN": "VXLAN"},
        )
        _args_schema.type = AAZStrArg(
            options=["--type"],
            arg_group="Properties",
            help="Traffic type of gateway load balancer tunnel interface.",
            enum={"External": "External", "Internal": "Internal", "None": "None"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        yield self.LoadBalancerBackendAddressPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.index = idx
            result[idx] = value
            return

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AddHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200

    class LoadBalancerBackendAddressPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _AddHelper._build_schema_backend_address_pool_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("identifier", AAZIntType, ".identifier")
            _builder.set_prop("port", AAZIntType, ".port")
            _builder.set_prop("protocol", AAZStrType, ".protocol")
            _builder.set_prop("type", AAZStrType, ".type")

            return _instance_value


@register_command(
    "network lb address-pool tunnel-interface list",
    is_preview=True,
)
class List(AAZCommand):
    """List all tunnel interfacees of the load balance tunnel interface pool.

    :example: List all tunnel interfacees of the load balance tunnel interface pool.
        az network lb address-pool tunnel-interface list -g MyResourceGroup --lb-name MyLb --address-pool MyAddressPool
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01", "properties.tunnelInterfaces"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["--address-pool", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.properties.tunnelInterfaces

        def _set(self, value):
            result = self.ctx.vars.instance
            result.properties.tunnelInterfaces = value
            return

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ListHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network lb address-pool tunnel-interface remove",
    is_preview=True,
)
class Remove(AAZCommand):
    """Remove one tunnel interface from the load  balance tunnel interface pool.

    :example: Remove one tunnel interface from the load balance tunnel interface pool.
        az network lb address-pool tunnel-interface remove -g MyResourceGroup --lb-name MyLb --address-pool MyAddressPool --index 0
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01", "properties.tunnelInterfaces[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["--address-pool", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.index = AAZIntArg(
            options=["--index"],
            help="Index of the tunnel interfaces to change.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        yield self.LoadBalancerBackendAddressPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.index = idx
            result[idx] = value
            return

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _RemoveHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200

    class LoadBalancerBackendAddressPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _RemoveHelper._build_schema_backend_address_pool_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


@register_command(
    "network lb address-pool tunnel-interface show",
    is_preview=True,
)
class Show(AAZCommand):
    """Get one tunnel interface of load balance tunnel interface pool.

    :example: Get one tunnel interface from the load balance tunnel interface pool.
        az network lb address-pool tunnel-interface show -g MyResourceGroup --lb-name MyLb --address-pool MyAddressPool --index 0
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01", "properties.tunnelInterfaces[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["--address-pool", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.index = AAZIntArg(
            options=["--index"],
            help="Index of the tunnel interfaces to change.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.index = idx
            result[idx] = value
            return

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200


@register_command(
    "network lb address-pool tunnel-interface update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update one tunnel interface of load balance tunnel interface pool.

    :example: update one tunnel interface of load balance tunnel interface pool.
        az network lb address-pool tunnel-interface update -g MyResourceGroup --lb-name MyLb --address-pool MyAddressPool --type external --protocol vxlan --identifier 901 --port 10000 --index 0
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01", "properties.tunnelInterfaces[]"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["--address-pool", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.index = AAZIntArg(
            options=["--index"],
            help="Index of the tunnel interfaces to change.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.identifier = AAZIntArg(
            options=["--identifier"],
            arg_group="Properties",
            help="Identifier of gateway load balancer tunnel interface.",
            nullable=True,
        )
        _args_schema.port = AAZIntArg(
            options=["--port"],
            arg_group="Properties",
            help="Port of gateway load balancer tunnel interface.",
            nullable=True,
        )
        _args_schema.protocol = AAZStrArg(
            options=["--protocol"],
            arg_group="Properties",
            help="Protocol of gateway load balancer tunnel interface.",
            nullable=True,
            enum={"Native": "Native", "None": "None", "VXLAN": "VXLAN"},
        )
        _args_schema.type = AAZStrArg(
            options=["--type"],
            arg_group="Properties",
            help="Traffic type of gateway load balancer tunnel interface.",
            nullable=True,
            enum={"External": "External", "Internal": "Internal", "None": "None"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.selectors.subresource.required())
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.selectors.subresource.required())
        yield self.LoadBalancerBackendAddressPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters)[0]
            return result[idx]

        def _set(self, value):
            result = self.ctx.vars.instance
            result = result.properties.tunnelInterfaces
            filters = enumerate(result)
            filters = filter(
                lambda e: e[0] == self.ctx.args.index,
                filters
            )
            idx = next(filters, [len(result)])[0]
            self.ctx.args.index = idx
            result[idx] = value
            return

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200

    class LoadBalancerBackendAddressPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_backend_address_pool_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.selectors.subresource.required())

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identifier", AAZIntType, ".identifier")
            _builder.set_prop("port", AAZIntType, ".port")
            _builder.set_prop("protocol", AAZStrType, ".protocol")
            _builder.set_prop("type", AAZStrType, ".type")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.selectors.subresource.required(),
                self.ctx.generic_update_args
            )


@register_command(
    "network lb address-pool tunnel-interface wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/loadbalancers/{}/backendaddresspools/{}", "2022-05-01", "properties.tunnelInterfaces[]"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.address_pool_name = AAZStrArg(
            options=["--address-pool", "--address-pool-name"],
            help="The name of the backend address pool.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.lb_name = AAZStrArg(
            options=["--lb-name"],
            help="The name of the load balancer.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LoadBalancerBackendAddressPoolsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class LoadBalancerBackendAddressPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backendAddressPoolName", self.ctx.args.address_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "loadBalancerName", self.ctx.args.lb_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _WaitHelper._build_schema_backend_address_pool_read(cls._schema_on_200)

            return cls._schema_on_200


class _Helper:

    @staticmethod
    def _build_schema_network_interface_ip_configuration_read(cls, _schema):
        if cls._schema_network_interface_ip_configuration_read is not None:
            _schema.etag = cls._schema_network_interface_ip_configuration_read.etag
            _schema.id = cls._schema_network_interface_ip_configuration_read.id
            _schema.name = cls._schema_network_interface_ip_configuration_read.name
            _schema.properties = cls._schema_network_interface_ip_configuration_read.properties
            _schema.type = cls._schema_network_interface_ip_configuration_read.type
            return

        cls._schema_network_interface_ip_configuration_read = _schema_network_interface_ip_configuration_read = AAZObjectType()

        network_interface_ip_configuration_read = _schema_network_interface_ip_configuration_read
        network_interface_ip_configuration_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        network_interface_ip_configuration_read.id = AAZStrType()
        network_interface_ip_configuration_read.name = AAZStrType()
        network_interface_ip_configuration_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        network_interface_ip_configuration_read.type = AAZStrType()

        properties = _schema_network_interface_ip_configuration_read.properties
        properties.application_gateway_backend_address_pools = AAZListType(
            serialized_name="applicationGatewayBackendAddressPools",
        )
        properties.application_security_groups = AAZListType(
            serialized_name="applicationSecurityGroups",
        )
        properties.gateway_load_balancer = AAZObjectType(
            serialized_name="gatewayLoadBalancer",
        )
        cls._build_schema_sub_resource_read(properties.gateway_load_balancer)
        properties.load_balancer_backend_address_pools = AAZListType(
            serialized_name="loadBalancerBackendAddressPools",
        )
        properties.load_balancer_inbound_nat_rules = AAZListType(
            serialized_name="loadBalancerInboundNatRules",
        )
        properties.primary = AAZBoolType()
        properties.private_ip_address = AAZStrType(
            serialized_name="privateIPAddress",
        )
        properties.private_ip_address_version = AAZStrType(
            serialized_name="privateIPAddressVersion",
        )
        properties.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIPAllocationMethod",
        )
        properties.private_link_connection_properties = AAZObjectType(
            serialized_name="privateLinkConnectionProperties",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_ip_address = AAZObjectType(
            serialized_name="publicIPAddress",
        )
        cls._build_schema_public_ip_address_read(properties.public_ip_address)
        properties.subnet = AAZObjectType()
        cls._build_schema_subnet_read(properties.subnet)
        properties.virtual_network_taps = AAZListType(
            serialized_name="virtualNetworkTaps",
        )

        application_gateway_backend_address_pools = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools
        application_gateway_backend_address_pools.Element = AAZObjectType()

        _element = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties
        properties.backend_addresses = AAZListType(
            serialized_name="backendAddresses",
        )
        properties.backend_ip_configurations = AAZListType(
            serialized_name="backendIPConfigurations",
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        backend_addresses = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties.backend_addresses
        backend_addresses.Element = AAZObjectType()

        _element = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties.backend_addresses.Element
        _element.fqdn = AAZStrType()
        _element.ip_address = AAZStrType(
            serialized_name="ipAddress",
        )

        backend_ip_configurations = _schema_network_interface_ip_configuration_read.properties.application_gateway_backend_address_pools.Element.properties.backend_ip_configurations
        backend_ip_configurations.Element = AAZObjectType()
        cls._build_schema_network_interface_ip_configuration_read(backend_ip_configurations.Element)

        application_security_groups = _schema_network_interface_ip_configuration_read.properties.application_security_groups
        application_security_groups.Element = AAZObjectType()
        cls._build_schema_application_security_group_read(application_security_groups.Element)

        load_balancer_backend_address_pools = _schema_network_interface_ip_configuration_read.properties.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectType()
        cls._build_schema_backend_address_pool_read(load_balancer_backend_address_pools.Element)

        load_balancer_inbound_nat_rules = _schema_network_interface_ip_configuration_read.properties.load_balancer_inbound_nat_rules
        load_balancer_inbound_nat_rules.Element = AAZObjectType()

        _element = _schema_network_interface_ip_configuration_read.properties.load_balancer_inbound_nat_rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_network_interface_ip_configuration_read.properties.load_balancer_inbound_nat_rules.Element.properties
        properties.backend_address_pool = AAZObjectType(
            serialized_name="backendAddressPool",
        )
        cls._build_schema_sub_resource_read(properties.backend_address_pool)
        properties.backend_ip_configuration = AAZObjectType(
            serialized_name="backendIPConfiguration",
        )
        cls._build_schema_network_interface_ip_configuration_read(properties.backend_ip_configuration)
        properties.backend_port = AAZIntType(
            serialized_name="backendPort",
        )
        properties.enable_floating_ip = AAZBoolType(
            serialized_name="enableFloatingIP",
        )
        properties.enable_tcp_reset = AAZBoolType(
            serialized_name="enableTcpReset",
        )
        properties.frontend_ip_configuration = AAZObjectType(
            serialized_name="frontendIPConfiguration",
        )
        cls._build_schema_sub_resource_read(properties.frontend_ip_configuration)
        properties.frontend_port = AAZIntType(
            serialized_name="frontendPort",
        )
        properties.frontend_port_range_end = AAZIntType(
            serialized_name="frontendPortRangeEnd",
        )
        properties.frontend_port_range_start = AAZIntType(
            serialized_name="frontendPortRangeStart",
        )
        properties.idle_timeout_in_minutes = AAZIntType(
            serialized_name="idleTimeoutInMinutes",
        )
        properties.protocol = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        private_link_connection_properties = _schema_network_interface_ip_configuration_read.properties.private_link_connection_properties
        private_link_connection_properties.fqdns = AAZListType(
            flags={"read_only": True},
        )
        private_link_connection_properties.group_id = AAZStrType(
            serialized_name="groupId",
            flags={"read_only": True},
        )
        private_link_connection_properties.required_member_name = AAZStrType(
            serialized_name="requiredMemberName",
            flags={"read_only": True},
        )

        fqdns = _schema_network_interface_ip_configuration_read.properties.private_link_connection_properties.fqdns
        fqdns.Element = AAZStrType()

        virtual_network_taps = _schema_network_interface_ip_configuration_read.properties.virtual_network_taps
        virtual_network_taps.Element = AAZObjectType()
        cls._build_schema_virtual_network_tap_read(virtual_network_taps.Element)

        _schema.etag = cls._schema_network_interface_ip_configuration_read.etag
        _schema.id = cls._schema_network_interface_ip_configuration_read.id
        _schema.name = cls._schema_network_interface_ip_configuration_read.name
        _schema.properties = cls._schema_network_interface_ip_configuration_read.properties
        _schema.type = cls._schema_network_interface_ip_configuration_read.type


@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_backend_address_pool_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _AddHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_backend_address_pool_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _ListHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_backend_address_pool_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _RemoveHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_backend_address_pool_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _ShowHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_backend_address_pool_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _UpdateHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



@link_helper(
    __package__,
    ("_build_schema_application_security_group_read", "...__cmds"),
    ("_build_schema_backend_address_pool_read", "...__cmds"),
    ("_build_schema_extended_location_read", "...__cmds"),
    ("_build_schema_frontend_ip_configuration_read", "...__cmds"),
    ("_build_schema_ip_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_ip_configuration_read", _Helper),
    ("_build_schema_network_interface_tap_configuration_read", "...__cmds"),
    ("_build_schema_network_interface_read", "...__cmds"),
    ("_build_schema_network_security_group_read", "...__cmds"),
    ("_build_schema_private_endpoint_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_state_read", "...__cmds"),
    ("_build_schema_private_link_service_connection_read", "...__cmds"),
    ("_build_schema_public_ip_address_read", "...__cmds"),
    ("_build_schema_security_rule_read", "...__cmds"),
    ("_build_schema_sub_resource_read", "...__cmds"),
    ("_build_schema_subnet_read", "...__cmds"),
    ("_build_schema_virtual_network_tap_read", "...__cmds"),
)
class _WaitHelper:
    _schema_application_security_group_read = None

    _schema_backend_address_pool_read = None

    _schema_extended_location_read = None

    _schema_frontend_ip_configuration_read = None

    _schema_ip_configuration_read = None

    _schema_network_interface_ip_configuration_read = None

    _schema_network_interface_tap_configuration_read = None

    _schema_network_interface_read = None

    _schema_network_security_group_read = None

    _schema_private_endpoint_read = None

    _schema_private_link_service_connection_state_read = None

    _schema_private_link_service_connection_read = None

    _schema_public_ip_address_read = None

    _schema_security_rule_read = None

    _schema_sub_resource_read = None

    _schema_subnet_read = None

    _schema_virtual_network_tap_read = None



__all__ = ["Add","List","Remove","Show","Update","Wait","__CMDGroup"]
