# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MetricValue(Model):
    """
    Represents a metric value.

    :param timestamp: Gets or sets the timestamp for the metric value.
    :type timestamp: datetime
    :param average: Gets or sets the average value in the time range.
    :type average: float
    :param minimum: Gets or sets the least value in the time range.
    :type minimum: float
    :param maximum: Gets or sets the greatest value in the time range.
    :type maximum: float
    :param total: Gets or sets the sum of all of the values in the time range.
    :type total: float
    :param count: Gets or sets the number of samples in the time range. Can
     be used to determine the number of values that contributed to the
     average value.
    :type count: long
    """ 

    _validation = {
        'timestamp': {'required': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'average': {'key': 'average', 'type': 'float'},
        'minimum': {'key': 'minimum', 'type': 'float'},
        'maximum': {'key': 'maximum', 'type': 'float'},
        'total': {'key': 'total', 'type': 'float'},
        'count': {'key': 'count', 'type': 'long'},
    }

    def __init__(self, timestamp, average=None, minimum=None, maximum=None, total=None, count=None):
        self.timestamp = timestamp
        self.average = average
        self.minimum = minimum
        self.maximum = maximum
        self.total = total
        self.count = count
